---
- hosts: influxdb
  vars:
    chronograf_google_creds_path: "secret/ansible/{{ deploy_environ }}/accounts/chronograf_google"
    influxdb_conf_file: /etc/influxdb/influxdb.conf
    ansible_managed_header: "MANAGED BY ANSIBLE"
    chronograf_version: 1.7.12
    chronograf_checksum: "sha256:ea261d5de9ad7738980f091cb78c5762ee57cdac8bf56ec1fdf36953351ff2cc"
    chronograf_canned_path: /usr/share/chronograf/canned
    kapacitor_version: 1.5.3
    kapacitor_checksum: "md5:2fb06503a66e3cc5fb1f9b86875da39d"
    kapacitor_conf_file: /etc/kapacitor/kapacitor.conf
    kapacitor_load_dir: /etc/kapacitor/load

  tasks:

    - name: Add InfluxDB GPG key
      apt_key:
        url: https://repos.influxdata.com/influxdb.key
      become: yes
      tags: setup

    - name: Add InfluxDB repo
      apt_repository:
        repo: "deb https://repos.influxdata.com/ubuntu {{ ubuntu_release }} stable"
      become: yes
      tags: setup

    - name: Install InfluxDB
      apt:
        name: influxdb
        update_cache: yes
      become: yes
      tags: setup

    - name: "Download Kapacitor v{{ kapacitor_version }}"
      get_url:
        url: "https://dl.influxdata.com/kapacitor/releases/kapacitor_{{ kapacitor_version }}_amd64.deb"
        dest: "{{ ansible_env.HOME }}/kapacitor_{{ kapacitor_version }}_amd64.deb"
        checksum: "{{ kapacitor_checksum }}"
      register: kapacitor_download
      tags: setup

    - name: Install Kapacitor
      apt:
        deb: "{{ kapacitor_download.dest }}"
      become: yes
      tags: setup

    - name: "Download Chronograf v{{ chronograf_version }}"
      get_url:
        url: "https://dl.influxdata.com/chronograf/releases/chronograf_{{ chronograf_version }}_amd64.deb"
        dest: "{{ ansible_env.HOME }}/chronograf_{{ chronograf_version }}_amd64.deb"
        checksum: "{{ chronograf_checksum }}"
      register: chronograf_download
      tags: setup

    - name: Install Chronograf
      apt:
        deb: "{{ chronograf_download.dest }}"
      become: yes
      tags: setup

    - name: Set up certs
      import_role:
        name: web
      vars:
        nginx_config_template: "internal/chronograf/nginx-config.j2"
        cert_domains: [ "{{ influxdb_vm_hostname }}" ]
        post_renewal_hooks:
          - hook_name: influxdb_restart
            hook_content: "{{ lookup('template', 'internal/influxdb_restart.hook.j2') }}"
      tags: setup

    - include_role:
        name: cert_access
      vars:
        cert_hostname: "{{ influxdb_vm_hostname }}"
      loop:
        - influxdb
        - kapacitor
        - chronograf
      loop_control:
        loop_var: cert_user
      tags: setup

    - name: Install pip
      apt:
        name: python3-pip
        state: present
      become: yes
      tags: setup

    - name: Install influxdb python module
      pip:
        name: influxdb
      become: yes
      tags: setup

    - name: Look up credentials in vault
      set_fact:
        vault_lookup: "{{ lookup('vault', vault_influxdb_creds_path, chronograf_google_creds_path) }}"

    - set_fact:
        influxdb_user: "{{ vault_lookup.influxdb.data.user }}"
        influxdb_password: "{{ vault_lookup.influxdb.data.pass }}"
        influxdb_creds_version: "{{ vault_lookup.influxdb.metadata.version }}"
        influxdb_old_user: "{{ vault_lookup.influxdb.data.user }}"
        influxdb_old_password: "{{ vault_lookup.influxdb.data.pass }}"
        chronograf_google_client_id: "{{ vault_lookup.chronograf_google.data.client_id }}"
        chronograf_google_client_secret: "{{ vault_lookup.chronograf_google.data.client_secret }}"
        chronograf_google_token_secret: "{{ vault_lookup.chronograf_google.data.token_secret }}"

    - block:
      - set_fact:
          vault_lookup: "{{ lookup('vault', old_version) }}"
        vars:
          old_version: "{{ vault_influxdb_creds_path }}@{{ influxdb_creds_version|int - 1 }}"

      - set_fact:
          influxdb_old_user: "{{ vault_lookup.influxdb.data.user }}"
          influxdb_old_password: "{{ vault_lookup.influxdb.data.pass }}"
      when: influxdb_creds_version|int > 1

    - name: Check if initial setup is complete
      lineinfile:
        path: "{{ influxdb_conf_file }}"
        regexp: "{{ ansible_managed_header }}"
        state: absent
      check_mode: yes
      register: setup_complete_header

    - block:

      - name: Copy initial config
        template:
          src: internal/influxdb.conf.j2
          dest: "{{ influxdb_conf_file }}"
        vars:
          ansible_header: "TEMPORARY"
          influxdb_auth_enabled: "false"
        become: yes

      - name: Ensure InfluxDB is running
        systemd:
          name: influxdb
          enabled: yes
          state: restarted
        become: yes

      - name: Set up admin account
        influxdb_user:
          hostname: "{{ influxdb_vm_hostname }}"
          ssl: yes
          user_name: "{{ influxdb_user }}"
          user_password: "{{ influxdb_password }}"
          admin: yes

      when: not setup_complete_header.found

    - name: Set up InfluxDB config
      template:
        src: internal/influxdb.conf.j2
        dest: "{{ influxdb_conf_file }}"
      become: yes
      notify:
        - Restart InfluxDB

    - meta: flush_handlers

    - name: Set up admin account
      influxdb_user:
        hostname: "{{ influxdb_vm_hostname }}"
        ssl: yes
        user_name: "{{ influxdb_user }}"
        user_password: "{{ influxdb_password }}"
        login_username: "{{ influxdb_user }}"
        login_password: "{{ influxdb_password }}"
        admin: yes
      ignore_errors: yes
      register: influx_admin_account

    - name: Admin password change
      influxdb_user:
        hostname: "{{ influxdb_vm_hostname }}"
        ssl: yes
        user_name: "{{ influxdb_user }}"
        user_password: "{{ influxdb_password }}"
        login_username: "{{ influxdb_old_user }}"
        login_password: "{{ influxdb_old_password }}"
        admin: yes
      when:
        - influx_admin_account.failed is defined
        - 'influx_admin_account.failed | bool'
        - '"authorization failed" in influx_admin_account.msg'

    - name: Set up databases
      influxdb_database:
        hostname: "{{ influxdb_vm_hostname }}"
        ssl: yes
        database_name: "{{ item }}"
        state: present
        username: "{{ influxdb_user }}"
        password: "{{ influxdb_password }}"
      loop:
        - jenkins

    - name: Set up Kapacitor config
      template:
        src: internal/kapacitor.conf.j2
        dest: "{{ kapacitor_conf_file }}"
      become: yes

    - name: Ensure Kapacitor is running
      systemd:
        name: kapacitor
        enabled: yes
        state: started
      become: yes

    - name: Copy kapacitor tasks
      copy:
        src: "files/kapacitor/tasks/{{ taskfile }}"
        dest: "{{ kapacitor_load_dir }}/tasks/"
      loop:
        - cloudflare-dns-entries.tick
        - cpu-usage.tick
        - disk-usage.tick
        - etcd-db.tick
        - memory-usage.tick
      loop_control:
        loop_var: taskfile
      notify:
        - Reload Kapacitor

    - name: Set up Chronograf environment
      template:
        src: "internal/chronograf/environment.j2"
        dest: /etc/default/chronograf
      become: yes
      notify:
        - Restart Chronograf

    - name: Install Chronograf sources
      template:
        src: "internal/chronograf/{{ chronograf_conf }}.j2"
        dest: "{{ chronograf_canned_path }}/{{ chronograf_conf }}"
        owner: chronograf
        group: chronograf
        mode: 0400
      become: yes
      loop:
        - influxdb.src
        - kapacitor.kap
      loop_control:
        loop_var: chronograf_conf
      notify:
        - Restart Chronograf

    - meta: end_play

  handlers:
    - name: Restart InfluxDB
      systemd:
        name: influxdb
        enabled: yes
        state: restarted
        daemon_reload: yes
      become: yes

    - name: Restart Chronograf
      systemd:
        name: chronograf
        enabled: yes
        state: restarted
        daemon_reload: yes
      become: yes

    - name: Reload Kapacitor
      command: pkill -HUP kapacitord
      become: yes

- hosts: vouch
  vars:
    vouch_image: "voucher/vouch-proxy:0.6.6"
    vouch_google_creds_path: "secret/ansible/{{ deploy_environ }}/accounts/vouch_google"
    vouch_conf_file: "/etc/vouch/config.yml"
    vouch_data_dir: "/var/vouch"
  tasks:
    - import_role:
        name: telegraf
      tags:
        - monitoring
        - setup
    - import_role:
        name: docker
      tags: setup
    - import_role:
        name: web
      vars:
        nginx_config_template: "internal/vouch/nginx-config.j2"
        nginx_config_filename: "vouch"
        cert_domains: [ "{{ inventory_hostname }}" ]
      tags: setup

    - name: Make vouch directories
      file:
        path: "{{ dir }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      become: yes
      loop:
        - "{{ vouch_conf_file | dirname }}"
        - "{{ vouch_data_dir }}"
      loop_control:
        loop_var: dir

    - name: Look up credentials in vault
      set_fact:
        vault_lookup: "{{ lookup('vault', vouch_google_creds_path) }}"
    - set_fact:
        vouch_google_client_id: "{{ vault_lookup.vouch_google.data.client_id }}"
        vouch_google_client_secret: "{{ vault_lookup.vouch_google.data.client_secret }}"

    - name: Install vouch config
      template:
        src: "internal/vouch/config.yml.j2"
        dest: "{{ vouch_conf_file }}"
        owner: root
        group: root
        mode: 0400
      become: yes

    - name: Deploy vouch
      docker_container:
        name: vouch
        image: "{{ vouch_image }}"
        restart_policy: unless-stopped
        ports:
          - "127.0.0.1:9090:9090"
        volumes:
          - "{{ vouch_conf_file | dirname }}:/config"
          - "{{ vouch_data_dir }}:/data"

- hosts: elasticsearch
  vars:
    elasticsearch_version: 7.4.0 
    cert_sync_script: /usr/local/bin/es-cert-sync.sh
    es_conf_dir: /etc/es
    cert_sync_dir: certs
    es_certs_dir: /usr/share/elasticsearch/config/certificates/es
    kibana_conf: /etc/kibana.yml

  tasks:
    - import_role:
        name: telegraf
      tags:
        - monitoring
        - setup

    - import_role:
        name: docker
      tags: setup

    - set_fact:
        es_domain: "*.{{ cert_wildcard_domain }}"
      tags: setup

    - import_role:
        name: web
        tasks_from: certs
      vars:
        cert_domains: [ "{{ es_domain }}" ]
        post_renewal_hooks:
          - hook_name: es-cert-sync
            hook_content: |-
              #!/bin/bash
              exec {{ cert_sync_script }}
      tags: setup

    - name: Install pip
      apt:
        name: python3-pip
        state: present
      become: yes
      tags: setup

    - name: Install docker-compose python module
      pip:
        name: docker-compose
      become: yes
      tags: setup

    - name: Bump up virtual memory map counts
      sysctl:
        name: vm.max_map_count
        value: 262144
        sysctl_set: yes
      become: yes
      tags: setup

    - name: Compute vault path for creds
      set_fact:
        vault_es_path: "secret/ansible/internal/accounts/elasticsearch/{{ es_instance | default('main') }}:es"

    - name: Look up elasticsearch credentials in vault
      set_fact:
        vault_lookup: "{{ lookup('vault', vault_es_path) }}"

    - set_fact:
        es_url: "{{ vault_lookup.es.data.url }}"
        es_jaeger_user: "{{ vault_lookup.es.data.user }}"
        es_jaeger_pass: "{{ vault_lookup.es.data.pass }}"
        es_root_user: "{{ vault_lookup.es.data.root_user }}"
        es_root_pass: "{{ vault_lookup.es.data.root_pass }}"

    - name: Set up the config dir
      file:
        path: "{{ es_conf_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      become: yes
      tags: setup

    - name: Install the cert sync script
      template:
        src: internal/elasticsearch/es-cert-sync.sh.j2
        dest: "{{ cert_sync_script }}"
        owner: root
        group: root
        mode: 0755
      become: yes
      register: script

    - name: Run the cert sync script
      command: "{{ cert_sync_script }}"
      become: yes
      when: script.changed

    - name: Install the docker compose manifest
      template:
        src: internal/elasticsearch/docker-compose.yml.j2
        dest: "{{ es_conf_dir }}/docker-compose.yml"
      become: yes

    - name: Start the elasticsearch services
      docker_compose:
        project_name: es
        project_src: "{{ es_conf_dir }}"
      become: yes
      register: compose

    - name: Wait for cluster to come up
      uri:
        url: "https://{{ inventory_hostname }}:9200/_cat/health"
        user: "{{ es_root_user }}"
        password: "{{ es_root_pass }}"
        force_basic_auth: yes
        return_content: yes
      delegate_to: localhost
      check_mode: no
      register: result
      until: '"docker-cluster green" in result.content'
      retries: 20
      delay: 15

    - debug: var=result.content

    - name: Add the jaeger role
      uri:
        url: "https://{{ inventory_hostname }}:9200/_security/role/{{ es_jaeger_user }}"
        method: POST
        user: "{{ es_root_user }}"
        password: "{{ es_root_pass }}"
        force_basic_auth: yes
        body: "{{ lookup('template', 'internal/elasticsearch/jaeger-role.j2') }}"
        body_format: json
        status_code: 200
      delegate_to: localhost

    - name: Add the jaeger user
      uri:
        url: "https://{{ inventory_hostname }}:9200/_security/user/{{ es_jaeger_user }}"
        method: POST
        user: "{{ es_root_user }}"
        password: "{{ es_root_pass }}"
        force_basic_auth: yes
        body: "{{ lookup('template', 'internal/elasticsearch/jaeger-user.j2') }}"
        body_format: json
        status_code: 200
      delegate_to: localhost

- hosts: jaeger
  vars:
    vault_mex_ca_cert_path: "secret/certs/mex-ca"

  tasks:

    - import_role:
        name: telegraf
      tags:
        - monitoring
        - setup

    - import_role:
        name: docker
      tags: setup

    - name: Look up CA cert in vault
      set_fact:
        vault_lookup: "{{ lookup('vault', vault_mex_ca_cert_path) }}"
      tags: setup
    - set_fact:
        mex_ca_cert: "{{ vault_lookup.mex_ca.data.cert }}"
      tags: setup

    - name: Copy CA cert
      copy:
        dest: "{{ mex_ca_cert_path }}"
        content: "{{ mex_ca_cert }}"
      become: yes
      tags: setup

    - import_role:
        name: web
      vars:
        nginx_config_template: "internal/jaeger/nginx-config.j2"
        cert_domains: [ "{{ inventory_hostname }}" ]
      tags: setup

    - import_role:
        name: jaeger

- hosts: slack
  vars:
    slack_org_mgmt_image: "registry.mobiledgex.net:5000/mobiledgex/slack-org-mgmt:1.0"
    slack_org_mgmt_log: slack-org-mgmt.log
    support_users:
      - michal.skiba@mobiledgex.com
      - thomas.vits@mobiledgex.com
      - wonho.park@mobiledgex.com

  tasks:

    - import_role:
        name: telegraf
      tags:
        - monitoring
        - setup

    - import_role:
        name: docker
      tags: setup

    - import_role:
        name: load-vault-creds
        tasks_from: slack_org_mgmt

    - name: Install Slack org mgmt cronjob
      cron:
        name: Slack org mgmt
        minute: "*/10"
        job: 'docker run --rm
            -e SLACK_TOKEN="{{ slack_token }}"
            -e SLACK_LEGACY_TOKEN="{{ slack_legacy_token }}"
            -e MC_USER="{{ mc_user }}"
            -e MC_PASS="{{ mc_pass }}"
            -e LOG_WEBHOOK="{{ slack_webhook }}"
            "{{ slack_org_mgmt_image }}" --support {{ support_users|join(" ") }}
            >>~/{{ slack_org_mgmt_log }} 2>&1'
