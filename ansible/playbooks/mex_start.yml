# Copyright 2022 MobiledgeX, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: startup etcds
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: etcds

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up etcd process
    shell: "nohup etcd  --name {{ item.name }} --data-dir {{ item.datadir }} --listen-peer-urls {{ item.peeraddrs }} --listen-client-urls {{ item.clientaddrs }} --advertise-client-urls {{ item.clientaddrs }} --initial-advertise-peer-urls  {{ item.peeraddrs }} --initial-cluster {{ item.initialcluster }} -log-output stdout >> {{ remote_log_path }}/{{ item.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname 
    with_items:
       -  "{{ etcds }}"

- name: startup controllers
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: controllers

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: docker login to mex repo
    docker_login:
      registry: registry.mobiledgex.net:5000
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"

 
  - name: set tls option
    set_fact:
       tlsopt: "{% if controllers[0].tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{controllers[0].tls.servercert|basename}} {% endif %}"
 

  - name: start up controller container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.name }}"
       command: "controller --etcdUrls {{ item.etcdaddrs }} --apiAddr {{ item.apiaddr }} --notifyAddr {{ item.notifyaddr }} --httpAddr {{ item.httpaddr }} {{ tlsopt }}  -d etcd,api,notify"
       network_mode: host
       restart_policy: unless-stopped
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ controllers }}"

- name: startup dmes
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: dmes

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: docker login to mex repo
    docker_login:
      registry: registry.mobiledgex.net:5000
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"

  - name: set tls option
    set_fact:
       tlsopt: "{% if dmes[0].tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{dmes[0].tls.servercert|basename}} {% endif %}"

  - name: create remote log dir
    file:
       state: directory
       path: "{{ remote_log_path }}"

  - name: make dme env file
    copy: content="{{ item.envvars|to_nice_yaml|regex_replace(':\\s', '=') }}" dest="{{remote_log_path}}/{{item.name}}.env"
    when: item.dockerimage != "" and item.envvars|length >0
    with_items:
      - "{{dmes}}"

  - name: start up dme-server container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.name }}"
       env_file: "{{remote_log_path}}//{{item..name}}.env"
       command: "dme-server --apiAddr {{ item.apiaddr }} --httpAddr {{ item.httpaddr }} --notifyAddrs {{ item.notifyaddrs }} --locverurl \"{{ item.locverurl }}\" --toksrvurl \"{{ item.toksrvurl }}\" --carrier {{ item.carrier }} --vaultAddr {{ item.vaultaddr }} --cloudletKey '{{ item.cloudletkey }}' {{ tlsopt }} -d locapi,dmedb,dmereq"
       network_mode: host
       restart_policy: unless-stopped
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ dmes }}"

  - name: set creds from variables
    set_fact:
        envvar:  "{% if dmes[0].envvars['LOCAPI_USER'] is defined %} export LOCAPI_USER={{ dmes[0].envvars['LOCAPI_USER'] }} LOCAPI_PASSWD={{ dmes[0].envvars['LOCAPI_PASSWD']}}  {% else %} true {% endif %}" 


- name: startup crms
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: crm

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
 
  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: make crm env file
    copy: content="{{ item.envvars|to_nice_yaml|regex_replace(':\\s', '=') }}" dest="{{remote_log_path}}/{{item.name}}.env"
    when: item.dockerimage != "" 
    with_items:
      - "{{crms}}"

  - name: docker login to mex repo
    docker_login:
      registry: registry.mobiledgex.net:5000
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"


  - name: set tls option
    set_fact:
       tlsopt: "{% if crms[0].tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{crms[0].tls.servercert|basename}} {% endif %}"

  - name: create remote log dir
    file:
       state: directory
       path: "{{ remote_log_path }}"


  - name: start up crmserver container
    docker_container:
      pull: yes
      image: "{{ item.dockerimage }}"
      name: "{{ item.name }}"
      command: "crmserver --apiAddr {{ item.apiaddr }} --notifySrvAddr {{ item.notifysrvaddr }} --vaultAddr {{ item.vaultaddr }} --physicalName {{ item.physicalname }} --platform openstack --notifyAddrs {{ item.notifyaddrs }} --cloudletKey '{{ item.cloudletkey }}' {{ tlsopt }} --d api,notify,mexos"
      network_mode: host
      restart_policy: unless-stopped
      env_file: "{{remote_log_path}}/{{item.name}}.env"
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ crms }}"


- name: startup location api simulators
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: locapisims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up locsim container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.name }}"
       command: "loc-api-sim --port {{ item.port }} --file {{ locsim_remote_data_file }}  --geo {{ locsim_remote_data_dir }}/geocode.dat --country {{ item.country }}"
       network_mode: host
       volumes:
         - /var/tmp:/var/tmp
       restart_policy: unless-stopped
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ locapisims }}"

- name: startup token server simulators
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: toksrvsims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up toksim container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.name }}"
       command: "tok-srv-sim --port {{ item.port }} "
       network_mode: host
       restart_policy: unless-stopped
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ toksrvsims }}"

- name: startup vault
  gather_facts: no
  user: ubuntu
  become: yes
  hosts: vaults

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: docker login to developer repo
    docker_login:
      registry: "{{ item.dockerimage }}"
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
      - "{{ vaults }}"

  - name: make vault env file
    copy: content="{{ item.envvars|to_nice_yaml|regex_replace(':\\s', '=') }}" dest="{{remote_log_path}}/{{item.vault.name}}.env"
    when: item.dockerimage != "" and item.envvars|length >0
    with_items:
      - "{{vaults}}"

  - name: start up vault container 
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.vault.name }}"
       network_mode: host
       restart_policy: unless-stopped
       privileged: yes
       env_file: "{{remote_log_path}}//{{item.vault.name}}.env"
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ vaults }}"

    
