- stat: path="{{ gitlab_config_path }}"
  register: gitlab_config_st

- name: Create first-run flag file
  copy:
    content: ""
    dest: "{{ first_run_flag_file }}"
    force: no
  become: yes
  when: not gitlab_config_st.stat.exists

- name: Add gitlab apt repository
  apt_key:
    url: https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey
    state: present
  become: yes

- name: Add gitlab apt repository
  get_url:
    url: "https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/config_file.list?os=Ubuntu&dist={{ ubuntu_release }}&source=script"
    dest: /etc/apt/sources.list.d/gitlab_gitlab-ee.list
  become: yes

- name: Install gitlab
  apt:
    name:
      - curl
      - openssh-server
      - ca-certificates
      - "gitlab-ee={{ gitlab_version }}"
    state: present
    update_cache: yes
  become: yes

- name: Load sendgrid creds
  import_role:
    name: load-vault-creds
    tasks_from: sendgrid

- name: Install gitlab config
  template:
    src: templates/mexplat/gitlab.rb.j2
    dest: /etc/gitlab/gitlab.rb
    backup: yes
  become: yes
  register: gitlab_config

- name: Reconfigure gitlab
  command: gitlab-ctl reconfigure
  become: yes
  when: gitlab_config.changed or gitlab_force_reconfigure

- stat: path="{{ first_run_flag_file }}"
  register: first_run_flag_file_st

- name: Wait for root account password setup
  pause:
    prompt: |-
      
      Please open the following link in your browser and set a password
      for the gitlab "root" account:
      - https://{{ gitlab_vm_hostname }}

      Hit [Enter] after you are done (Ctrl-C to abort)
  when: first_run_flag_file_st.stat.exists

- name: Remove first-run flag file
  file:
    path: "{{ first_run_flag_file }}"
    state: absent
  become: yes

- name: Look up gitlab apikey in vault
  set_fact:
    vault_lookup: "{{ lookup('vault', gitlab_path) }}"
  vars:
    gitlab_path: "secret/registry/{{ gitlab_vm_hostname }}:token"

- set_fact:
    mc_gitlab_token: "{{ vault_lookup.token.data.apikey }}"

- name: Check if the token is valid
  uri:
    url: "https://{{ gitlab_vm_hostname }}/api/v4/projects?private_token={{ mc_gitlab_token }}"
  register: gitlab_api_call
  failed_when: False

- name: Set up rails runner script for access token creation
  template:
    src: token_creation.rb.j2
    dest: "{{ token_creation_script }}"
  when:
    - not ansible_check_mode
    - gitlab_api_call.status != 200

- name: Set up access token
  command: "gitlab-rails r {{ token_creation_script }}"
  become: yes
  when:
    - not ansible_check_mode
    - gitlab_api_call.status != 200

- name: Cleanup access token script
  file:
    path: "{{ token_creation_script }}"
    state: absent

- name: Check if the token is valid now
  uri:
    url: "https://{{ gitlab_vm_hostname }}/api/v4/projects?private_token={{ mc_gitlab_token }}"
  when:
    - not ansible_check_mode
    - gitlab_api_call.status != 200

- name: Set up the Slack notification listener
  docker_container:
    name: slack_notifications
    image: "{{ gitlab_slack_notify_image }}:{{ gitlab_slack_notify_image_version }}"
    restart_policy: unless-stopped
    command: bundle exec ruby app.rb
    ports:
      - "127.0.0.1:{{ gitlab_slack_notify_port }}:4567"
    env:
      RAILS_ENV: production
      RACK_ENV: production
      SLACK_WEBHOOK: "{{ gitlab_slack_notify_webhook }}"
