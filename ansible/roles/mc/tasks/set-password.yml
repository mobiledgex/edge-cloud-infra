- name: Handle MC password change
  block:
    - debug: var=mc_api_url_base
    - name: Check if current MC vault password is valid
      uri:
        url: "{{ mc_api_url_base }}/v1/login"
        method: POST
        body:
          username: "{{ mc_superuser }}"
          password: "{{ mc_superuser_password }}"
        body_format: json
      register: mc_login
      ignore_errors: true
    - debug:
        msg: "MC is not running"
      when: mc_login.status == 502
    - fail:
        msg: "MC login failed"
      when:
        - mc_login.status != 502
        - mc_login.failed
  rescue:
    - name: Retrieve old MC password
      set_fact:
        vault_lookup: "{{ lookup('vault', old_version) }}"
      vars:
        old_version: "{{ mc_creds_vault_path }}@{{ mc_creds_version|int - 1 }}"

    - set_fact:
        mc_superuser_old: "{{ vault_lookup.mc.data.superuser }}"
        mc_superuser_old_password: "{{ vault_lookup.mc.data.superpass }}"

    - name: Ensure that the MC superuser name is still the same
      assert:
        that:
          - mc_superuser == mc_superuser_old

    - name: Log in with old MC password
      uri:
        url: "{{ mc_api_url_base }}/v1/login"
        method: POST
        body:
          username: "{{ mc_superuser }}"
          password: "{{ mc_superuser_old_password }}"
        body_format: json
        return_content: yes
      register: login

    - set_fact:
        mc_token: "{{ login.json.token }}"

    - name: Change MC password
      uri:
        url: "{{ mc_api_url_base }}/v1/auth/user/newpass"
        method: POST
        headers:
          Authorization: "Bearer {{ mc_token }}"
        body:
          password: "{{ mc_superuser_password }}"
        body_format: json

  when: mc_creds_version|int > 1
  delegate_to: localhost
  vars:
    mc_api_url_base: "https://{{mc_vm_hostname}}:{{mc_api_port}}/api"
