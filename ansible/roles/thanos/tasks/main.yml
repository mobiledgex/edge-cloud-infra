- set_fact:
    thanos_dns: "{{ region | lower }}.thanos"
  when: ( deploy_environ == 'main' ) or ( deploy_environ == 'prod' )

- set_fact:
    thanos_dns: "{{ region | lower }}-{{ deploy_environ }}.thanos"
  when:
    - deploy_environ != 'main'
    - deploy_environ != 'prod'

- name: Compute thanos query FQDN
  set_fact:
    thanos_fqdn: "{{ thanos_dns }}.{{ cloudflare_zone }}"

- name: Compute thanos receiver FQDN
  set_fact:
    thanos_recv_fqdn: "{{ thanos_dns }}-recv.{{ cloudflare_zone }}"

- name: Set thanos recv k8s dns entry
  set_fact:
    thanos_recv_service_addr: "{{ thanos_recv_svc_name }}.default.svc.cluster.local"

- name: Deploy thanos
  k8s:
    kubeconfig: "{{ kubeconfig_file.path }}"
    namespace: default
    state: present
    definition: "{{ lookup('template', 'deploy.yml.j2') }}"

- name: Deploy thanos services
  k8s:
    kubeconfig: "{{ kubeconfig_file.path }}"
    namespace: default
    state: present
    definition: "{{ lookup('template', 'svc.yml.j2') }}"

- name: Load cloudflare creds
  import_role:
    name: load-vault-creds
    tasks_from: cloudflare

- name: Update thanos DNS
  cloudflare_dns:
    zone: "{{ cloudflare_zone }}"
    record: "{{ thanos_fqdn }}"
    value: "{{ ingress_ip }}"
    type: A
    state: present
    solo: true
    account_email: "{{ cloudflare_account_email }}"
    account_api_token: "{{ cloudflare_account_api_token }}"

# Add thanos query cert - TODO: probably need something like this for mTLS
# - name: Generate Thanos cert manifest
#   template:
#     src: mexplat/tls-cert.yaml.j2
#     dest: "{{ tls_cert_manifest }}"
#   vars:
#     name: "{{ cert_name }}"
#     secret_name: "{{ cert_secret_name }}"
#     fqdn: "{{ thanos_fqdn }}"
#   check_mode: no

# - name: "Generate Thanos cert for domain: {{ thanos_dns }}"
#   k8s:
#     kubeconfig: "{{ kubeconfig_file.path }}"
#     namespace: default
#     src: "{{ tls_cert_manifest }}"
#     state: present

# - name: Wait for cert to be issued
#   command: "kubectl --kubeconfig {{ kubeconfig_file.path }} describe cert {{ cert_name }}"
#   register: describe_cert_command
#   retries: 60
#   delay: 5
#   until: "'Certificate is up to date and has not expired' in describe_cert_command.stdout"
#   changed_when: false
#   check_mode: no

- name: Look up console IP to whitelist
  set_fact:
    console_ip: "{{ lookup('dig', console_vm_hostname) }}"

- name: Set up ingress
  k8s:
    kubeconfig: "{{ kubeconfig_file.path }}"
    namespace: default
    state: present
    definition: "{{ lookup('template', 'ingress.yml.j2') }}"
