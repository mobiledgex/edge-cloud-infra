{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This documentation describes all the MC APIs available",
    "title": "Master Controller (MC) API Documentation",
    "version": "0.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/auth/user/delete": {
      "post": {
        "description": "Delete a user",
        "tags": [
          "User"
        ],
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/user/show": {
      "post": {
        "description": "Show all users",
        "tags": [
          "User"
        ],
        "operationId": "ShowUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/AddAutoProvPolicyCloudlet": {
      "post": {
        "description": "Add a Cloudlet to the Auto Provisioning Policy",
        "tags": [
          "AutoProvPolicyCloudlet"
        ],
        "operationId": "AddAutoProvPolicyCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicyCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/AddCloudletResMapping": {
      "post": {
        "description": "Add Optional Resource tag table",
        "tags": [
          "CloudletResMap"
        ],
        "operationId": "AddCloudletResMapping",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletResMap"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/AddFlavorRes": {
      "post": {
        "description": "Add Optional Resource",
        "tags": [
          "Flavor"
        ],
        "operationId": "AddFlavorRes",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/AddResTag": {
      "post": {
        "description": "add new tag(s) to TagTable",
        "tags": [
          "ResTagTable"
        ],
        "operationId": "AddResTag",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateApp": {
      "post": {
        "description": "Create an application",
        "tags": [
          "App"
        ],
        "operationId": "CreateApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionApp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateAppInst": {
      "post": {
        "description": "Create an application instance",
        "tags": [
          "App-Instance"
        ],
        "operationId": "CreateAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAppInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateAutoProvPolicy": {
      "post": {
        "description": "Create an Auto Provisioning Policy",
        "tags": [
          "AutoProvPolicy"
        ],
        "operationId": "CreateAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateAutoScalePolicy": {
      "post": {
        "description": "Create an Auto Scale Policy",
        "tags": [
          "AutoScalePolicy"
        ],
        "operationId": "CreateAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoScalePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateCloudlet": {
      "post": {
        "description": "Create a Cloudlet",
        "tags": [
          "Cloudlet"
        ],
        "operationId": "CreateCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateCloudletPool": {
      "post": {
        "description": "Create a CloudletPool",
        "tags": [
          "CloudletPool"
        ],
        "operationId": "CreateCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPool"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateCloudletPoolMember": {
      "post": {
        "description": "Add a Cloudlet to a CloudletPool",
        "tags": [
          "CloudletPoolMember"
        ],
        "operationId": "CreateCloudletPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPoolMember"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateClusterInst": {
      "post": {
        "description": "Create a Cluster instance",
        "tags": [
          "Cluster-Instance"
        ],
        "operationId": "CreateClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionClusterInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateFlavor": {
      "post": {
        "description": "Create a Flavor",
        "tags": [
          "Flavor"
        ],
        "operationId": "CreateFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateOperatorCode": {
      "post": {
        "description": "Create a code for an Operator",
        "tags": [
          "OperatorCode"
        ],
        "operationId": "CreateOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionOperatorCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreatePrivacyPolicy": {
      "post": {
        "description": "Create a Privacy Policy",
        "tags": [
          "PrivacyPolicy"
        ],
        "operationId": "CreatePrivacyPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionPrivacyPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/CreateResTagTable": {
      "post": {
        "description": "Create TagTable",
        "tags": [
          "ResTagTable"
        ],
        "operationId": "CreateResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteApp": {
      "post": {
        "description": "Delete an application",
        "tags": [
          "App"
        ],
        "operationId": "DeleteApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionApp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteAppInst": {
      "post": {
        "description": "Delete an application instance",
        "tags": [
          "App-Instance"
        ],
        "operationId": "DeleteAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAppInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteAutoProvPolicy": {
      "post": {
        "description": "Delete an Auto Provisioning Policy",
        "tags": [
          "AutoProvPolicy"
        ],
        "operationId": "DeleteAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteAutoScalePolicy": {
      "post": {
        "description": "Delete an Auto Scale Policy",
        "tags": [
          "AutoScalePolicy"
        ],
        "operationId": "DeleteAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoScalePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteCloudlet": {
      "post": {
        "description": "Delete a Cloudlet",
        "tags": [
          "Cloudlet"
        ],
        "operationId": "DeleteCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteCloudletPool": {
      "post": {
        "description": "Delete a CloudletPool",
        "tags": [
          "CloudletPool"
        ],
        "operationId": "DeleteCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPool"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteCloudletPoolMember": {
      "post": {
        "description": "Remove a Cloudlet from a CloudletPool",
        "tags": [
          "CloudletPoolMember"
        ],
        "operationId": "DeleteCloudletPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPoolMember"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteClusterInst": {
      "post": {
        "description": "Delete a Cluster instance",
        "tags": [
          "Cluster-Instance"
        ],
        "operationId": "DeleteClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionClusterInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteFlavor": {
      "post": {
        "description": "Delete a Flavor",
        "tags": [
          "Flavor"
        ],
        "operationId": "DeleteFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteOperatorCode": {
      "post": {
        "description": "Delete a code for an Operator",
        "tags": [
          "OperatorCode"
        ],
        "operationId": "DeleteOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionOperatorCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeletePrivacyPolicy": {
      "post": {
        "description": "Delete a Privacy policy",
        "tags": [
          "PrivacyPolicy"
        ],
        "operationId": "DeletePrivacyPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionPrivacyPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/DeleteResTagTable": {
      "post": {
        "description": "Delete TagTable",
        "tags": [
          "ResTagTable"
        ],
        "operationId": "DeleteResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/FindFlavorMatch": {
      "post": {
        "description": "Discover if flavor produces a matching platform flavor",
        "tags": [
          "FlavorMatch"
        ],
        "operationId": "FindFlavorMatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavorMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/GetResTagTable": {
      "post": {
        "description": "Fetch a copy of the TagTable",
        "tags": [
          "ResTagTableKey"
        ],
        "operationId": "GetResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTableKey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RefreshAppInst": {
      "post": {
        "description": "Refresh restarts an application instance with new App settings or image",
        "tags": [
          "App-Instance"
        ],
        "operationId": "RefreshAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAppInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RemoveAutoProvPolicyCloudlet": {
      "post": {
        "description": "Remove a Cloudlet from the Auto Provisioning Policy",
        "tags": [
          "AutoProvPolicyCloudlet"
        ],
        "operationId": "RemoveAutoProvPolicyCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicyCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RemoveCloudletResMapping": {
      "post": {
        "description": "Add Optional Resource tag table",
        "tags": [
          "CloudletResMap"
        ],
        "operationId": "RemoveCloudletResMapping",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletResMap"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RemoveFlavorRes": {
      "post": {
        "description": "Remove Optional Resource",
        "tags": [
          "Flavor"
        ],
        "operationId": "RemoveFlavorRes",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RemoveResTag": {
      "post": {
        "description": "remove existing tag(s) from TagTable",
        "tags": [
          "ResTagTable"
        ],
        "operationId": "RemoveResTag",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ResetSettings": {
      "post": {
        "description": "Reset all settings to their defaults",
        "tags": [
          "Settings"
        ],
        "operationId": "ResetSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/RunCommand": {
      "post": {
        "description": "Run a Command or Shell on a container or VM",
        "tags": [
          "ExecRequest"
        ],
        "operationId": "RunCommand",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionExecRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowAlert": {
      "post": {
        "description": "Show alerts",
        "tags": [
          "Alert"
        ],
        "operationId": "ShowAlert",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAlert"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowApp": {
      "post": {
        "description": "Show applications. Any fields specified will be used to filter results",
        "tags": [
          "App"
        ],
        "operationId": "ShowApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionApp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowAppInst": {
      "post": {
        "description": "Show application instances. Any fields specified will be used to filter results",
        "tags": [
          "App-Instance"
        ],
        "operationId": "ShowAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAppInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowAutoProvPolicy": {
      "post": {
        "description": "Show Auto Provisioning Policies. Any fields specified will be used to filter results",
        "tags": [
          "AutoProvPolicy"
        ],
        "operationId": "ShowAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowAutoScalePolicy": {
      "post": {
        "description": "Show Auto Scale Policies. Any fields specified will be used to filter results",
        "tags": [
          "AutoScalePolicy"
        ],
        "operationId": "ShowAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoScalePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudlet": {
      "post": {
        "description": "Show Cloudlets",
        "tags": [
          "Cloudlet"
        ],
        "operationId": "ShowCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudletInfo": {
      "post": {
        "description": "Show CloudletInfos",
        "tags": [
          "CloudletInfo"
        ],
        "operationId": "ShowCloudletInfo",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudletPool": {
      "post": {
        "description": "Show CloudletPools",
        "tags": [
          "CloudletPool"
        ],
        "operationId": "ShowCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPool"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudletPoolMember": {
      "post": {
        "description": "Show the Cloudlet to CloudletPool relationships",
        "tags": [
          "CloudletPoolMember"
        ],
        "operationId": "ShowCloudletPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPoolMember"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudletRefs": {
      "post": {
        "description": "Show CloudletRefs (debug only)",
        "tags": [
          "CloudletRefs"
        ],
        "operationId": "ShowCloudletRefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletRefs"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowCloudletsForPool": {
      "post": {
        "description": "Show Cloudlets that belong to the Pool",
        "tags": [
          "CloudletPoolKey"
        ],
        "operationId": "ShowCloudletsForPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletPoolKey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowClusterInst": {
      "post": {
        "description": "Show Cluster instances",
        "tags": [
          "Cluster-Instance"
        ],
        "operationId": "ShowClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionClusterInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowClusterRefs": {
      "post": {
        "description": "Show ClusterRefs (debug only)",
        "tags": [
          "ClusterRefs"
        ],
        "operationId": "ShowClusterRefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionClusterRefs"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowFlavor": {
      "post": {
        "description": "Show Flavors",
        "tags": [
          "Flavor"
        ],
        "operationId": "ShowFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowNode": {
      "post": {
        "description": "Show all Nodes connected to all Controllers",
        "tags": [
          "Node"
        ],
        "operationId": "ShowNode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionNode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowOperatorCode": {
      "post": {
        "description": "Show OperatorCodes",
        "tags": [
          "OperatorCode"
        ],
        "operationId": "ShowOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionOperatorCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowPoolsForCloudlet": {
      "post": {
        "description": "Show CloudletPools that have Cloudlet as a member",
        "tags": [
          "CloudletKey"
        ],
        "operationId": "ShowPoolsForCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudletKey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowPrivacyPolicy": {
      "post": {
        "description": "Show Privacy Policies. Any fields specified will be used to filter results",
        "tags": [
          "PrivacyPolicy"
        ],
        "operationId": "ShowPrivacyPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionPrivacyPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowResTagTable": {
      "post": {
        "description": "show TagTable",
        "tags": [
          "ResTagTable"
        ],
        "operationId": "ShowResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/ShowSettings": {
      "post": {
        "description": "Show settings",
        "tags": [
          "Settings"
        ],
        "operationId": "ShowSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateApp": {
      "post": {
        "description": "Update an application",
        "tags": [
          "App"
        ],
        "operationId": "UpdateApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionApp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateAppInst": {
      "post": {
        "description": "Update an AppInst and then refresh it",
        "tags": [
          "App-Instance"
        ],
        "operationId": "UpdateAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAppInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateAutoProvPolicy": {
      "post": {
        "description": "Update an Auto Provisioning Policy",
        "tags": [
          "AutoProvPolicy"
        ],
        "operationId": "UpdateAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoProvPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateAutoScalePolicy": {
      "post": {
        "description": "Update an Auto Scale Policy",
        "tags": [
          "AutoScalePolicy"
        ],
        "operationId": "UpdateAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionAutoScalePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateCloudlet": {
      "post": {
        "description": "Update a Cloudlet",
        "tags": [
          "Cloudlet"
        ],
        "operationId": "UpdateCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionCloudlet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateClusterInst": {
      "post": {
        "description": "Update a Cluster instance",
        "tags": [
          "Cluster-Instance"
        ],
        "operationId": "UpdateClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionClusterInst"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateFlavor": {
      "post": {
        "description": "Update a Flavor",
        "tags": [
          "Flavor"
        ],
        "operationId": "UpdateFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionFlavor"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdatePrivacyPolicy": {
      "post": {
        "description": "Update a Privacy policy",
        "tags": [
          "PrivacyPolicy"
        ],
        "operationId": "UpdatePrivacyPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionPrivacyPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateResTagTable": {
      "post": {
        "tags": [
          "ResTagTable"
        ],
        "operationId": "UpdateResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionResTagTable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/ctrl/UpdateSettings": {
      "post": {
        "description": "Update settings",
        "tags": [
          "Settings"
        ],
        "operationId": "UpdateSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Login to MC",
        "tags": [
          "Setup"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/usercreate": {
      "post": {
        "description": "Create new user",
        "tags": [
          "User"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    }
  },
  "definitions": {
    "Alert": {
      "type": "object",
      "properties": {
        "active_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "annotations": {
          "description": "Annotations are extra information about the alert",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "controller": {
          "description": "Connected controller unique id",
          "type": "string",
          "x-go-name": "Controller"
        },
        "labels": {
          "description": "Labels uniquely define the alert",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "notify_id": {
          "description": "Id of client assigned by server (internal use only)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotifyId"
        },
        "state": {
          "description": "State of the alert",
          "type": "string",
          "x-go-name": "State"
        },
        "value": {
          "description": "Any value associated with alert",
          "type": "number",
          "format": "double",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "App": {
      "type": "object",
      "title": "App belongs to developers and is used to provide information about their application.",
      "properties": {
        "access_ports": {
          "description": "Comma separated list of protocol:port pairs that the App listens on.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002,http:443",
          "type": "string",
          "x-go-name": "AccessPorts"
        },
        "android_package_name": {
          "description": "Android package name used to match the App name from the Android package",
          "type": "string",
          "x-go-name": "AndroidPackageName"
        },
        "annotations": {
          "description": "Annotations is a comma separated map of arbitrary key value pairs,",
          "type": "string",
          "x-go-name": "Annotations",
          "example": "key1=val1,key2=val2,key3=\"val 3\""
        },
        "auth_public_key": {
          "description": "public key used for authentication",
          "type": "string",
          "x-go-name": "AuthPublicKey"
        },
        "auto_prov_policy": {
          "description": "Auto provisioning policy name",
          "type": "string",
          "x-go-name": "AutoProvPolicy"
        },
        "command": {
          "description": "Command that the container runs to start service",
          "type": "string",
          "x-go-name": "Command"
        },
        "configs": {
          "description": "Customization files passed through to implementing services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigFile"
          },
          "x-go-name": "Configs"
        },
        "default_flavor": {
          "$ref": "#/definitions/FlavorKey"
        },
        "default_shared_volume_size": {
          "description": "shared volume size when creating auto cluster",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DefaultSharedVolumeSize"
        },
        "del_opt": {
          "$ref": "#/definitions/DeleteType"
        },
        "deployment": {
          "description": "Deployment type (kubernetes, docker, or vm)",
          "type": "string",
          "x-go-name": "Deployment"
        },
        "deployment_generator": {
          "description": "Deployment generator target to generate a basic deployment manifest",
          "type": "string",
          "x-go-name": "DeploymentGenerator"
        },
        "deployment_manifest": {
          "description": "Deployment manifest is the deployment specific manifest file/config\nFor docker deployment, this can be a docker-compose or docker run file\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file",
          "type": "string",
          "x-go-name": "DeploymentManifest"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "image_path": {
          "description": "URI of where image resides",
          "type": "string",
          "x-go-name": "ImagePath"
        },
        "image_type": {
          "$ref": "#/definitions/ImageType"
        },
        "internal_ports": {
          "description": "Should this app have access to outside world?",
          "type": "boolean",
          "x-go-name": "InternalPorts"
        },
        "key": {
          "$ref": "#/definitions/AppKey"
        },
        "md5sum": {
          "description": "MD5Sum of the VM-based app image",
          "type": "string",
          "x-go-name": "Md5Sum"
        },
        "official_fqdn": {
          "description": "Official FQDN is the FQDN that the app uses to connect by default",
          "type": "string",
          "x-go-name": "OfficialFqdn"
        },
        "revision": {
          "description": "Revision increments each time the App is updated",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Revision"
        },
        "scale_with_cluster": {
          "description": "Option to run App on all nodes of the cluster",
          "type": "boolean",
          "x-go-name": "ScaleWithCluster"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AppInst": {
      "description": "Many of the fields here are inherited from the App definition.",
      "type": "object",
      "title": "AppInst is an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key.",
      "properties": {
        "auto_cluster_ip_access": {
          "$ref": "#/definitions/IpAccess"
        },
        "cloudlet_loc": {
          "$ref": "#/definitions/Loc"
        },
        "configs": {
          "description": "Customization files passed through to implementing services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigFile"
          },
          "x-go-name": "Configs"
        },
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "crm_override": {
          "$ref": "#/definitions/CRMOverride"
        },
        "errors": {
          "description": "Any errors trying to create, update, or delete the AppInst on the Cloudlet",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "flavor": {
          "$ref": "#/definitions/FlavorKey"
        },
        "force_update": {
          "description": "Force Appinst refresh even if revision number matches App revision number.",
          "type": "boolean",
          "x-go-name": "ForceUpdate"
        },
        "health_check": {
          "$ref": "#/definitions/HealthCheck"
        },
        "key": {
          "$ref": "#/definitions/AppInstKey"
        },
        "liveness": {
          "$ref": "#/definitions/Liveness"
        },
        "mapped_ports": {
          "description": "For instances accessible via a shared load balancer, defines the external\nports on the shared load balancer that map to the internal ports\nExternal ports should be appended to the Uri for L4 access.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppPort"
          },
          "x-go-name": "MappedPorts"
        },
        "revision": {
          "description": "Revision increments each time the App is updated.  Updating the App Instance will sync the revision with that of the App",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Revision"
        },
        "runtime_info": {
          "$ref": "#/definitions/AppInstRuntime"
        },
        "shared_volume_size": {
          "description": "shared volume size when creating auto cluster",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SharedVolumeSize"
        },
        "state": {
          "$ref": "#/definitions/TrackedState"
        },
        "status": {
          "$ref": "#/definitions/StatusInfo"
        },
        "update_multiple": {
          "description": "Allow multiple instances to be updated at once",
          "type": "boolean",
          "x-go-name": "UpdateMultiple"
        },
        "uri": {
          "description": "Base FQDN (not really URI) for the App. See Service FQDN for endpoint access.",
          "type": "string",
          "x-go-name": "Uri"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AppInstKey": {
      "type": "object",
      "title": "AppInstKey uniquely identifies an Application Instance (AppInst) or Application Instance state (AppInstInfo).",
      "properties": {
        "app_key": {
          "$ref": "#/definitions/AppKey"
        },
        "cluster_inst_key": {
          "$ref": "#/definitions/ClusterInstKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AppInstRuntime": {
      "type": "object",
      "properties": {
        "container_ids": {
          "description": "List of container names",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ContainerIds"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AppKey": {
      "description": "AppKey uniquely identifies an App",
      "type": "object",
      "properties": {
        "developer_key": {
          "$ref": "#/definitions/DeveloperKey"
        },
        "name": {
          "description": "App name",
          "type": "string",
          "x-go-name": "Name"
        },
        "version": {
          "description": "App version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AppPort": {
      "type": "object",
      "title": "AppPort describes an L4 or L7 public access port/path mapping. This is used to track external to internal mappings for access via a shared load balancer or reverse proxy.",
      "properties": {
        "end_port": {
          "description": "A non-zero end port indicates a port range from internal port to end port, inclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "EndPort"
        },
        "fqdn_prefix": {
          "description": "FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.",
          "type": "string",
          "x-go-name": "FqdnPrefix"
        },
        "internal_port": {
          "description": "Container port",
          "type": "integer",
          "format": "int32",
          "x-go-name": "InternalPort"
        },
        "path_prefix": {
          "description": "Public facing path for HTTP L7 access.",
          "type": "string",
          "x-go-name": "PathPrefix"
        },
        "proto": {
          "$ref": "#/definitions/LProto"
        },
        "public_port": {
          "description": "Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)",
          "type": "integer",
          "format": "int32",
          "x-go-name": "PublicPort"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "AuthenticateOKBody": {
      "description": "AuthenticateOKBody authenticate o k body",
      "type": "object",
      "required": [
        "IdentityToken",
        "Status"
      ],
      "properties": {
        "IdentityToken": {
          "description": "An opaque token used to authenticate a user after a successful login",
          "type": "string"
        },
        "Status": {
          "description": "The status of the authentication",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/registry"
    },
    "AutoProvCloudlet": {
      "description": "AutoProvCloudlet stores the potential cloudlet and location for DME lookup",
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "loc": {
          "$ref": "#/definitions/Loc"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AutoProvPolicy": {
      "description": "AutoProvPolicy defines the automated provisioning policy",
      "type": "object",
      "properties": {
        "cloudlets": {
          "description": "Allowed deployment locations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoProvCloudlet"
          },
          "x-go-name": "Cloudlets"
        },
        "deploy_client_count": {
          "description": "Minimum number of clients within the auto deploy interval to trigger deployment",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DeployClientCount"
        },
        "deploy_interval_count": {
          "description": "Number of intervals to check before triggering deployment",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DeployIntervalCount"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/PolicyKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AutoProvPolicyCloudlet": {
      "description": "AutoProvPolicyCloudlet is used to add and remove Cloudlets from the Auto Provisioning Policy",
      "type": "object",
      "properties": {
        "cloudlet_key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "key": {
          "$ref": "#/definitions/PolicyKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "AutoScalePolicy": {
      "description": "AutoScalePolicy defines when and how ClusterInsts will have their\nnodes scaled up or down.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/PolicyKey"
        },
        "max_nodes": {
          "description": "Maximum number of cluster nodes",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxNodes"
        },
        "min_nodes": {
          "description": "Minimum number of cluster nodes",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MinNodes"
        },
        "scale_down_cpu_thresh": {
          "description": "Scale down cpu threshold (percentage 1 to 100)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ScaleDownCpuThresh"
        },
        "scale_up_cpu_thresh": {
          "description": "Scale up cpu threshold (percentage 1 to 100)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ScaleUpCpuThresh"
        },
        "trigger_time_sec": {
          "description": "Trigger time defines how long trigger threshold must be satified in seconds before acting upon it.",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TriggerTimeSec"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CRMOverride": {
      "description": "It should only be used by administrators when bugs have caused the\nController and CRM to get out of sync. It allows commands from the\nController to ignore errors from the CRM, or ignore the CRM completely\n(messages will not be sent to CRM).",
      "type": "integer",
      "format": "int32",
      "title": "CRMOverride can be applied to commands that issue requests to the CRM.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Cloudlet": {
      "type": "object",
      "title": "A Cloudlet is a set of compute resources at a particular location, provided by an Operator.",
      "properties": {
        "access_vars": {
          "description": "Variables required to access cloudlet",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "AccessVars"
        },
        "config": {
          "$ref": "#/definitions/PlatformConfig"
        },
        "crm_override": {
          "$ref": "#/definitions/CRMOverride"
        },
        "deployment_local": {
          "description": "Deploy cloudlet services locally",
          "type": "boolean",
          "x-go-name": "DeploymentLocal"
        },
        "env_var": {
          "description": "Single Key-Value pair of env var to be passed to CRM",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "EnvVar"
        },
        "errors": {
          "description": "Any errors trying to create, update, or delete the Cloudlet.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "flavor": {
          "$ref": "#/definitions/FlavorKey"
        },
        "ip_support": {
          "$ref": "#/definitions/IpSupport"
        },
        "key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "location": {
          "$ref": "#/definitions/Loc"
        },
        "notify_srv_addr": {
          "description": "Address for the CRM notify listener to run on",
          "type": "string",
          "x-go-name": "NotifySrvAddr"
        },
        "num_dynamic_ips": {
          "description": "Number of dynamic IPs available for dynamic IP support",
          "type": "integer",
          "format": "int32",
          "x-go-name": "NumDynamicIps"
        },
        "physical_name": {
          "description": "Physical infrastructure cloudlet name",
          "type": "string",
          "x-go-name": "PhysicalName"
        },
        "platform_type": {
          "$ref": "#/definitions/PlatformType"
        },
        "res_tag_map": {
          "description": "Optional resource to restagtbl key map key values = [gpu, nas, nic]",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ResTagTableKey"
          },
          "x-go-name": "ResTagMap"
        },
        "state": {
          "$ref": "#/definitions/TrackedState"
        },
        "static_ips": {
          "description": "List of static IPs for static IP support",
          "type": "string",
          "x-go-name": "StaticIps"
        },
        "status": {
          "$ref": "#/definitions/StatusInfo"
        },
        "time_limits": {
          "$ref": "#/definitions/OperationTimeLimits"
        },
        "version": {
          "description": "Cloudlet version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletInfo": {
      "type": "object",
      "title": "CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.",
      "properties": {
        "availability_zones": {
          "description": "Availability Zones if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OSAZone"
          },
          "x-go-name": "AvailabilityZones"
        },
        "controller": {
          "description": "Connected controller unique id",
          "type": "string",
          "x-go-name": "Controller"
        },
        "errors": {
          "description": "Any errors encountered while making changes to the Cloudlet",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "flavors": {
          "description": "Supported flavors by the Cloudlet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlavorInfo"
          },
          "x-go-name": "Flavors"
        },
        "key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "notify_id": {
          "description": "Id of client assigned by server (internal use only)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotifyId"
        },
        "os_images": {
          "description": "Local Images availble to cloudlet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OSImage"
          },
          "x-go-name": "OsImages"
        },
        "os_max_ram": {
          "description": "Maximum Ram in MB on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "OsMaxRam"
        },
        "os_max_vcores": {
          "description": "Maximum number of VCPU cores on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "OsMaxVcores"
        },
        "os_max_vol_gb": {
          "description": "Maximum amount of disk in GB on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "OsMaxVolGb"
        },
        "state": {
          "$ref": "#/definitions/CloudletState"
        },
        "status": {
          "$ref": "#/definitions/StatusInfo"
        },
        "version": {
          "description": "Cloudlet version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletKey": {
      "type": "object",
      "title": "CloudletKey uniquely identifies a Cloudlet.",
      "properties": {
        "name": {
          "description": "Name of the cloudlet",
          "type": "string",
          "x-go-name": "Name"
        },
        "operator_key": {
          "$ref": "#/definitions/OperatorKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletPool": {
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/CloudletPoolKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletPoolKey": {
      "type": "object",
      "properties": {
        "name": {
          "description": "CloudletPool Name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletPoolMember": {
      "type": "object",
      "properties": {
        "cloudlet_key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "pool_key": {
          "$ref": "#/definitions/CloudletPoolKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletRefs": {
      "type": "object",
      "title": "CloudletRefs track used resources and Clusters instantiated on a Cloudlet. Used resources are compared against max resources for a Cloudlet to determine if resources are available for a new Cluster to be instantiated on the Cloudlet.",
      "properties": {
        "clusters": {
          "description": "Clusters instantiated on the Cloudlet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterKey"
          },
          "x-go-name": "Clusters"
        },
        "key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "opt_res_used_map": {
          "description": "Used Optional Resources",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "uint32"
          },
          "x-go-name": "OptResUsedMap"
        },
        "root_lb_ports": {
          "description": "Used ports on root load balancer. Map key is public port, value is a bitmap for the protocol\nbitmap: bit 0: tcp, bit 1: udp",
          "x-go-name": "RootLbPorts"
        },
        "used_disk": {
          "description": "Used disk in GB",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedDisk"
        },
        "used_dynamic_ips": {
          "description": "Used dynamic IPs",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UsedDynamicIps"
        },
        "used_ram": {
          "description": "Used RAM in MB",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedRam"
        },
        "used_static_ips": {
          "description": "Used static IPs",
          "type": "string",
          "x-go-name": "UsedStaticIps"
        },
        "used_vcores": {
          "description": "Used VCPU cores",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedVcores"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletResMap": {
      "description": "optional resource input consists of a resource specifier and clouldkey name",
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "mapping": {
          "description": "Resource mapping info",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Mapping"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletState": {
      "type": "integer",
      "format": "int32",
      "title": "CloudletState is the state of the Cloudlet.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ClusterInst": {
      "description": "It is defined by a Cluster, Cloudlet, and Developer key.",
      "type": "object",
      "title": "ClusterInst is an instance of a Cluster on a Cloudlet.",
      "properties": {
        "allocated_ip": {
          "description": "Allocated IP for dedicated access",
          "type": "string",
          "x-go-name": "AllocatedIp"
        },
        "auto": {
          "description": "Auto is set to true when automatically created by back-end (internal use only)",
          "type": "boolean",
          "x-go-name": "Auto"
        },
        "auto_scale_policy": {
          "description": "Auto scale policy name",
          "type": "string",
          "x-go-name": "AutoScalePolicy"
        },
        "availability_zone": {
          "description": "Optional Resource AZ if any",
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "crm_override": {
          "$ref": "#/definitions/CRMOverride"
        },
        "deployment": {
          "description": "Deployment type (kubernetes or docker)",
          "type": "string",
          "x-go-name": "Deployment"
        },
        "errors": {
          "description": "Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "external_volume_size": {
          "description": "Size of external volume to be attached to nodes.  This is for the root partition",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExternalVolumeSize"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "flavor": {
          "$ref": "#/definitions/FlavorKey"
        },
        "image_name": {
          "description": "Optional resource specific image to launch",
          "type": "string",
          "x-go-name": "ImageName"
        },
        "ip_access": {
          "$ref": "#/definitions/IpAccess"
        },
        "key": {
          "$ref": "#/definitions/ClusterInstKey"
        },
        "liveness": {
          "$ref": "#/definitions/Liveness"
        },
        "node_flavor": {
          "description": "Cloudlet specific node flavor",
          "type": "string",
          "x-go-name": "NodeFlavor"
        },
        "num_masters": {
          "description": "Number of k8s masters (In case of docker deployment, this field is not required)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NumMasters"
        },
        "num_nodes": {
          "description": "Number of k8s nodes (In case of docker deployment, this field is not required)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NumNodes"
        },
        "privacy_policy": {
          "description": "Optional privacy policy name",
          "type": "string",
          "x-go-name": "PrivacyPolicy"
        },
        "reservable": {
          "description": "If ClusterInst is reservable",
          "type": "boolean",
          "x-go-name": "Reservable"
        },
        "reserved_by": {
          "description": "For reservable MobiledgeX ClusterInsts, the current developer tenant",
          "type": "string",
          "x-go-name": "ReservedBy"
        },
        "shared_volume_size": {
          "description": "Size of an optional shared volume to be mounted on the master",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SharedVolumeSize"
        },
        "state": {
          "$ref": "#/definitions/TrackedState"
        },
        "status": {
          "$ref": "#/definitions/StatusInfo"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ClusterInstKey": {
      "type": "object",
      "title": "ClusterInstKey uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).",
      "properties": {
        "cloudlet_key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "cluster_key": {
          "$ref": "#/definitions/ClusterKey"
        },
        "developer": {
          "description": "Name of Developer that this cluster belongs to",
          "type": "string",
          "x-go-name": "Developer"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ClusterKey": {
      "type": "object",
      "title": "ClusterKey uniquely identifies a Cluster.",
      "properties": {
        "name": {
          "description": "Cluster name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ClusterRefs": {
      "type": "object",
      "title": "ClusterRefs track used resources within a ClusterInst. Each AppInst specifies a set of required resources (Flavor), so tracking resources used by Apps within a Cluster is necessary to determine if enough resources are available for another AppInst to be instantiated on a ClusterInst.",
      "properties": {
        "apps": {
          "description": "Apps instances in the Cluster Instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppKey"
          },
          "x-go-name": "Apps"
        },
        "key": {
          "$ref": "#/definitions/ClusterInstKey"
        },
        "used_disk": {
          "description": "Used disk in GB",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedDisk"
        },
        "used_ram": {
          "description": "Used RAM in MB",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedRam"
        },
        "used_vcores": {
          "description": "Used VCPU cores",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UsedVcores"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ConfigFile": {
      "type": "object",
      "properties": {
        "config": {
          "description": "config file contents or URI reference",
          "type": "string",
          "x-go-name": "Config"
        },
        "kind": {
          "description": "kind (type) of config, i.e. k8s-manifest, helm-values, deploygen-config",
          "type": "string",
          "x-go-name": "Kind"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ContainerChangeResponseItem": {
      "description": "ContainerChangeResponseItem change item in response to ContainerChanges operation",
      "type": "object",
      "required": [
        "Kind",
        "Path"
      ],
      "properties": {
        "Kind": {
          "description": "Kind of change",
          "type": "integer",
          "format": "uint8"
        },
        "Path": {
          "description": "Path to file that has changed",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerCreateCreatedBody": {
      "description": "ContainerCreateCreatedBody OK response to ContainerCreate operation",
      "type": "object",
      "required": [
        "Id",
        "Warnings"
      ],
      "properties": {
        "Id": {
          "description": "The ID of the created container",
          "type": "string",
          "x-go-name": "ID"
        },
        "Warnings": {
          "description": "Warnings encountered when creating the container",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerTopOKBody": {
      "description": "ContainerTopOKBody OK response to ContainerTop operation",
      "type": "object",
      "required": [
        "Processes",
        "Titles"
      ],
      "properties": {
        "Processes": {
          "description": "Each process running in the container, where each is process is an array of values corresponding to the titles",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "Titles": {
          "description": "The ps column titles",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerUpdateOKBody": {
      "description": "ContainerUpdateOKBody OK response to ContainerUpdate operation",
      "type": "object",
      "required": [
        "Warnings"
      ],
      "properties": {
        "Warnings": {
          "description": "warnings",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerWaitOKBody": {
      "description": "ContainerWaitOKBody OK response to ContainerWait operation",
      "type": "object",
      "required": [
        "Error",
        "StatusCode"
      ],
      "properties": {
        "Error": {
          "$ref": "#/definitions/ContainerWaitOKBodyError"
        },
        "StatusCode": {
          "description": "Exit code of the container",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerWaitOKBodyError": {
      "description": "ContainerWaitOKBodyError container waiting error, if any",
      "type": "object",
      "properties": {
        "Message": {
          "description": "Details of an error",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "CreateUser": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Email": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "FamilyName": {
          "type": "string"
        },
        "GivenName": {
          "type": "string"
        },
        "Iter": {
          "type": "integer",
          "format": "int64"
        },
        "Locked": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Nickname": {
          "type": "string"
        },
        "Passhash": {
          "type": "string"
        },
        "Picture": {
          "type": "string"
        },
        "Salt": {
          "type": "string"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "verify": {
          "$ref": "#/definitions/EmailRequest"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "DeleteType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "DeveloperKey": {
      "description": "DeveloperKey uniquely identifies a Developer",
      "type": "object",
      "properties": {
        "name": {
          "description": "Organization or Company Name that a Developer is part of",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Duration": {
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "EmailRequest": {
      "description": "Email request is used for password reset and to resend welcome\nverification email. It contains the information need to send\nsome kind of email to the user.",
      "type": "object",
      "properties": {
        "browser": {
          "type": "string",
          "x-go-name": "Browser"
        },
        "callbackurl": {
          "type": "string",
          "x-go-name": "CallbackURL"
        },
        "clientip": {
          "type": "string",
          "x-go-name": "ClientIP"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "operatingsystem": {
          "type": "string",
          "x-go-name": "OperatingSystem"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "ExecRequest": {
      "type": "object",
      "properties": {
        "answer": {
          "description": "WebRTC Answer",
          "type": "string",
          "x-go-name": "Answer"
        },
        "app_inst_key": {
          "$ref": "#/definitions/AppInstKey"
        },
        "command": {
          "description": "Command or Shell",
          "type": "string",
          "x-go-name": "Command"
        },
        "console": {
          "description": "VM Console",
          "type": "boolean",
          "x-go-name": "Console"
        },
        "console_url": {
          "description": "VM Console URL",
          "type": "string",
          "x-go-name": "ConsoleUrl"
        },
        "container_id": {
          "description": "ContainerID is the name of the target container, if applicable",
          "type": "string",
          "x-go-name": "ContainerId"
        },
        "err": {
          "description": "Any error message",
          "type": "string",
          "x-go-name": "Err"
        },
        "offer": {
          "description": "WebRTC Offer",
          "type": "string",
          "x-go-name": "Offer"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Flavor": {
      "type": "object",
      "properties": {
        "disk": {
          "description": "Amount of disk space in gigabytes",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Disk"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/FlavorKey"
        },
        "opt_res_map": {
          "description": "Optional Resources request, key = [gpu, nas, nic] gpu kinds: [gpu, vgpu, pci]\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpus:nvidia-63:1",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "OptResMap"
        },
        "ram": {
          "description": "RAM in megabytes",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Ram"
        },
        "vcpus": {
          "description": "Number of virtual CPUs",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Vcpus"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "FlavorInfo": {
      "description": "Flavor details from the Cloudlet",
      "type": "object",
      "properties": {
        "disk": {
          "description": "Amount of disk in GB on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Disk"
        },
        "name": {
          "description": "Name of the flavor on the Cloudlet",
          "type": "string",
          "x-go-name": "Name"
        },
        "prop_map": {
          "description": "OS Flavor Properties, if any",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "PropMap"
        },
        "ram": {
          "description": "Ram in MB on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Ram"
        },
        "vcpus": {
          "description": "Number of VCPU cores on the Cloudlet",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Vcpus"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "FlavorKey": {
      "type": "object",
      "title": "FlavorKey uniquely identifies a Flavor.",
      "properties": {
        "name": {
          "description": "Flavor name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "FlavorMatch": {
      "type": "object",
      "properties": {
        "availability_zone": {
          "type": "string",
          "x-go-name": "AvailabilityZone"
        },
        "flavor_name": {
          "type": "string",
          "x-go-name": "FlavorName"
        },
        "key": {
          "$ref": "#/definitions/CloudletKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "HealthCheck": {
      "description": "Health check status gets set by external, or rootLB health check",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ImageType": {
      "description": "ImageType specifies image type of an App",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "IpAccess": {
      "description": "IpAccess indicates the type of RootLB that Developer requires for their App",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "IpSupport": {
      "type": "integer",
      "format": "int32",
      "title": "IpSupport indicates the type of public IP support provided by the Cloudlet. Static IP support indicates a set of static public IPs are available for use, and managed by the Controller. Dynamic indicates the Cloudlet uses a DHCP server to provide public IP addresses, and the controller has no control over which IPs are assigned.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "LProto": {
      "type": "integer",
      "format": "int32",
      "title": "LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "Liveness": {
      "type": "integer",
      "format": "int32",
      "title": "Liveness indicates if an object was created statically via an external API call, or dynamically via an internal algorithm.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Loc": {
      "description": "GPS Location",
      "type": "object",
      "properties": {
        "altitude": {
          "description": "On android only lat and long are guaranteed to be supplied\naltitude in meters",
          "type": "number",
          "format": "double",
          "x-go-name": "Altitude"
        },
        "course": {
          "description": "course (IOS) / bearing (Android) (degrees east relative to true north)",
          "type": "number",
          "format": "double",
          "x-go-name": "Course"
        },
        "horizontal_accuracy": {
          "description": "horizontal accuracy (radius in meters)",
          "type": "number",
          "format": "double",
          "x-go-name": "HorizontalAccuracy"
        },
        "latitude": {
          "description": "latitude in WGS 84 coordinates",
          "type": "number",
          "format": "double",
          "x-go-name": "Latitude"
        },
        "longitude": {
          "description": "longitude in WGS 84 coordinates",
          "type": "number",
          "format": "double",
          "x-go-name": "Longitude"
        },
        "speed": {
          "description": "speed (IOS) / velocity (Android) (meters/sec)",
          "type": "number",
          "format": "double",
          "x-go-name": "Speed"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "vertical_accuracy": {
          "description": "vertical accuracy (meters)",
          "type": "number",
          "format": "double",
          "x-go-name": "VerticalAccuracy"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "Node": {
      "type": "object",
      "title": "Node defines a DME (distributed matching engine) or CRM (cloudlet resource manager) instance.",
      "properties": {
        "build_author": {
          "description": "Build Author",
          "type": "string",
          "x-go-name": "BuildAuthor"
        },
        "build_head": {
          "description": "Build Head Version",
          "type": "string",
          "x-go-name": "BuildHead"
        },
        "build_master": {
          "description": "Build Master Version",
          "type": "string",
          "x-go-name": "BuildMaster"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "hostname": {
          "description": "Hostname",
          "type": "string",
          "x-go-name": "Hostname"
        },
        "image_version": {
          "description": "Docker edge-cloud base image version",
          "type": "string",
          "x-go-name": "ImageVersion"
        },
        "key": {
          "$ref": "#/definitions/NodeKey"
        },
        "notify_id": {
          "description": "Id of client assigned by server (internal use only)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotifyId"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "NodeKey": {
      "description": "NodeKey uniquely identifies a DME or CRM node",
      "type": "object",
      "properties": {
        "cloudlet_key": {
          "$ref": "#/definitions/CloudletKey"
        },
        "name": {
          "description": "Name or hostname of node",
          "type": "string",
          "x-go-name": "Name"
        },
        "node_type": {
          "$ref": "#/definitions/NodeType"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "NodeType": {
      "description": "NodeType defines the type of Node",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OSAZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OSImage": {
      "type": "object",
      "properties": {
        "disk_format": {
          "description": "format qcow2, img, etc",
          "type": "string",
          "x-go-name": "DiskFormat"
        },
        "name": {
          "description": "image name",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "image properties/metadata",
          "type": "string",
          "x-go-name": "Properties"
        },
        "tags": {
          "description": "optional tags present on image",
          "type": "string",
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OperationTimeLimits": {
      "description": "time limits for cloudlet create, update and delete operations",
      "type": "object",
      "properties": {
        "create_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "create_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "delete_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "delete_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "update_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "update_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OperatorCode": {
      "description": "OperatorCode maps a carrier code to an Operator name",
      "type": "object",
      "properties": {
        "code": {
          "description": "MCC plus MNC code, or custom carrier code designation.",
          "type": "string",
          "x-go-name": "Code"
        },
        "operator_name": {
          "description": "MobiledgeX operator name",
          "type": "string",
          "x-go-name": "OperatorName"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OperatorKey": {
      "description": "OperatorKey uniquely identifies an Operator",
      "type": "object",
      "properties": {
        "name": {
          "description": "Company or Organization name of the operator",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Organization": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Name": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "PublicImages": {
          "type": "boolean"
        },
        "Type": {
          "type": "string"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "OutboundSecurityRule": {
      "type": "object",
      "properties": {
        "port_range_max": {
          "description": "TCP or UDP port range end",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PortRangeMax"
        },
        "port_range_min": {
          "description": "TCP or UDP port range start",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PortRangeMin"
        },
        "protocol": {
          "description": "tcp, udp, icmp",
          "type": "string",
          "x-go-name": "Protocol"
        },
        "remote_cidr": {
          "description": "remote CIDR X.X.X.X/X",
          "type": "string",
          "x-go-name": "RemoteCidr"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PlatformConfig": {
      "type": "object",
      "properties": {
        "cleanup_mode": {
          "description": "Internal cleanup flag",
          "type": "boolean",
          "x-go-name": "CleanupMode"
        },
        "env_var": {
          "description": "Environment variables",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "EnvVar"
        },
        "image_path": {
          "description": "Path to platform base image",
          "type": "string",
          "x-go-name": "ImagePath"
        },
        "notify_ctrl_addrs": {
          "description": "Address of controller notify port (can be multiple of these)",
          "type": "string",
          "x-go-name": "NotifyCtrlAddrs"
        },
        "platform_tag": {
          "description": "Tag of edge-cloud image",
          "type": "string",
          "x-go-name": "PlatformTag"
        },
        "region": {
          "description": "Region",
          "type": "string",
          "x-go-name": "Region"
        },
        "registry_path": {
          "description": "Path to Docker registry holding edge-cloud image",
          "type": "string",
          "x-go-name": "RegistryPath"
        },
        "span": {
          "description": "Span string",
          "type": "string",
          "x-go-name": "Span"
        },
        "test_mode": {
          "description": "Internal Test flag",
          "type": "boolean",
          "x-go-name": "TestMode"
        },
        "tls_cert_file": {
          "description": "TLS cert file",
          "type": "string",
          "x-go-name": "TlsCertFile"
        },
        "vault_addr": {
          "description": "Vault address",
          "type": "string",
          "x-go-name": "VaultAddr"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PlatformType": {
      "description": "PlatformType is the supported list of cloudlet types",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PolicyKey": {
      "type": "object",
      "properties": {
        "developer": {
          "description": "Name of the Developer that this policy belongs to",
          "type": "string",
          "x-go-name": "Developer"
        },
        "name": {
          "description": "Policy name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PrivacyPolicy": {
      "description": "PrivacyPolicy defines security restrictions for cluster instances\nnodes scaled up or down.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/PolicyKey"
        },
        "outbound_security_rules": {
          "description": "list of outbound security rules for whitelisting traffic",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutboundSecurityRule"
          },
          "x-go-name": "OutboundSecurityRules"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "RegionAlert": {
      "type": "object",
      "properties": {
        "Alert": {
          "$ref": "#/definitions/Alert"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionApp": {
      "type": "object",
      "properties": {
        "App": {
          "$ref": "#/definitions/App"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionAppInst": {
      "type": "object",
      "properties": {
        "AppInst": {
          "$ref": "#/definitions/AppInst"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionAutoProvPolicy": {
      "type": "object",
      "properties": {
        "AutoProvPolicy": {
          "$ref": "#/definitions/AutoProvPolicy"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionAutoProvPolicyCloudlet": {
      "type": "object",
      "properties": {
        "AutoProvPolicyCloudlet": {
          "$ref": "#/definitions/AutoProvPolicyCloudlet"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionAutoScalePolicy": {
      "type": "object",
      "properties": {
        "AutoScalePolicy": {
          "$ref": "#/definitions/AutoScalePolicy"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudlet": {
      "type": "object",
      "properties": {
        "Cloudlet": {
          "$ref": "#/definitions/Cloudlet"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletInfo": {
      "type": "object",
      "properties": {
        "CloudletInfo": {
          "$ref": "#/definitions/CloudletInfo"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletKey": {
      "type": "object",
      "properties": {
        "CloudletKey": {
          "$ref": "#/definitions/CloudletKey"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletPool": {
      "type": "object",
      "properties": {
        "CloudletPool": {
          "$ref": "#/definitions/CloudletPool"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletPoolKey": {
      "type": "object",
      "properties": {
        "CloudletPoolKey": {
          "$ref": "#/definitions/CloudletPoolKey"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletPoolMember": {
      "type": "object",
      "properties": {
        "CloudletPoolMember": {
          "$ref": "#/definitions/CloudletPoolMember"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletRefs": {
      "type": "object",
      "properties": {
        "CloudletRefs": {
          "$ref": "#/definitions/CloudletRefs"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionCloudletResMap": {
      "type": "object",
      "properties": {
        "CloudletResMap": {
          "$ref": "#/definitions/CloudletResMap"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionClusterInst": {
      "type": "object",
      "properties": {
        "ClusterInst": {
          "$ref": "#/definitions/ClusterInst"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionClusterRefs": {
      "type": "object",
      "properties": {
        "ClusterRefs": {
          "$ref": "#/definitions/ClusterRefs"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionExecRequest": {
      "type": "object",
      "properties": {
        "ExecRequest": {
          "$ref": "#/definitions/ExecRequest"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionFlavor": {
      "type": "object",
      "properties": {
        "Flavor": {
          "$ref": "#/definitions/Flavor"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionFlavorMatch": {
      "type": "object",
      "properties": {
        "FlavorMatch": {
          "$ref": "#/definitions/FlavorMatch"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionNode": {
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/Node"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionOperatorCode": {
      "type": "object",
      "properties": {
        "OperatorCode": {
          "$ref": "#/definitions/OperatorCode"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionPrivacyPolicy": {
      "type": "object",
      "properties": {
        "PrivacyPolicy": {
          "$ref": "#/definitions/PrivacyPolicy"
        },
        "Region": {
          "description": "Region name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionResTagTable": {
      "type": "object",
      "properties": {
        "Region": {
          "description": "Region name",
          "type": "string"
        },
        "ResTagTable": {
          "$ref": "#/definitions/ResTagTable"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionResTagTableKey": {
      "type": "object",
      "properties": {
        "Region": {
          "description": "Region name",
          "type": "string"
        },
        "ResTagTableKey": {
          "$ref": "#/definitions/ResTagTableKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "RegionSettings": {
      "type": "object",
      "properties": {
        "Region": {
          "description": "Region name",
          "type": "string"
        },
        "Settings": {
          "$ref": "#/definitions/Settings"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "ResTagTable": {
      "type": "object",
      "properties": {
        "azone": {
          "description": "availability zone(s) of resource if required",
          "type": "string",
          "x-go-name": "Azone"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "key": {
          "$ref": "#/definitions/ResTagTableKey"
        },
        "tags": {
          "description": "one or more string tags",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ResTagTableKey": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource Table Name",
          "type": "string",
          "x-go-name": "Name"
        },
        "operator_key": {
          "$ref": "#/definitions/OperatorKey"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Result": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "Settings": {
      "description": "Global settings",
      "type": "object",
      "properties": {
        "auto_deploy_interval_sec": {
          "description": "Auto Provisioning Stats push and analysis interval (seconds)",
          "type": "number",
          "format": "double",
          "x-go-name": "AutoDeployIntervalSec"
        },
        "auto_deploy_max_intervals": {
          "description": "Auto Provisioning Policy max allowed intervals",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "AutoDeployMaxIntervals"
        },
        "auto_deploy_offset_sec": {
          "description": "Auto Provisioning analysis offset from interval (seconds)",
          "type": "number",
          "format": "double",
          "x-go-name": "AutoDeployOffsetSec"
        },
        "create_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "create_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "delete_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "delete_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "fields": {
          "description": "Fields are used for the Update API to specify which fields to apply",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Fields"
        },
        "shepherd_health_check_interval": {
          "$ref": "#/definitions/Duration"
        },
        "shepherd_health_check_retries": {
          "description": "Number of times Shepherd Health Check fails before we mark appInst down",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ShepherdHealthCheckRetries"
        },
        "shepherd_metrics_collection_interval": {
          "$ref": "#/definitions/Duration"
        },
        "update_app_inst_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "update_cluster_inst_timeout": {
          "$ref": "#/definitions/Duration"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "StatusInfo": {
      "description": "Used to track status of create/delete/update for resources that are being modified\nby the controller via the CRM.  Tasks are the high level jobs that are to be completed.\nSteps are work items within a task.   Within the clusterinst and appinst objects this\nis converted to a string",
      "type": "object",
      "properties": {
        "max_tasks": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxTasks"
        },
        "step_name": {
          "type": "string",
          "x-go-name": "StepName"
        },
        "task_name": {
          "type": "string",
          "x-go-name": "TaskName"
        },
        "task_number": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TaskNumber"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Timestamp": {
      "description": "This is a simple Timestamp message type\ngrpc-gateway converts google.protobuf.Timestamp into an RFC3339-type string\nwhich is a waste of a conversion, so we define our own",
      "type": "object",
      "properties": {
        "nanos": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "TrackedState": {
      "description": "i.e. track the state of a ClusterInst object on the CRM (Cloudlet).",
      "type": "integer",
      "format": "int32",
      "title": "TrackedState is used to track the state of an object on a remote node,",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "User": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Email": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "FamilyName": {
          "type": "string"
        },
        "GivenName": {
          "type": "string"
        },
        "Iter": {
          "type": "integer",
          "format": "int64"
        },
        "Locked": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Nickname": {
          "type": "string"
        },
        "Passhash": {
          "type": "string"
        },
        "Picture": {
          "type": "string"
        },
        "Salt": {
          "type": "string"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
    }
  },
  "responses": {
    "badRequest": {
      "description": "Status Bad Request",
      "schema": {
        "$ref": "#/definitions/Result"
      }
    },
    "forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Result"
      }
    },
    "notFound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Result"
      }
    },
    "success": {
      "description": "Success",
      "schema": {
        "$ref": "#/definitions/Result"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "x-tagGroups": [
    {
      "name": "General APIs",
      "tags": [
        "Setup",
        "User"
      ]
    },
    {
      "name": "Operator APIs",
      "tags": [
        "Cloudlet"
      ]
    },
    {
      "name": "Developer APIs",
      "tags": [
        "Cluster-Instance",
        "App",
        "App-Instance"
      ]
    }
  ]
}