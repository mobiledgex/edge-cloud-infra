// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package ctrlapi

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"google.golang.org/grpc"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateGPUDriverStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriver, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.CreateGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteGPUDriverStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriver, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.DeleteGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func UpdateGPUDriverStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriver, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.UpdateGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowGPUDriverStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriver, conn *grpc.ClientConn, authzOk func(obj *edgeproto.GPUDriver) (bool, bool), authzFilter func(obj *edgeproto.GPUDriver), cb func(res *edgeproto.GPUDriver) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.SkipAuthz {
			if authzOk != nil {
				isAuthzOk, filterOutput := authzOk(res)
				if !isAuthzOk {
					continue
				}
				if filterOutput && authzFilter != nil {
					authzFilter(res)
				}
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func AddGPUDriverBuildStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriverBuildMember, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.AddGPUDriverBuild(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func RemoveGPUDriverBuildStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriverBuildMember, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.RemoveGPUDriverBuild(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func GetGPUDriverBuildURLObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.GPUDriverBuildMember, conn *grpc.ClientConn) (*edgeproto.GPUDriverBuildURL, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewGPUDriverApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetGPUDriverBuildURL(ctx, obj)
}

func CreateCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.Cloudlet, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.CreateCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.Cloudlet, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.DeleteCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func UpdateCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.Cloudlet, conn *grpc.ClientConn, cb func(res *edgeproto.Result) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.UpdateCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.Cloudlet, conn *grpc.ClientConn, authzOk func(obj *edgeproto.Cloudlet) (bool, bool), authzFilter func(obj *edgeproto.Cloudlet), cb func(res *edgeproto.Cloudlet) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.SkipAuthz {
			if authzOk != nil {
				isAuthzOk, filterOutput := authzOk(res)
				if !isAuthzOk {
					continue
				}
				if filterOutput && authzFilter != nil {
					authzFilter(res)
				}
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func GetCloudletManifestObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletKey, conn *grpc.ClientConn) (*edgeproto.CloudletManifest, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletManifest(ctx, obj)
}

func GetCloudletPropsObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletProps, conn *grpc.ClientConn) (*edgeproto.CloudletProps, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletProps(ctx, obj)
}

func GetCloudletResourceQuotaPropsObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletResourceQuotaProps, conn *grpc.ClientConn) (*edgeproto.CloudletResourceQuotaProps, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletResourceQuotaProps(ctx, obj)
}

func GetCloudletResourceUsageObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletResourceUsage, conn *grpc.ClientConn) (*edgeproto.CloudletResourceUsage, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletResourceUsage(ctx, obj)
}

func AddCloudletResMappingObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletResMap, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.AddCloudletResMapping(ctx, obj)
}

func RemoveCloudletResMappingObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletResMap, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RemoveCloudletResMapping(ctx, obj)
}

func FindFlavorMatchObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.FlavorMatch, conn *grpc.ClientConn) (*edgeproto.FlavorMatch, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.FindFlavorMatch(ctx, obj)
}

func ShowFlavorsForCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletKey, conn *grpc.ClientConn, cb func(res *edgeproto.FlavorKey) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowFlavorsForCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func GetOrganizationsOnCloudletStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletKey, conn *grpc.ClientConn, cb func(res *edgeproto.Organization) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.GetOrganizationsOnCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func RevokeAccessKeyObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletKey, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RevokeAccessKey(ctx, obj)
}

func GenerateAccessKeyObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletKey, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	span.SetTag("org", obj.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GenerateAccessKey(ctx, obj)
}

func ShowCloudletInfoStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletInfo, conn *grpc.ClientConn, authzOk func(org string) bool, cb func(res *edgeproto.CloudletInfo) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	api := edgeproto.NewCloudletInfoApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowCloudletInfo(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.SkipAuthz {
			if authzOk != nil {
				if !authzOk(res.Key.Organization) {
					continue
				}
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func InjectCloudletInfoObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletInfo, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletInfoApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.InjectCloudletInfo(ctx, obj)
}

func EvictCloudletInfoObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.CloudletInfo, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewCloudletInfoApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.EvictCloudletInfo(ctx, obj)
}
