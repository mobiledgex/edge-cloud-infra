// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package ctrlapi

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, connObj RegionConn, cb func(res *edgeproto.Result) error) error {
	fedCtrl := FederationController{
		Database: rc.Database,
	}
	fedObj, found, err := fedCtrl.GetOperatorFederationObj(ctx, rc.Region, obj.Key.CloudletKey.Organization)
	if err != nil {
		return err
	}
	if found {
		var fedCtrlIntf interface{}
		fedCtrl.OperatorFederation = *fedObj
		fedCtrlIntf = &fedCtrl
		ctrlObj, ok := fedCtrlIntf.(interface {
			CreateClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result) error) error
		})
		if !ok {
			// method doesn't exist
			return fmt.Errorf("CreateClusterInst is not implemented for federation partner")
		}
		return ctrlObj.CreateClusterInstStream(ctx, rc, obj, cb)
	}
	conn, err := connObj.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}
	api := edgeproto.NewClusterInstApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.CreateClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, connObj RegionConn, cb func(res *edgeproto.Result) error) error {
	fedCtrl := FederationController{
		Database: rc.Database,
	}
	fedObj, found, err := fedCtrl.GetOperatorFederationObj(ctx, rc.Region, obj.Key.CloudletKey.Organization)
	if err != nil {
		return err
	}
	if found {
		var fedCtrlIntf interface{}
		fedCtrl.OperatorFederation = *fedObj
		fedCtrlIntf = &fedCtrl
		ctrlObj, ok := fedCtrlIntf.(interface {
			DeleteClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result) error) error
		})
		if !ok {
			// method doesn't exist
			return fmt.Errorf("DeleteClusterInst is not implemented for federation partner")
		}
		return ctrlObj.DeleteClusterInstStream(ctx, rc, obj, cb)
	}
	conn, err := connObj.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}
	api := edgeproto.NewClusterInstApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.DeleteClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func UpdateClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, connObj RegionConn, cb func(res *edgeproto.Result) error) error {
	fedCtrl := FederationController{
		Database: rc.Database,
	}
	fedObj, found, err := fedCtrl.GetOperatorFederationObj(ctx, rc.Region, obj.Key.CloudletKey.Organization)
	if err != nil {
		return err
	}
	if found {
		var fedCtrlIntf interface{}
		fedCtrl.OperatorFederation = *fedObj
		fedCtrlIntf = &fedCtrl
		ctrlObj, ok := fedCtrlIntf.(interface {
			UpdateClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result) error) error
		})
		if !ok {
			// method doesn't exist
			return fmt.Errorf("UpdateClusterInst is not implemented for federation partner")
		}
		return ctrlObj.UpdateClusterInstStream(ctx, rc, obj, cb)
	}
	conn, err := connObj.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}
	api := edgeproto.NewClusterInstApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.UpdateClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

type ShowClusterInstAuthz interface {
	Ok(obj *edgeproto.ClusterInst) (bool, bool)
	Filter(obj *edgeproto.ClusterInst)
}

func ShowClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, connObj RegionConn, authz ShowClusterInstAuthz, cb func(res *edgeproto.ClusterInst) error) error {
	fedCtrl := FederationController{
		Database: rc.Database,
	}
	fedObjs, err := fedCtrl.GetRegionFederationObjs(ctx, rc.Region, obj.Key.CloudletKey.Organization)
	if err != nil {
		return err
	}
	var fedCtrlIntf interface{}
	for _, fedObj := range fedObjs {
		fedCtrl.OperatorFederation = fedObj
		fedCtrlIntf = &fedCtrl
		ctrlObj, ok := fedCtrlIntf.(interface {
			ShowClusterInstStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.ClusterInst) error) error
		})
		if !ok {
			// method doesn't exist, ignore
			continue
		}

		err = ctrlObj.ShowClusterInstStream(ctx, rc, obj, cb)
		if err != nil {
			return err
		}
	}
	conn, err := connObj.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}
	api := edgeproto.NewClusterInstApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.SkipAuthz {
			if authz != nil {
				authzOk, filterOutput := authz.Ok(res)
				if !authzOk {
					continue
				}
				if filterOutput {
					authz.Filter(res)
				}
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteIdleReservableClusterInstsObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.IdleReservableClusterInsts, connObj RegionConn) (*edgeproto.Result, error) {
	conn, err := connObj.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return nil, err
	}
	api := edgeproto.NewClusterInstApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.DeleteIdleReservableClusterInsts(ctx, obj)
}
