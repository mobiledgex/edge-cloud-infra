// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package ctrlapi

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"google.golang.org/grpc"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateResTagTableObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.CreateResTagTable(ctx, obj)
}

func DeleteResTagTableObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.DeleteResTagTable(ctx, obj)
}

func UpdateResTagTableObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.UpdateResTagTable(ctx, obj)
}

func ShowResTagTableStream(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn, authzOk func(org string) bool, cb func(res *edgeproto.ResTagTable) error) error {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowResTagTable(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.SkipAuthz {
			if authzOk != nil {
				if !authzOk(res.Key.Organization) {
					continue
				}
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func AddResTagObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.AddResTag(ctx, obj)
}

func RemoveResTagObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTable, conn *grpc.ClientConn) (*edgeproto.Result, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetTags(span, obj.GetKey().GetTags())
	span.SetTag("org", obj.Key.Organization)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RemoveResTag(ctx, obj)
}

func GetResTagTableObj(ctx context.Context, rc *ormutil.RegionContext, obj *edgeproto.ResTagTableKey, conn *grpc.ClientConn) (*edgeproto.ResTagTable, error) {
	span := log.SpanFromContext(ctx)
	span.SetTag("region", rc.Region)
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	api := edgeproto.NewResTagTableApiClient(conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetResTagTable(ctx, obj)
}
