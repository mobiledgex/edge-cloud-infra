// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package cliwrapper

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (s *Client) CreateCloudletVMPool(uri, token string, in *ormapi.RegionCloudletVMPool) (*edgeproto.Result, int, error) {
	args := []string{"region", "CreateCloudletVMPool"}
	out := edgeproto.Result{}
	noconfig := strings.Split("CloudletVms:#.User,CloudletVms:#.State,CloudletVms:#.UpdatedAt.Seconds,CloudletVms:#.UpdatedAt.Nanos,Action,Error", ",")
	st, err := s.runObjs(uri, token, args, in, &out, withIgnore(noconfig))
	if err != nil {
		return nil, st, err
	}
	return &out, st, err
}

func (s *Client) DeleteCloudletVMPool(uri, token string, in *ormapi.RegionCloudletVMPool) (*edgeproto.Result, int, error) {
	args := []string{"region", "DeleteCloudletVMPool"}
	out := edgeproto.Result{}
	noconfig := strings.Split("CloudletVms:#.User,CloudletVms:#.State,CloudletVms:#.UpdatedAt.Seconds,CloudletVms:#.UpdatedAt.Nanos,Action,Error", ",")
	st, err := s.runObjs(uri, token, args, in, &out, withIgnore(noconfig))
	if err != nil {
		return nil, st, err
	}
	return &out, st, err
}

func (s *Client) UpdateCloudletVMPool(uri, token string, in *ormapi.RegionCloudletVMPool) (*edgeproto.Result, int, error) {
	args := []string{"region", "UpdateCloudletVMPool"}
	out := edgeproto.Result{}
	noconfig := strings.Split("CloudletVms:#.User,CloudletVms:#.State,CloudletVms:#.UpdatedAt.Seconds,CloudletVms:#.UpdatedAt.Nanos,Action,Error", ",")
	st, err := s.runObjs(uri, token, args, in, &out, withIgnore(noconfig))
	if err != nil {
		return nil, st, err
	}
	return &out, st, err
}

func (s *Client) ShowCloudletVMPool(uri, token string, in *ormapi.RegionCloudletVMPool) ([]edgeproto.CloudletVMPool, int, error) {
	args := []string{"region", "ShowCloudletVMPool"}
	outlist := []edgeproto.CloudletVMPool{}
	noconfig := strings.Split("CloudletVms:#.User,CloudletVms:#.State,CloudletVms:#.UpdatedAt.Seconds,CloudletVms:#.UpdatedAt.Nanos,Action,Error", ",")
	ops := []runOp{
		withIgnore(noconfig),
	}
	st, err := s.runObjs(uri, token, args, in, &outlist, ops...)
	return outlist, st, err
}

func (s *Client) AddCloudletVMPoolMember(uri, token string, in *ormapi.RegionCloudletVMPoolMember) (*edgeproto.Result, int, error) {
	args := []string{"region", "AddCloudletVMPoolMember"}
	out := edgeproto.Result{}
	noconfig := strings.Split("CloudletVm.User,CloudletVm.State,CloudletVm.UpdatedAt.Seconds,CloudletVm.UpdatedAt.Nanos", ",")
	st, err := s.runObjs(uri, token, args, in, &out, withIgnore(noconfig))
	if err != nil {
		return nil, st, err
	}
	return &out, st, err
}

func (s *Client) RemoveCloudletVMPoolMember(uri, token string, in *ormapi.RegionCloudletVMPoolMember) (*edgeproto.Result, int, error) {
	args := []string{"region", "RemoveCloudletVMPoolMember"}
	out := edgeproto.Result{}
	noconfig := strings.Split("CloudletVm.User,CloudletVm.State,CloudletVm.UpdatedAt.Seconds,CloudletVm.UpdatedAt.Nanos", ",")
	st, err := s.runObjs(uri, token, args, in, &out, withIgnore(noconfig))
	if err != nil {
		return nil, st, err
	}
	return &out, st, err
}
