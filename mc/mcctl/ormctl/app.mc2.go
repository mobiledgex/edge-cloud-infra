// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateAppCmd = &cli.Command{
	Use:          "CreateApp",
	RequiredArgs: strings.Join(append([]string{"region"}, AppRequiredArgs...), " "),
	OptionalArgs: strings.Join(AppOptionalArgs, " "),
	AliasArgs:    strings.Join(AppAliasArgs, " "),
	SpecialArgs:  &AppSpecialArgs,
	Comments:     addRegionComment(AppComments),
	ReqData:      &ormapi.RegionApp{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateApp"),
}

var DeleteAppCmd = &cli.Command{
	Use:          "DeleteApp",
	RequiredArgs: strings.Join(append([]string{"region"}, AppRequiredArgs...), " "),
	OptionalArgs: strings.Join(AppOptionalArgs, " "),
	AliasArgs:    strings.Join(AppAliasArgs, " "),
	SpecialArgs:  &AppSpecialArgs,
	Comments:     addRegionComment(AppComments),
	ReqData:      &ormapi.RegionApp{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteApp"),
}

var UpdateAppCmd = &cli.Command{
	Use:          "UpdateApp",
	RequiredArgs: strings.Join(append([]string{"region"}, AppRequiredArgs...), " "),
	OptionalArgs: strings.Join(AppOptionalArgs, " "),
	AliasArgs:    strings.Join(AppAliasArgs, " "),
	SpecialArgs:  &AppSpecialArgs,
	Comments:     addRegionComment(AppComments),
	ReqData:      &ormapi.RegionApp{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateApp",
		withSetFieldsFunc(setUpdateAppFields),
	),
}

func setUpdateAppFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("App")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	objmap["fields"] = cli.GetSpecifiedFields(objmap, &edgeproto.App{}, cli.JsonNamespace)
}

var ShowAppCmd = &cli.Command{
	Use:          "ShowApp",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(AppRequiredArgs, AppOptionalArgs...), " "),
	AliasArgs:    strings.Join(AppAliasArgs, " "),
	SpecialArgs:  &AppSpecialArgs,
	Comments:     addRegionComment(AppComments),
	ReqData:      &ormapi.RegionApp{},
	ReplyData:    &edgeproto.App{},
	Run:          runRest("/auth/ctrl/ShowApp"),
	StreamOut:    true,
}

var AppApiCmds = []*cli.Command{
	CreateAppCmd,
	DeleteAppCmd,
	UpdateAppCmd,
	ShowAppCmd,
}

var AppKeyRequiredArgs = []string{}
var AppKeyOptionalArgs = []string{
	"developerkey.name",
	"name",
	"version",
}
var AppKeyAliasArgs = []string{
	"developerkey.name=appkey.developerkey.name",
	"name=appkey.name",
	"version=appkey.version",
}
var AppKeyComments = map[string]string{
	"developerkey.name": "Organization or Company Name that a Developer is part of",
	"name":              "App name",
	"version":           "App version",
}
var AppKeySpecialArgs = map[string]string{}
var ConfigFileRequiredArgs = []string{}
var ConfigFileOptionalArgs = []string{
	"kind",
	"config",
}
var ConfigFileAliasArgs = []string{
	"kind=configfile.kind",
	"config=configfile.config",
}
var ConfigFileComments = map[string]string{
	"kind":   "kind (type) of config, i.e. k8s-manifest, helm-values, deploygen-config",
	"config": "config file contents or URI reference",
}
var ConfigFileSpecialArgs = map[string]string{}
var AppRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
}
var AppOptionalArgs = []string{
	"imagepath",
	"imagetype",
	"accessports",
	"defaultflavor",
	"authpublickey",
	"command",
	"annotations",
	"deployment",
	"deploymentmanifest",
	"deploymentgenerator",
	"androidpackagename",
	"delopt",
	"configs.kind",
	"configs.config",
	"scalewithcluster",
	"internalports",
	"officialfqdn",
	"md5sum",
}
var AppAliasArgs = []string{
	"developer=app.key.developerkey.name",
	"appname=app.key.name",
	"appvers=app.key.version",
	"imagepath=app.imagepath",
	"imagetype=app.imagetype",
	"accessports=app.accessports",
	"defaultflavor=app.defaultflavor.name",
	"authpublickey=app.authpublickey",
	"command=app.command",
	"annotations=app.annotations",
	"deployment=app.deployment",
	"deploymentmanifest=app.deploymentmanifest",
	"deploymentgenerator=app.deploymentgenerator",
	"androidpackagename=app.androidpackagename",
	"delopt=app.delopt",
	"configs.kind=app.configs.kind",
	"configs.config=app.configs.config",
	"scalewithcluster=app.scalewithcluster",
	"internalports=app.internalports",
	"revision=app.revision",
	"officialfqdn=app.officialfqdn",
	"md5sum=app.md5sum",
}
var AppComments = map[string]string{
	"developer":           "Organization or Company Name that a Developer is part of",
	"appname":             "App name",
	"appvers":             "App version",
	"imagepath":           "URI of where image resides",
	"imagetype":           "Image type (see ImageType), one of ImageTypeUnknown, ImageTypeDocker, ImageTypeQcow, ImageTypeHelm",
	"accessports":         "Comma separated list of protocol:port pairs that the App listens on. Numerical values must be decimal format. i.e. tcp:80,udp:10002,http:443",
	"defaultflavor":       "Flavor name",
	"authpublickey":       "public key used for authentication",
	"command":             "Command that the container runs to start service",
	"annotations":         "Annotations is a comma separated map of arbitrary key value pairs, for example: key1=val1,key2=val2,key3=val 3",
	"deployment":          "Deployment type (kubernetes, docker, or vm)",
	"deploymentmanifest":  "Deployment manifest is the deployment specific manifest file/config For docker deployment, this can be a docker-compose or docker run file For kubernetes deployment, this can be a kubernetes yaml or helm chart file",
	"deploymentgenerator": "Deployment generator target to generate a basic deployment manifest",
	"androidpackagename":  "Android package name used to match the App name from the Android package",
	"delopt":              "Override actions to Controller, one of NoAutoDelete, AutoDelete",
	"configs.kind":        "kind (type) of config, i.e. k8s-manifest, helm-values, deploygen-config",
	"configs.config":      "config file contents or URI reference",
	"scalewithcluster":    "Option to run App on all nodes of the cluster",
	"internalports":       "Should this app have access to outside world?",
	"revision":            "Revision increments each time the App is updated",
	"officialfqdn":        "Official FQDN is the FQDN that the app uses to connect by default",
	"md5sum":              "MD5Sum of the VM-based app image",
}
var AppSpecialArgs = map[string]string{}
