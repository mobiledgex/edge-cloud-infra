// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoprovpolicy.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateAutoProvPolicyCmd = &cli.Command{
	Use:          "CreateAutoProvPolicy",
	RequiredArgs: strings.Join(append([]string{"region"}, CreateAutoProvPolicyRequiredArgs...), " "),
	OptionalArgs: strings.Join(CreateAutoProvPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(AutoProvPolicyAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicySpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyComments),
	ReqData:      &ormapi.RegionAutoProvPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateAutoProvPolicy"),
}

var DeleteAutoProvPolicyCmd = &cli.Command{
	Use:          "DeleteAutoProvPolicy",
	RequiredArgs: strings.Join(append([]string{"region"}, AutoProvPolicyRequiredArgs...), " "),
	OptionalArgs: strings.Join(AutoProvPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(AutoProvPolicyAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicySpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyComments),
	ReqData:      &ormapi.RegionAutoProvPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteAutoProvPolicy"),
}

var UpdateAutoProvPolicyCmd = &cli.Command{
	Use:          "UpdateAutoProvPolicy",
	RequiredArgs: strings.Join(append([]string{"region"}, AutoProvPolicyRequiredArgs...), " "),
	OptionalArgs: strings.Join(AutoProvPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(AutoProvPolicyAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicySpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyComments),
	ReqData:      &ormapi.RegionAutoProvPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateAutoProvPolicy",
		withSetFieldsFunc(setUpdateAutoProvPolicyFields),
	),
}

func setUpdateAutoProvPolicyFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("AutoProvPolicy")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	objmap["fields"] = cli.GetSpecifiedFields(objmap, &edgeproto.AutoProvPolicy{}, cli.JsonNamespace)
}

var ShowAutoProvPolicyCmd = &cli.Command{
	Use:          "ShowAutoProvPolicy",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(AutoProvPolicyRequiredArgs, AutoProvPolicyOptionalArgs...), " "),
	AliasArgs:    strings.Join(AutoProvPolicyAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicySpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyComments),
	ReqData:      &ormapi.RegionAutoProvPolicy{},
	ReplyData:    &edgeproto.AutoProvPolicy{},
	Run:          runRest("/auth/ctrl/ShowAutoProvPolicy"),
	StreamOut:    true,
}

var AddAutoProvPolicyCloudletCmd = &cli.Command{
	Use:          "AddAutoProvPolicyCloudlet",
	RequiredArgs: strings.Join(append([]string{"region"}, AutoProvPolicyCloudletRequiredArgs...), " "),
	OptionalArgs: strings.Join(AutoProvPolicyCloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(AutoProvPolicyCloudletAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicyCloudletSpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyCloudletComments),
	ReqData:      &ormapi.RegionAutoProvPolicyCloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddAutoProvPolicyCloudlet"),
}

var RemoveAutoProvPolicyCloudletCmd = &cli.Command{
	Use:          "RemoveAutoProvPolicyCloudlet",
	RequiredArgs: strings.Join(append([]string{"region"}, AutoProvPolicyCloudletRequiredArgs...), " "),
	OptionalArgs: strings.Join(AutoProvPolicyCloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(AutoProvPolicyCloudletAliasArgs, " "),
	SpecialArgs:  &AutoProvPolicyCloudletSpecialArgs,
	Comments:     addRegionComment(AutoProvPolicyCloudletComments),
	ReqData:      &ormapi.RegionAutoProvPolicyCloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveAutoProvPolicyCloudlet"),
}

var AutoProvPolicyApiCmds = []*cli.Command{
	CreateAutoProvPolicyCmd,
	DeleteAutoProvPolicyCmd,
	UpdateAutoProvPolicyCmd,
	ShowAutoProvPolicyCmd,
	AddAutoProvPolicyCloudletCmd,
	RemoveAutoProvPolicyCloudletCmd,
}

var CreateAutoProvPolicyRequiredArgs = []string{
	"developer",
	"name",
}
var CreateAutoProvPolicyOptionalArgs = []string{
	"deployclientcount",
	"deployintervalcount",
}
var AutoProvPolicyRequiredArgs = []string{
	"developer",
	"name",
}
var AutoProvPolicyOptionalArgs = []string{
	"deployclientcount",
	"deployintervalcount",
}
var AutoProvPolicyAliasArgs = []string{
	"developer=autoprovpolicy.key.developer",
	"name=autoprovpolicy.key.name",
	"deployclientcount=autoprovpolicy.deployclientcount",
	"deployintervalcount=autoprovpolicy.deployintervalcount",
	"cloudlets.key.operatorkey.name=autoprovpolicy.cloudlets.key.operatorkey.name",
	"cloudlets.key.name=autoprovpolicy.cloudlets.key.name",
	"cloudlets.loc.latitude=autoprovpolicy.cloudlets.loc.latitude",
	"cloudlets.loc.longitude=autoprovpolicy.cloudlets.loc.longitude",
	"cloudlets.loc.horizontalaccuracy=autoprovpolicy.cloudlets.loc.horizontalaccuracy",
	"cloudlets.loc.verticalaccuracy=autoprovpolicy.cloudlets.loc.verticalaccuracy",
	"cloudlets.loc.altitude=autoprovpolicy.cloudlets.loc.altitude",
	"cloudlets.loc.course=autoprovpolicy.cloudlets.loc.course",
	"cloudlets.loc.speed=autoprovpolicy.cloudlets.loc.speed",
	"cloudlets.loc.timestamp.seconds=autoprovpolicy.cloudlets.loc.timestamp.seconds",
	"cloudlets.loc.timestamp.nanos=autoprovpolicy.cloudlets.loc.timestamp.nanos",
}
var AutoProvPolicyComments = map[string]string{
	"developer":                        "Name of the Developer that this policy belongs to",
	"name":                             "Policy name",
	"deployclientcount":                "Minimum number of clients within the auto deploy interval to trigger deployment",
	"deployintervalcount":              "Number of intervals to check before triggering deployment",
	"cloudlets.key.operatorkey.name":   "Company or Organization name of the operator",
	"cloudlets.key.name":               "Name of the cloudlet",
	"cloudlets.loc.latitude":           "latitude in WGS 84 coordinates",
	"cloudlets.loc.longitude":          "longitude in WGS 84 coordinates",
	"cloudlets.loc.horizontalaccuracy": "horizontal accuracy (radius in meters)",
	"cloudlets.loc.verticalaccuracy":   "vertical accuracy (meters)",
	"cloudlets.loc.altitude":           "On android only lat and long are guaranteed to be supplied altitude in meters",
	"cloudlets.loc.course":             "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"cloudlets.loc.speed":              "speed (IOS) / velocity (Android) (meters/sec)",
}
var AutoProvPolicySpecialArgs = map[string]string{}
var AutoProvCloudletRequiredArgs = []string{
	"key.operatorkey.name",
	"key.name",
}
var AutoProvCloudletOptionalArgs = []string{
	"loc.latitude",
	"loc.longitude",
	"loc.horizontalaccuracy",
	"loc.verticalaccuracy",
	"loc.altitude",
	"loc.course",
	"loc.speed",
	"loc.timestamp.seconds",
	"loc.timestamp.nanos",
}
var AutoProvCloudletAliasArgs = []string{
	"key.operatorkey.name=autoprovcloudlet.key.operatorkey.name",
	"key.name=autoprovcloudlet.key.name",
	"loc.latitude=autoprovcloudlet.loc.latitude",
	"loc.longitude=autoprovcloudlet.loc.longitude",
	"loc.horizontalaccuracy=autoprovcloudlet.loc.horizontalaccuracy",
	"loc.verticalaccuracy=autoprovcloudlet.loc.verticalaccuracy",
	"loc.altitude=autoprovcloudlet.loc.altitude",
	"loc.course=autoprovcloudlet.loc.course",
	"loc.speed=autoprovcloudlet.loc.speed",
	"loc.timestamp.seconds=autoprovcloudlet.loc.timestamp.seconds",
	"loc.timestamp.nanos=autoprovcloudlet.loc.timestamp.nanos",
}
var AutoProvCloudletComments = map[string]string{
	"key.operatorkey.name":   "Company or Organization name of the operator",
	"key.name":               "Name of the cloudlet",
	"loc.latitude":           "latitude in WGS 84 coordinates",
	"loc.longitude":          "longitude in WGS 84 coordinates",
	"loc.horizontalaccuracy": "horizontal accuracy (radius in meters)",
	"loc.verticalaccuracy":   "vertical accuracy (meters)",
	"loc.altitude":           "On android only lat and long are guaranteed to be supplied altitude in meters",
	"loc.course":             "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"loc.speed":              "speed (IOS) / velocity (Android) (meters/sec)",
}
var AutoProvCloudletSpecialArgs = map[string]string{}
var AutoProvCountRequiredArgs = []string{}
var AutoProvCountOptionalArgs = []string{
	"appkey.developerkey.name",
	"appkey.name",
	"appkey.version",
	"cloudletkey.operatorkey.name",
	"cloudletkey.name",
	"count",
	"processnow",
	"deploynowkey.clusterkey.name",
	"deploynowkey.cloudletkey.operatorkey.name",
	"deploynowkey.cloudletkey.name",
	"deploynowkey.developer",
}
var AutoProvCountAliasArgs = []string{
	"appkey.developerkey.name=autoprovcount.appkey.developerkey.name",
	"appkey.name=autoprovcount.appkey.name",
	"appkey.version=autoprovcount.appkey.version",
	"cloudletkey.operatorkey.name=autoprovcount.cloudletkey.operatorkey.name",
	"cloudletkey.name=autoprovcount.cloudletkey.name",
	"count=autoprovcount.count",
	"processnow=autoprovcount.processnow",
	"deploynowkey.clusterkey.name=autoprovcount.deploynowkey.clusterkey.name",
	"deploynowkey.cloudletkey.operatorkey.name=autoprovcount.deploynowkey.cloudletkey.operatorkey.name",
	"deploynowkey.cloudletkey.name=autoprovcount.deploynowkey.cloudletkey.name",
	"deploynowkey.developer=autoprovcount.deploynowkey.developer",
}
var AutoProvCountComments = map[string]string{
	"appkey.developerkey.name":     "Organization or Company Name that a Developer is part of",
	"appkey.name":                  "App name",
	"appkey.version":               "App version",
	"cloudletkey.operatorkey.name": "Company or Organization name of the operator",
	"cloudletkey.name":             "Name of the cloudlet",
	"count":                        "FindCloudlet client count",
	"processnow":                   "Process count immediately",
	"deploynowkey.clusterkey.name": "Cluster name",
	"deploynowkey.cloudletkey.operatorkey.name": "Company or Organization name of the operator",
	"deploynowkey.cloudletkey.name":             "Name of the cloudlet",
	"deploynowkey.developer":                    "Name of Developer that this cluster belongs to",
}
var AutoProvCountSpecialArgs = map[string]string{}
var AutoProvCountsRequiredArgs = []string{}
var AutoProvCountsOptionalArgs = []string{
	"dmenodename",
	"timestamp.seconds",
	"timestamp.nanos",
	"counts.appkey.developerkey.name",
	"counts.appkey.name",
	"counts.appkey.version",
	"counts.cloudletkey.operatorkey.name",
	"counts.cloudletkey.name",
	"counts.count",
	"counts.processnow",
	"counts.deploynowkey.clusterkey.name",
	"counts.deploynowkey.cloudletkey.operatorkey.name",
	"counts.deploynowkey.cloudletkey.name",
	"counts.deploynowkey.developer",
}
var AutoProvCountsAliasArgs = []string{
	"dmenodename=autoprovcounts.dmenodename",
	"timestamp.seconds=autoprovcounts.timestamp.seconds",
	"timestamp.nanos=autoprovcounts.timestamp.nanos",
	"counts.appkey.developerkey.name=autoprovcounts.counts.appkey.developerkey.name",
	"counts.appkey.name=autoprovcounts.counts.appkey.name",
	"counts.appkey.version=autoprovcounts.counts.appkey.version",
	"counts.cloudletkey.operatorkey.name=autoprovcounts.counts.cloudletkey.operatorkey.name",
	"counts.cloudletkey.name=autoprovcounts.counts.cloudletkey.name",
	"counts.count=autoprovcounts.counts.count",
	"counts.processnow=autoprovcounts.counts.processnow",
	"counts.deploynowkey.clusterkey.name=autoprovcounts.counts.deploynowkey.clusterkey.name",
	"counts.deploynowkey.cloudletkey.operatorkey.name=autoprovcounts.counts.deploynowkey.cloudletkey.operatorkey.name",
	"counts.deploynowkey.cloudletkey.name=autoprovcounts.counts.deploynowkey.cloudletkey.name",
	"counts.deploynowkey.developer=autoprovcounts.counts.deploynowkey.developer",
}
var AutoProvCountsComments = map[string]string{
	"dmenodename":                                      "DME node name",
	"timestamp.seconds":                                "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"timestamp.nanos":                                  "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"counts.appkey.developerkey.name":                  "Organization or Company Name that a Developer is part of",
	"counts.appkey.name":                               "App name",
	"counts.appkey.version":                            "App version",
	"counts.cloudletkey.operatorkey.name":              "Company or Organization name of the operator",
	"counts.cloudletkey.name":                          "Name of the cloudlet",
	"counts.count":                                     "FindCloudlet client count",
	"counts.processnow":                                "Process count immediately",
	"counts.deploynowkey.clusterkey.name":              "Cluster name",
	"counts.deploynowkey.cloudletkey.operatorkey.name": "Company or Organization name of the operator",
	"counts.deploynowkey.cloudletkey.name":             "Name of the cloudlet",
	"counts.deploynowkey.developer":                    "Name of Developer that this cluster belongs to",
}
var AutoProvCountsSpecialArgs = map[string]string{}
var AutoProvPolicyCloudletRequiredArgs = []string{
	"developer",
	"name",
}
var AutoProvPolicyCloudletOptionalArgs = []string{
	"operator",
	"cloudlet",
}
var AutoProvPolicyCloudletAliasArgs = []string{
	"developer=autoprovpolicycloudlet.key.developer",
	"name=autoprovpolicycloudlet.key.name",
	"operator=autoprovpolicycloudlet.cloudletkey.operatorkey.name",
	"cloudlet=autoprovpolicycloudlet.cloudletkey.name",
}
var AutoProvPolicyCloudletComments = map[string]string{
	"developer": "Name of the Developer that this policy belongs to",
	"name":      "Policy name",
	"operator":  "Company or Organization name of the operator",
	"cloudlet":  "Name of the cloudlet",
}
var AutoProvPolicyCloudletSpecialArgs = map[string]string{}
