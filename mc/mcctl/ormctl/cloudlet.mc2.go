// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateCloudletCmd = &ApiCommand{
	Name:                 "CreateCloudlet",
	Use:                  "create",
	Short:                "Create Cloudlet. Sets up Cloudlet services on the Operators compute resources, and integrated as part of MobiledgeX edge resource portfolio. These resources are managed from the Edge Controller.",
	RequiredArgs:         "region " + strings.Join(CreateCloudletRequiredArgs, " "),
	OptionalArgs:         strings.Join(CreateCloudletOptionalArgs, " "),
	AliasArgs:            strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:          &CloudletSpecialArgs,
	Comments:             addRegionComment(CloudletComments),
	NoConfig:             "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr,ChefClientKey,State,Errors,CrmAccessPublicKey,CrmAccessKeyUpgradeRequired,CreatedAt,UpdatedAt,TrustPolicyState,HostController,ResTagMap",
	ReqData:              &ormapi.RegionCloudlet{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/CreateCloudlet",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var DeleteCloudletCmd = &ApiCommand{
	Name:                 "DeleteCloudlet",
	Use:                  "delete",
	Short:                "Delete Cloudlet. Removes the Cloudlet services where they are no longer managed from the Edge Controller.",
	RequiredArgs:         "region " + strings.Join(DeleteCloudletRequiredArgs, " "),
	OptionalArgs:         strings.Join(DeleteCloudletOptionalArgs, " "),
	AliasArgs:            strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:          &CloudletSpecialArgs,
	Comments:             addRegionComment(CloudletComments),
	NoConfig:             "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr,ChefClientKey,State,Errors,CrmAccessPublicKey,CrmAccessKeyUpgradeRequired,CreatedAt,UpdatedAt,TrustPolicyState,HostController,ResTagMap",
	ReqData:              &ormapi.RegionCloudlet{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/DeleteCloudlet",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var UpdateCloudletCmd = &ApiCommand{
	Name:                 "UpdateCloudlet",
	Use:                  "update",
	Short:                "Update Cloudlet. Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.",
	RequiredArgs:         "region " + strings.Join(UpdateCloudletRequiredArgs, " "),
	OptionalArgs:         strings.Join(UpdateCloudletOptionalArgs, " "),
	AliasArgs:            strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:          &CloudletSpecialArgs,
	Comments:             addRegionComment(CloudletComments),
	NoConfig:             "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr,ChefClientKey,State,Errors,CrmAccessPublicKey,CrmAccessKeyUpgradeRequired,CreatedAt,UpdatedAt,TrustPolicyState,HostController,PlatformType,DeploymentLocal,Flavor,PhysicalName,ContainerVersion,ResTagMap,VmImageVersion,Deployment,InfraApiAccess,InfraConfig,OverridePolicyContainerVersion,VmPool,ResTagMap",
	ReqData:              &ormapi.RegionCloudlet{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/UpdateCloudlet",
	SetFieldsFunc:        SetUpdateCloudletFields,
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

func SetUpdateCloudletFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("Cloudlet")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.Cloudlet{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowCloudletCmd = &ApiCommand{
	Name:         "ShowCloudlet",
	Use:          "show",
	Short:        "Show Cloudlets. Lists all the cloudlets managed from Edge Controller.",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletRequiredArgs, CloudletOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     addRegionComment(CloudletComments),
	NoConfig:     "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr,ChefClientKey,State,Errors,CrmAccessPublicKey,CrmAccessKeyUpgradeRequired,CreatedAt,UpdatedAt,TrustPolicyState,HostController,ResTagMap",
	ReqData:      &ormapi.RegionCloudlet{},
	ReplyData:    &edgeproto.Cloudlet{},
	Path:         "/auth/ctrl/ShowCloudlet",
	StreamOut:    true,
	ProtobufApi:  true,
}

var GetCloudletManifestCmd = &ApiCommand{
	Name:         "GetCloudletManifest",
	Use:          "getmanifest",
	Short:        "Get Cloudlet Manifest. Shows deployment manifest required to setup cloudlet",
	RequiredArgs: "region " + strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     addRegionComment(CloudletKeyComments),
	ReqData:      &ormapi.RegionCloudletKey{},
	ReplyData:    &edgeproto.CloudletManifest{},
	Path:         "/auth/ctrl/GetCloudletManifest",
	ProtobufApi:  true,
}

var GetCloudletPropsCmd = &ApiCommand{
	Name:         "GetCloudletProps",
	Use:          "getprops",
	Short:        "Get Cloudlet Properties. Shows all the infra properties used to setup cloudlet",
	RequiredArgs: "region " + strings.Join(GetCloudletPropsRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletPropsOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPropsAliasArgs, " "),
	SpecialArgs:  &CloudletPropsSpecialArgs,
	Comments:     addRegionComment(CloudletPropsComments),
	NoConfig:     "Properties",
	ReqData:      &ormapi.RegionCloudletProps{},
	ReplyData:    &edgeproto.CloudletProps{},
	Path:         "/auth/ctrl/GetCloudletProps",
	ProtobufApi:  true,
}

var GetCloudletResourceQuotaPropsCmd = &ApiCommand{
	Name:         "GetCloudletResourceQuotaProps",
	Use:          "getresourcequotaprops",
	Short:        "Get Cloudlet Resource Quota Properties. Shows all the resource quota properties of the cloudlet",
	RequiredArgs: "region " + strings.Join(GetCloudletResourceQuotaPropsRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletResourceQuotaPropsOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResourceQuotaPropsAliasArgs, " "),
	SpecialArgs:  &CloudletResourceQuotaPropsSpecialArgs,
	Comments:     addRegionComment(CloudletResourceQuotaPropsComments),
	NoConfig:     "Properties",
	ReqData:      &ormapi.RegionCloudletResourceQuotaProps{},
	ReplyData:    &edgeproto.CloudletResourceQuotaProps{},
	Path:         "/auth/ctrl/GetCloudletResourceQuotaProps",
	ProtobufApi:  true,
}

var GetCloudletResourceUsageCmd = &ApiCommand{
	Name:         "GetCloudletResourceUsage",
	Use:          "getresourceusage",
	Short:        "Get Cloudlet resource information. Shows cloudlet resources used and their limits",
	RequiredArgs: "region " + strings.Join(GetCloudletResourceUsageRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletResourceUsageOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResourceUsageAliasArgs, " "),
	SpecialArgs:  &CloudletResourceUsageSpecialArgs,
	Comments:     addRegionComment(CloudletResourceUsageComments),
	NoConfig:     "Info",
	ReqData:      &ormapi.RegionCloudletResourceUsage{},
	ReplyData:    &edgeproto.CloudletResourceUsage{},
	Path:         "/auth/ctrl/GetCloudletResourceUsage",
	ProtobufApi:  true,
}

var AddCloudletResMappingCmd = &ApiCommand{
	Name:         "AddCloudletResMapping",
	Use:          "addresmapping",
	Short:        "Add Optional Resource tag table",
	RequiredArgs: "region " + strings.Join(CloudletResMapRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletResMapOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResMapAliasArgs, " "),
	SpecialArgs:  &CloudletResMapSpecialArgs,
	Comments:     addRegionComment(CloudletResMapComments),
	ReqData:      &ormapi.RegionCloudletResMap{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/AddCloudletResMapping",
	ProtobufApi:  true,
}

var RemoveCloudletResMappingCmd = &ApiCommand{
	Name:         "RemoveCloudletResMapping",
	Use:          "removeresmapping",
	Short:        "Add Optional Resource tag table",
	RequiredArgs: "region " + strings.Join(CloudletResMapRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletResMapOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResMapAliasArgs, " "),
	SpecialArgs:  &CloudletResMapSpecialArgs,
	Comments:     addRegionComment(CloudletResMapComments),
	ReqData:      &ormapi.RegionCloudletResMap{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/RemoveCloudletResMapping",
	ProtobufApi:  true,
}

var FindFlavorMatchCmd = &ApiCommand{
	Name:         "FindFlavorMatch",
	Use:          "findflavormatch",
	Short:        "Discover if flavor produces a matching platform flavor",
	RequiredArgs: "region " + strings.Join(FlavorMatchRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorMatchOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorMatchAliasArgs, " "),
	SpecialArgs:  &FlavorMatchSpecialArgs,
	Comments:     addRegionComment(FlavorMatchComments),
	ReqData:      &ormapi.RegionFlavorMatch{},
	ReplyData:    &edgeproto.FlavorMatch{},
	Path:         "/auth/ctrl/FindFlavorMatch",
	ProtobufApi:  true,
}

var RevokeAccessKeyCmd = &ApiCommand{
	Name:         "RevokeAccessKey",
	Use:          "revokeaccesskey",
	Short:        "Revoke crm access key",
	RequiredArgs: "region " + strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     addRegionComment(CloudletKeyComments),
	ReqData:      &ormapi.RegionCloudletKey{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/RevokeAccessKey",
	ProtobufApi:  true,
}

var GenerateAccessKeyCmd = &ApiCommand{
	Name:         "GenerateAccessKey",
	Use:          "generateaccesskey",
	Short:        "Generate new crm access key",
	RequiredArgs: "region " + strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     addRegionComment(CloudletKeyComments),
	ReqData:      &ormapi.RegionCloudletKey{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/GenerateAccessKey",
	ProtobufApi:  true,
}

var CloudletApiCmds = []*ApiCommand{
	CreateCloudletCmd,
	DeleteCloudletCmd,
	UpdateCloudletCmd,
	ShowCloudletCmd,
	GetCloudletManifestCmd,
	GetCloudletPropsCmd,
	GetCloudletResourceQuotaPropsCmd,
	GetCloudletResourceUsageCmd,
	AddCloudletResMappingCmd,
	RemoveCloudletResMappingCmd,
	FindFlavorMatchCmd,
	RevokeAccessKeyCmd,
	GenerateAccessKeyCmd,
}

const CloudletGroup = "Cloudlet"

func init() {
	AllApis.AddGroup(CloudletGroup, "Manage Cloudlets", CloudletApiCmds)
}

var CreateCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"location.latitude",
	"location.longitude",
	"numdynamicips",
}
var CreateCloudletOptionalArgs = []string{
	"location.altitude",
	"ipsupport",
	"staticips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
}
var DeleteCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var DeleteCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
}
var UpdateCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var UpdateCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"envvar",
	"accessvars",
	"maintenancestate",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
}
var ShowCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var ShowCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
}
var GetCloudletPropsRequiredArgs = []string{
	"platformtype",
}
var GetCloudletPropsOptionalArgs = []string{
	"organization",
}
var GetCloudletResourceQuotaPropsRequiredArgs = []string{
	"platformtype",
}
var GetCloudletResourceQuotaPropsOptionalArgs = []string{
	"organization",
}
var GetCloudletResourceUsageRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var GetCloudletResourceUsageOptionalArgs = []string{
	"infrausage",
}

var ShowCloudletInfoCmd = &ApiCommand{
	Name:         "ShowCloudletInfo",
	Use:          "show",
	Short:        "Show CloudletInfos",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletInfoRequiredArgs, CloudletInfoOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     addRegionComment(CloudletInfoComments),
	NoConfig:     "Resources",
	ReqData:      &ormapi.RegionCloudletInfo{},
	ReplyData:    &edgeproto.CloudletInfo{},
	Path:         "/auth/ctrl/ShowCloudletInfo",
	StreamOut:    true,
	ProtobufApi:  true,
}

var InjectCloudletInfoCmd = &ApiCommand{
	Name:         "InjectCloudletInfo",
	Use:          "inject",
	Short:        "Inject (create) a CloudletInfo for regression testing",
	RequiredArgs: "region " + strings.Join(CloudletInfoRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletInfoOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     addRegionComment(CloudletInfoComments),
	NoConfig:     "Resources",
	ReqData:      &ormapi.RegionCloudletInfo{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/InjectCloudletInfo",
	ProtobufApi:  true,
}

var EvictCloudletInfoCmd = &ApiCommand{
	Name:         "EvictCloudletInfo",
	Use:          "evict",
	Short:        "Evict (delete) a CloudletInfo for regression testing",
	RequiredArgs: "region " + strings.Join(CloudletInfoRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletInfoOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     addRegionComment(CloudletInfoComments),
	NoConfig:     "Resources",
	ReqData:      &ormapi.RegionCloudletInfo{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/EvictCloudletInfo",
	ProtobufApi:  true,
}

var CloudletInfoApiCmds = []*ApiCommand{
	ShowCloudletInfoCmd,
	InjectCloudletInfoCmd,
	EvictCloudletInfoCmd,
}

const CloudletInfoGroup = "CloudletInfo"

func init() {
	AllApis.AddGroup(CloudletInfoGroup, "Manage CloudletInfos", CloudletInfoApiCmds)
}

var CloudletKeyRequiredArgs = []string{}
var CloudletKeyOptionalArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletKeyAliasArgs = []string{
	"cloudlet-org=cloudletkey.organization",
	"cloudlet=cloudletkey.name",
}
var CloudletKeyComments = map[string]string{
	"cloudlet-org": "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
}
var CloudletKeySpecialArgs = map[string]string{}
var OperationTimeLimitsRequiredArgs = []string{}
var OperationTimeLimitsOptionalArgs = []string{
	"createclusterinsttimeout",
	"updateclusterinsttimeout",
	"deleteclusterinsttimeout",
	"createappinsttimeout",
	"updateappinsttimeout",
	"deleteappinsttimeout",
}
var OperationTimeLimitsAliasArgs = []string{
	"createclusterinsttimeout=operationtimelimits.createclusterinsttimeout",
	"updateclusterinsttimeout=operationtimelimits.updateclusterinsttimeout",
	"deleteclusterinsttimeout=operationtimelimits.deleteclusterinsttimeout",
	"createappinsttimeout=operationtimelimits.createappinsttimeout",
	"updateappinsttimeout=operationtimelimits.updateappinsttimeout",
	"deleteappinsttimeout=operationtimelimits.deleteappinsttimeout",
}
var OperationTimeLimitsComments = map[string]string{
	"createclusterinsttimeout": "override default max time to create a cluster instance (duration)",
	"updateclusterinsttimeout": "override default max time to update a cluster instance (duration)",
	"deleteclusterinsttimeout": "override default max time to delete a cluster instance (duration)",
	"createappinsttimeout":     "override default max time to create an app instance (duration)",
	"updateappinsttimeout":     "override default max time to update an app instance (duration)",
	"deleteappinsttimeout":     "override default max time to delete an app instance (duration)",
}
var OperationTimeLimitsSpecialArgs = map[string]string{}
var CloudletInternalRequiredArgs = []string{
	"key.organization",
	"key.name",
}
var CloudletInternalOptionalArgs = []string{
	"props",
}
var CloudletInternalAliasArgs = []string{
	"fields=cloudletinternal.fields",
	"key.organization=cloudletinternal.key.organization",
	"key.name=cloudletinternal.key.name",
	"props=cloudletinternal.props",
}
var CloudletInternalComments = map[string]string{
	"fields":           "Fields are used for the Update API to specify which fields to apply.",
	"key.organization": "Organization of the cloudlet site",
	"key.name":         "Name of the cloudlet",
	"props":            "Map of key value pairs for data exchanged between components",
}
var CloudletInternalSpecialArgs = map[string]string{
	"cloudletinternal.fields": "StringArray",
	"cloudletinternal.props":  "StringToString",
}
var PlatformConfigRequiredArgs = []string{}
var PlatformConfigOptionalArgs = []string{
	"containerregistrypath",
	"cloudletvmimagepath",
	"notifyctrladdrs",
	"tlscertfile",
	"tlskeyfile",
	"tlscafile",
	"envvar",
	"platformtag",
	"testmode",
	"span",
	"cleanupmode",
	"region",
	"commercialcerts",
	"usevaultpki",
	"appdnsroot",
	"chefserverpath",
	"chefclientinterval",
	"deploymenttag",
	"crmaccessprivatekey",
	"accessapiaddr",
}
var PlatformConfigAliasArgs = []string{
	"containerregistrypath=platformconfig.containerregistrypath",
	"cloudletvmimagepath=platformconfig.cloudletvmimagepath",
	"notifyctrladdrs=platformconfig.notifyctrladdrs",
	"tlscertfile=platformconfig.tlscertfile",
	"tlskeyfile=platformconfig.tlskeyfile",
	"tlscafile=platformconfig.tlscafile",
	"envvar=platformconfig.envvar",
	"platformtag=platformconfig.platformtag",
	"testmode=platformconfig.testmode",
	"span=platformconfig.span",
	"cleanupmode=platformconfig.cleanupmode",
	"region=platformconfig.region",
	"commercialcerts=platformconfig.commercialcerts",
	"usevaultpki=platformconfig.usevaultpki",
	"appdnsroot=platformconfig.appdnsroot",
	"chefserverpath=platformconfig.chefserverpath",
	"chefclientinterval=platformconfig.chefclientinterval",
	"deploymenttag=platformconfig.deploymenttag",
	"crmaccessprivatekey=platformconfig.crmaccessprivatekey",
	"accessapiaddr=platformconfig.accessapiaddr",
}
var PlatformConfigComments = map[string]string{
	"containerregistrypath": "Path to Docker registry holding edge-cloud image",
	"cloudletvmimagepath":   "Path to platform base image",
	"notifyctrladdrs":       "Address of controller notify port (can be multiple of these)",
	"tlscertfile":           "TLS cert file",
	"tlskeyfile":            "TLS key file",
	"tlscafile":             "TLS ca file",
	"envvar":                "Environment variables",
	"platformtag":           "Tag of edge-cloud image",
	"testmode":              "Internal Test flag",
	"span":                  "Span string",
	"cleanupmode":           "Internal cleanup flag",
	"region":                "Region",
	"commercialcerts":       "Get certs from vault or generate your own for the root load balancer",
	"usevaultpki":           "Use Vault certs and CAs for internal TLS communication",
	"appdnsroot":            "App domain name root",
	"chefserverpath":        "Path to Chef Server",
	"chefclientinterval":    "Chef client interval",
	"deploymenttag":         "Deployment Tag",
	"crmaccessprivatekey":   "crm access private key",
	"accessapiaddr":         "controller access API address",
}
var PlatformConfigSpecialArgs = map[string]string{
	"platformconfig.envvar": "StringToString",
}
var CloudletResMapRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"mapping",
}
var CloudletResMapOptionalArgs = []string{}
var CloudletResMapAliasArgs = []string{
	"cloudlet-org=cloudletresmap.key.organization",
	"cloudlet=cloudletresmap.key.name",
	"mapping=cloudletresmap.mapping",
}
var CloudletResMapComments = map[string]string{
	"cloudlet-org": "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
	"mapping":      "Resource mapping info",
}
var CloudletResMapSpecialArgs = map[string]string{
	"cloudletresmap.mapping": "StringToString",
}
var InfraConfigRequiredArgs = []string{}
var InfraConfigOptionalArgs = []string{
	"externalnetworkname",
	"flavorname",
}
var InfraConfigAliasArgs = []string{
	"externalnetworkname=infraconfig.externalnetworkname",
	"flavorname=infraconfig.flavorname",
}
var InfraConfigComments = map[string]string{
	"externalnetworkname": "Infra specific external network name",
	"flavorname":          "Infra specific flavor name",
}
var InfraConfigSpecialArgs = map[string]string{}
var ResourceQuotaRequiredArgs = []string{}
var ResourceQuotaOptionalArgs = []string{
	"name",
	"value",
	"alertthreshold",
}
var ResourceQuotaAliasArgs = []string{
	"name=resourcequota.name",
	"value=resourcequota.value",
	"alertthreshold=resourcequota.alertthreshold",
}
var ResourceQuotaComments = map[string]string{
	"name":           "Resource name on which to set quota",
	"value":          "Quota value of the resource",
	"alertthreshold": "Generate alert when more than threshold percentage of resource is used",
}
var ResourceQuotaSpecialArgs = map[string]string{}
var CloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"restagmap:#.key",
	"restagmap:#.value.name",
	"restagmap:#.value.organization",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
}
var CloudletAliasArgs = []string{
	"fields=cloudlet.fields",
	"cloudlet-org=cloudlet.key.organization",
	"cloudlet=cloudlet.key.name",
	"location.latitude=cloudlet.location.latitude",
	"location.longitude=cloudlet.location.longitude",
	"location.horizontalaccuracy=cloudlet.location.horizontalaccuracy",
	"location.verticalaccuracy=cloudlet.location.verticalaccuracy",
	"location.altitude=cloudlet.location.altitude",
	"location.course=cloudlet.location.course",
	"location.speed=cloudlet.location.speed",
	"location.timestamp.seconds=cloudlet.location.timestamp.seconds",
	"location.timestamp.nanos=cloudlet.location.timestamp.nanos",
	"ipsupport=cloudlet.ipsupport",
	"staticips=cloudlet.staticips",
	"numdynamicips=cloudlet.numdynamicips",
	"timelimits.createclusterinsttimeout=cloudlet.timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout=cloudlet.timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout=cloudlet.timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout=cloudlet.timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout=cloudlet.timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout=cloudlet.timelimits.deleteappinsttimeout",
	"errors=cloudlet.errors",
	"status.tasknumber=cloudlet.status.tasknumber",
	"status.maxtasks=cloudlet.status.maxtasks",
	"status.taskname=cloudlet.status.taskname",
	"status.stepname=cloudlet.status.stepname",
	"status.msgcount=cloudlet.status.msgcount",
	"status.msgs=cloudlet.status.msgs",
	"state=cloudlet.state",
	"crmoverride=cloudlet.crmoverride",
	"deploymentlocal=cloudlet.deploymentlocal",
	"platformtype=cloudlet.platformtype",
	"notifysrvaddr=cloudlet.notifysrvaddr",
	"flavor.name=cloudlet.flavor.name",
	"physicalname=cloudlet.physicalname",
	"envvar=cloudlet.envvar",
	"containerversion=cloudlet.containerversion",
	"config.containerregistrypath=cloudlet.config.containerregistrypath",
	"config.cloudletvmimagepath=cloudlet.config.cloudletvmimagepath",
	"config.notifyctrladdrs=cloudlet.config.notifyctrladdrs",
	"config.tlscertfile=cloudlet.config.tlscertfile",
	"config.tlskeyfile=cloudlet.config.tlskeyfile",
	"config.tlscafile=cloudlet.config.tlscafile",
	"config.envvar=cloudlet.config.envvar",
	"config.platformtag=cloudlet.config.platformtag",
	"config.testmode=cloudlet.config.testmode",
	"config.span=cloudlet.config.span",
	"config.cleanupmode=cloudlet.config.cleanupmode",
	"config.region=cloudlet.config.region",
	"config.commercialcerts=cloudlet.config.commercialcerts",
	"config.usevaultpki=cloudlet.config.usevaultpki",
	"config.appdnsroot=cloudlet.config.appdnsroot",
	"config.chefserverpath=cloudlet.config.chefserverpath",
	"config.chefclientinterval=cloudlet.config.chefclientinterval",
	"config.deploymenttag=cloudlet.config.deploymenttag",
	"config.crmaccessprivatekey=cloudlet.config.crmaccessprivatekey",
	"config.accessapiaddr=cloudlet.config.accessapiaddr",
	"restagmap:#.key=cloudlet.restagmap:#.key",
	"restagmap:#.value.name=cloudlet.restagmap:#.value.name",
	"restagmap:#.value.organization=cloudlet.restagmap:#.value.organization",
	"accessvars=cloudlet.accessvars",
	"vmimageversion=cloudlet.vmimageversion",
	"deployment=cloudlet.deployment",
	"infraapiaccess=cloudlet.infraapiaccess",
	"infraconfig.externalnetworkname=cloudlet.infraconfig.externalnetworkname",
	"infraconfig.flavorname=cloudlet.infraconfig.flavorname",
	"chefclientkey=cloudlet.chefclientkey",
	"maintenancestate=cloudlet.maintenancestate",
	"overridepolicycontainerversion=cloudlet.overridepolicycontainerversion",
	"vmpool=cloudlet.vmpool",
	"crmaccesspublickey=cloudlet.crmaccesspublickey",
	"crmaccesskeyupgraderequired=cloudlet.crmaccesskeyupgraderequired",
	"createdat.seconds=cloudlet.createdat.seconds",
	"createdat.nanos=cloudlet.createdat.nanos",
	"updatedat.seconds=cloudlet.updatedat.seconds",
	"updatedat.nanos=cloudlet.updatedat.nanos",
	"trustpolicy=cloudlet.trustpolicy",
	"trustpolicystate=cloudlet.trustpolicystate",
	"resourcequotas:#.name=cloudlet.resourcequotas:#.name",
	"resourcequotas:#.value=cloudlet.resourcequotas:#.value",
	"resourcequotas:#.alertthreshold=cloudlet.resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold=cloudlet.defaultresourcealertthreshold",
	"hostcontroller=cloudlet.hostcontroller",
}
var CloudletComments = map[string]string{
	"fields":                              "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                        "Organization of the cloudlet site",
	"cloudlet":                            "Name of the cloudlet",
	"location.latitude":                   "latitude in WGS 84 coordinates",
	"location.longitude":                  "longitude in WGS 84 coordinates",
	"location.horizontalaccuracy":         "horizontal accuracy (radius in meters)",
	"location.verticalaccuracy":           "vertical accuracy (meters)",
	"location.altitude":                   "On android only lat and long are guaranteed to be supplied altitude in meters",
	"location.course":                     "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"location.speed":                      "speed (IOS) / velocity (Android) (meters/sec)",
	"ipsupport":                           "Type of IP support provided by Cloudlet (see IpSupport), one of IpSupportUnknown, IpSupportStatic, IpSupportDynamic",
	"staticips":                           "List of static IPs for static IP support",
	"numdynamicips":                       "Number of dynamic IPs available for dynamic IP support",
	"timelimits.createclusterinsttimeout": "override default max time to create a cluster instance (duration)",
	"timelimits.updateclusterinsttimeout": "override default max time to update a cluster instance (duration)",
	"timelimits.deleteclusterinsttimeout": "override default max time to delete a cluster instance (duration)",
	"timelimits.createappinsttimeout":     "override default max time to create an app instance (duration)",
	"timelimits.updateappinsttimeout":     "override default max time to update an app instance (duration)",
	"timelimits.deleteappinsttimeout":     "override default max time to delete an app instance (duration)",
	"errors":                              "Any errors trying to create, update, or delete the Cloudlet.",
	"state":                               "Current state of the cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"crmoverride":                         "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"deploymentlocal":                     "Deploy cloudlet services locally",
	"platformtype":                        "Platform type, one of PlatformTypeFake, PlatformTypeDind, PlatformTypeOpenstack, PlatformTypeAzure, PlatformTypeGcp, PlatformTypeEdgebox, PlatformTypeFakeinfra, PlatformTypeVsphere, PlatformTypeAwsEks, PlatformTypeVmPool, PlatformTypeAwsEc2, PlatformTypeVcd, PlatformTypeK8SBareMetal, PlatformTypeKind, PlatformTypeKindinfra",
	"notifysrvaddr":                       "Address for the CRM notify listener to run on",
	"flavor.name":                         "Flavor name",
	"physicalname":                        "Physical infrastructure cloudlet name",
	"envvar":                              "Single Key-Value pair of env var to be passed to CRM",
	"containerversion":                    "Cloudlet container version",
	"config.containerregistrypath":        "Path to Docker registry holding edge-cloud image",
	"config.cloudletvmimagepath":          "Path to platform base image",
	"config.notifyctrladdrs":              "Address of controller notify port (can be multiple of these)",
	"config.tlscertfile":                  "TLS cert file",
	"config.tlskeyfile":                   "TLS key file",
	"config.tlscafile":                    "TLS ca file",
	"config.envvar":                       "Environment variables",
	"config.platformtag":                  "Tag of edge-cloud image",
	"config.testmode":                     "Internal Test flag",
	"config.span":                         "Span string",
	"config.cleanupmode":                  "Internal cleanup flag",
	"config.region":                       "Region",
	"config.commercialcerts":              "Get certs from vault or generate your own for the root load balancer",
	"config.usevaultpki":                  "Use Vault certs and CAs for internal TLS communication",
	"config.appdnsroot":                   "App domain name root",
	"config.chefserverpath":               "Path to Chef Server",
	"config.chefclientinterval":           "Chef client interval",
	"config.deploymenttag":                "Deployment Tag",
	"config.crmaccessprivatekey":          "crm access private key",
	"config.accessapiaddr":                "controller access API address",
	"restagmap:#.value.name":              "Resource Table Name",
	"restagmap:#.value.organization":      "Operator organization of the cloudlet site.",
	"accessvars":                          "Variables required to access cloudlet",
	"vmimageversion":                      "MobiledgeX baseimage version where CRM services reside",
	"deployment":                          "Deployment type to bring up CRM services (docker, kubernetes)",
	"infraapiaccess":                      "Infra Access Type is the type of access available to Infra API Endpoint, one of DirectAccess, RestrictedAccess",
	"infraconfig.externalnetworkname":     "Infra specific external network name",
	"infraconfig.flavorname":              "Infra specific flavor name",
	"chefclientkey":                       "Chef client key",
	"maintenancestate":                    "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"overridepolicycontainerversion":      "Override container version from policy file",
	"vmpool":                              "VM Pool",
	"crmaccesspublickey":                  "CRM access public key",
	"crmaccesskeyupgraderequired":         "CRM access key upgrade required",
	"trustpolicy":                         "Optional Trust Policy",
	"trustpolicystate":                    "State of trust policy, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"resourcequotas:#.name":               "Resource name on which to set quota",
	"resourcequotas:#.value":              "Quota value of the resource",
	"resourcequotas:#.alertthreshold":     "Generate alert when more than threshold percentage of resource is used",
	"defaultresourcealertthreshold":       "Default resource alert threshold percentage",
	"hostcontroller":                      "Addr of the controller hosting the cloudlet services if it is running locally",
}
var CloudletSpecialArgs = map[string]string{
	"cloudlet.accessvars":    "StringToString",
	"cloudlet.chefclientkey": "StringToString",
	"cloudlet.config.envvar": "StringToString",
	"cloudlet.envvar":        "StringToString",
	"cloudlet.errors":        "StringArray",
	"cloudlet.fields":        "StringArray",
	"cloudlet.status.msgs":   "StringArray",
}
var FlavorMatchRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var FlavorMatchOptionalArgs = []string{
	"flavor",
	"availabilityzone",
}
var FlavorMatchAliasArgs = []string{
	"cloudlet-org=flavormatch.key.organization",
	"cloudlet=flavormatch.key.name",
	"flavor=flavormatch.flavorname",
	"availabilityzone=flavormatch.availabilityzone",
}
var FlavorMatchComments = map[string]string{
	"cloudlet-org": "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
}
var FlavorMatchSpecialArgs = map[string]string{}
var CloudletManifestRequiredArgs = []string{}
var CloudletManifestOptionalArgs = []string{
	"manifest",
}
var CloudletManifestAliasArgs = []string{
	"manifest=cloudletmanifest.manifest",
}
var CloudletManifestComments = map[string]string{
	"manifest": "Manifest to bringup cloudlet VM and services.",
}
var CloudletManifestSpecialArgs = map[string]string{}
var PropertyInfoRequiredArgs = []string{}
var PropertyInfoOptionalArgs = []string{
	"name",
	"description",
	"value",
	"secret",
	"mandatory",
	"internal",
}
var PropertyInfoAliasArgs = []string{
	"name=propertyinfo.name",
	"description=propertyinfo.description",
	"value=propertyinfo.value",
	"secret=propertyinfo.secret",
	"mandatory=propertyinfo.mandatory",
	"internal=propertyinfo.internal",
}
var PropertyInfoComments = map[string]string{
	"name":        "Name of the property",
	"description": "Description of the property",
	"value":       "Default value of the property",
	"secret":      "Is the property a secret value, will be hidden",
	"mandatory":   "Is the property mandatory",
	"internal":    "Is the property internal, not to be set by Operator",
}
var PropertyInfoSpecialArgs = map[string]string{}
var CloudletPropsRequiredArgs = []string{}
var CloudletPropsOptionalArgs = []string{
	"platformtype",
	"properties:#.key",
	"properties:#.value.name",
	"properties:#.value.description",
	"properties:#.value.value",
	"properties:#.value.secret",
	"properties:#.value.mandatory",
	"properties:#.value.internal",
	"organization",
}
var CloudletPropsAliasArgs = []string{
	"platformtype=cloudletprops.platformtype",
	"properties:#.key=cloudletprops.properties:#.key",
	"properties:#.value.name=cloudletprops.properties:#.value.name",
	"properties:#.value.description=cloudletprops.properties:#.value.description",
	"properties:#.value.value=cloudletprops.properties:#.value.value",
	"properties:#.value.secret=cloudletprops.properties:#.value.secret",
	"properties:#.value.mandatory=cloudletprops.properties:#.value.mandatory",
	"properties:#.value.internal=cloudletprops.properties:#.value.internal",
	"organization=cloudletprops.organization",
}
var CloudletPropsComments = map[string]string{
	"platformtype":                   "Platform type, one of PlatformTypeFake, PlatformTypeDind, PlatformTypeOpenstack, PlatformTypeAzure, PlatformTypeGcp, PlatformTypeEdgebox, PlatformTypeFakeinfra, PlatformTypeVsphere, PlatformTypeAwsEks, PlatformTypeVmPool, PlatformTypeAwsEc2, PlatformTypeVcd, PlatformTypeK8SBareMetal, PlatformTypeKind, PlatformTypeKindinfra",
	"properties:#.value.name":        "Name of the property",
	"properties:#.value.description": "Description of the property",
	"properties:#.value.value":       "Default value of the property",
	"properties:#.value.secret":      "Is the property a secret value, will be hidden",
	"properties:#.value.mandatory":   "Is the property mandatory",
	"properties:#.value.internal":    "Is the property internal, not to be set by Operator",
	"organization":                   "Organization",
}
var CloudletPropsSpecialArgs = map[string]string{}
var CloudletResourceQuotaPropsRequiredArgs = []string{}
var CloudletResourceQuotaPropsOptionalArgs = []string{
	"platformtype",
	"properties:#.name",
	"properties:#.value",
	"properties:#.inframaxvalue",
	"properties:#.quotamaxvalue",
	"properties:#.description",
	"properties:#.units",
	"properties:#.alertthreshold",
	"organization",
}
var CloudletResourceQuotaPropsAliasArgs = []string{
	"platformtype=cloudletresourcequotaprops.platformtype",
	"properties:#.name=cloudletresourcequotaprops.properties:#.name",
	"properties:#.value=cloudletresourcequotaprops.properties:#.value",
	"properties:#.inframaxvalue=cloudletresourcequotaprops.properties:#.inframaxvalue",
	"properties:#.quotamaxvalue=cloudletresourcequotaprops.properties:#.quotamaxvalue",
	"properties:#.description=cloudletresourcequotaprops.properties:#.description",
	"properties:#.units=cloudletresourcequotaprops.properties:#.units",
	"properties:#.alertthreshold=cloudletresourcequotaprops.properties:#.alertthreshold",
	"organization=cloudletresourcequotaprops.organization",
}
var CloudletResourceQuotaPropsComments = map[string]string{
	"platformtype":                "Platform type, one of PlatformTypeFake, PlatformTypeDind, PlatformTypeOpenstack, PlatformTypeAzure, PlatformTypeGcp, PlatformTypeEdgebox, PlatformTypeFakeinfra, PlatformTypeVsphere, PlatformTypeAwsEks, PlatformTypeVmPool, PlatformTypeAwsEc2, PlatformTypeVcd, PlatformTypeK8SBareMetal, PlatformTypeKind, PlatformTypeKindinfra",
	"properties:#.name":           "Resource name",
	"properties:#.value":          "Resource value",
	"properties:#.inframaxvalue":  "Resource infra max value",
	"properties:#.quotamaxvalue":  "Resource quota max value",
	"properties:#.description":    "Resource description",
	"properties:#.units":          "Resource units",
	"properties:#.alertthreshold": "Generate alert when more than threshold percentage of resource is used",
	"organization":                "Organization",
}
var CloudletResourceQuotaPropsSpecialArgs = map[string]string{}
var CloudletResourceUsageRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletResourceUsageOptionalArgs = []string{
	"infrausage",
	"info:#.name",
	"info:#.value",
	"info:#.inframaxvalue",
	"info:#.quotamaxvalue",
	"info:#.description",
	"info:#.units",
	"info:#.alertthreshold",
}
var CloudletResourceUsageAliasArgs = []string{
	"cloudlet-org=cloudletresourceusage.key.organization",
	"cloudlet=cloudletresourceusage.key.name",
	"infrausage=cloudletresourceusage.infrausage",
	"info:#.name=cloudletresourceusage.info:#.name",
	"info:#.value=cloudletresourceusage.info:#.value",
	"info:#.inframaxvalue=cloudletresourceusage.info:#.inframaxvalue",
	"info:#.quotamaxvalue=cloudletresourceusage.info:#.quotamaxvalue",
	"info:#.description=cloudletresourceusage.info:#.description",
	"info:#.units=cloudletresourceusage.info:#.units",
	"info:#.alertthreshold=cloudletresourceusage.info:#.alertthreshold",
}
var CloudletResourceUsageComments = map[string]string{
	"cloudlet-org":          "Organization of the cloudlet site",
	"cloudlet":              "Name of the cloudlet",
	"infrausage":            "Show Infra based usage",
	"info:#.name":           "Resource name",
	"info:#.value":          "Resource value",
	"info:#.inframaxvalue":  "Resource infra max value",
	"info:#.quotamaxvalue":  "Resource quota max value",
	"info:#.description":    "Resource description",
	"info:#.units":          "Resource units",
	"info:#.alertthreshold": "Generate alert when more than threshold percentage of resource is used",
}
var CloudletResourceUsageSpecialArgs = map[string]string{}
var FlavorInfoRequiredArgs = []string{}
var FlavorInfoOptionalArgs = []string{
	"name",
	"vcpus",
	"ram",
	"disk",
	"propmap",
}
var FlavorInfoAliasArgs = []string{
	"name=flavorinfo.name",
	"vcpus=flavorinfo.vcpus",
	"ram=flavorinfo.ram",
	"disk=flavorinfo.disk",
	"propmap=flavorinfo.propmap",
}
var FlavorInfoComments = map[string]string{
	"name":    "Name of the flavor on the Cloudlet",
	"vcpus":   "Number of VCPU cores on the Cloudlet",
	"ram":     "Ram in MB on the Cloudlet",
	"disk":    "Amount of disk in GB on the Cloudlet",
	"propmap": "OS Flavor Properties, if any",
}
var FlavorInfoSpecialArgs = map[string]string{
	"flavorinfo.propmap": "StringToString",
}
var OSAZoneRequiredArgs = []string{}
var OSAZoneOptionalArgs = []string{
	"name",
	"status",
}
var OSAZoneAliasArgs = []string{
	"name=osazone.name",
	"status=osazone.status",
}
var OSAZoneComments = map[string]string{}
var OSAZoneSpecialArgs = map[string]string{}
var OSImageRequiredArgs = []string{}
var OSImageOptionalArgs = []string{
	"name",
	"tags",
	"properties",
	"diskformat",
}
var OSImageAliasArgs = []string{
	"name=osimage.name",
	"tags=osimage.tags",
	"properties=osimage.properties",
	"diskformat=osimage.diskformat",
}
var OSImageComments = map[string]string{
	"name":       "image name",
	"tags":       "optional tags present on image",
	"properties": "image properties/metadata",
	"diskformat": "format qcow2, img, etc",
}
var OSImageSpecialArgs = map[string]string{}
var CloudletInfoRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletInfoOptionalArgs = []string{
	"state",
	"notifyid",
	"controller",
	"osmaxram",
	"osmaxvcores",
	"osmaxvolgb",
	"errors",
	"flavors:#.name",
	"flavors:#.vcpus",
	"flavors:#.ram",
	"flavors:#.disk",
	"flavors:#.propmap",
	"status.tasknumber",
	"status.maxtasks",
	"status.taskname",
	"status.stepname",
	"status.msgcount",
	"status.msgs",
	"containerversion",
	"availabilityzones:#.name",
	"availabilityzones:#.status",
	"osimages:#.name",
	"osimages:#.tags",
	"osimages:#.properties",
	"osimages:#.diskformat",
	"controllercachereceived",
	"maintenancestate",
	"resourcessnapshot.platformvms:#.name",
	"resourcessnapshot.platformvms:#.type",
	"resourcessnapshot.platformvms:#.status",
	"resourcessnapshot.platformvms:#.infraflavor",
	"resourcessnapshot.platformvms:#.ipaddresses:#.externalip",
	"resourcessnapshot.platformvms:#.ipaddresses:#.internalip",
	"resourcessnapshot.platformvms:#.containers:#.name",
	"resourcessnapshot.platformvms:#.containers:#.type",
	"resourcessnapshot.platformvms:#.containers:#.status",
	"resourcessnapshot.platformvms:#.containers:#.clusterip",
	"resourcessnapshot.platformvms:#.containers:#.restarts",
	"resourcessnapshot.info:#.name",
	"resourcessnapshot.info:#.value",
	"resourcessnapshot.info:#.inframaxvalue",
	"resourcessnapshot.info:#.quotamaxvalue",
	"resourcessnapshot.info:#.description",
	"resourcessnapshot.info:#.units",
	"resourcessnapshot.info:#.alertthreshold",
	"resourcessnapshot.clusterinsts:#.clusterkey.name",
	"resourcessnapshot.clusterinsts:#.organization",
	"resourcessnapshot.vmappinsts:#.appkey.organization",
	"resourcessnapshot.vmappinsts:#.appkey.name",
	"resourcessnapshot.vmappinsts:#.appkey.version",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.organization",
	"trustpolicystate",
	"compatibilityversion",
	"properties",
}
var CloudletInfoAliasArgs = []string{
	"fields=cloudletinfo.fields",
	"cloudlet-org=cloudletinfo.key.organization",
	"cloudlet=cloudletinfo.key.name",
	"state=cloudletinfo.state",
	"notifyid=cloudletinfo.notifyid",
	"controller=cloudletinfo.controller",
	"osmaxram=cloudletinfo.osmaxram",
	"osmaxvcores=cloudletinfo.osmaxvcores",
	"osmaxvolgb=cloudletinfo.osmaxvolgb",
	"errors=cloudletinfo.errors",
	"flavors:#.name=cloudletinfo.flavors:#.name",
	"flavors:#.vcpus=cloudletinfo.flavors:#.vcpus",
	"flavors:#.ram=cloudletinfo.flavors:#.ram",
	"flavors:#.disk=cloudletinfo.flavors:#.disk",
	"flavors:#.propmap=cloudletinfo.flavors:#.propmap",
	"status.tasknumber=cloudletinfo.status.tasknumber",
	"status.maxtasks=cloudletinfo.status.maxtasks",
	"status.taskname=cloudletinfo.status.taskname",
	"status.stepname=cloudletinfo.status.stepname",
	"status.msgcount=cloudletinfo.status.msgcount",
	"status.msgs=cloudletinfo.status.msgs",
	"containerversion=cloudletinfo.containerversion",
	"availabilityzones:#.name=cloudletinfo.availabilityzones:#.name",
	"availabilityzones:#.status=cloudletinfo.availabilityzones:#.status",
	"osimages:#.name=cloudletinfo.osimages:#.name",
	"osimages:#.tags=cloudletinfo.osimages:#.tags",
	"osimages:#.properties=cloudletinfo.osimages:#.properties",
	"osimages:#.diskformat=cloudletinfo.osimages:#.diskformat",
	"controllercachereceived=cloudletinfo.controllercachereceived",
	"maintenancestate=cloudletinfo.maintenancestate",
	"resourcessnapshot.platformvms:#.name=cloudletinfo.resourcessnapshot.platformvms:#.name",
	"resourcessnapshot.platformvms:#.type=cloudletinfo.resourcessnapshot.platformvms:#.type",
	"resourcessnapshot.platformvms:#.status=cloudletinfo.resourcessnapshot.platformvms:#.status",
	"resourcessnapshot.platformvms:#.infraflavor=cloudletinfo.resourcessnapshot.platformvms:#.infraflavor",
	"resourcessnapshot.platformvms:#.ipaddresses:#.externalip=cloudletinfo.resourcessnapshot.platformvms:#.ipaddresses:#.externalip",
	"resourcessnapshot.platformvms:#.ipaddresses:#.internalip=cloudletinfo.resourcessnapshot.platformvms:#.ipaddresses:#.internalip",
	"resourcessnapshot.platformvms:#.containers:#.name=cloudletinfo.resourcessnapshot.platformvms:#.containers:#.name",
	"resourcessnapshot.platformvms:#.containers:#.type=cloudletinfo.resourcessnapshot.platformvms:#.containers:#.type",
	"resourcessnapshot.platformvms:#.containers:#.status=cloudletinfo.resourcessnapshot.platformvms:#.containers:#.status",
	"resourcessnapshot.platformvms:#.containers:#.clusterip=cloudletinfo.resourcessnapshot.platformvms:#.containers:#.clusterip",
	"resourcessnapshot.platformvms:#.containers:#.restarts=cloudletinfo.resourcessnapshot.platformvms:#.containers:#.restarts",
	"resourcessnapshot.info:#.name=cloudletinfo.resourcessnapshot.info:#.name",
	"resourcessnapshot.info:#.value=cloudletinfo.resourcessnapshot.info:#.value",
	"resourcessnapshot.info:#.inframaxvalue=cloudletinfo.resourcessnapshot.info:#.inframaxvalue",
	"resourcessnapshot.info:#.quotamaxvalue=cloudletinfo.resourcessnapshot.info:#.quotamaxvalue",
	"resourcessnapshot.info:#.description=cloudletinfo.resourcessnapshot.info:#.description",
	"resourcessnapshot.info:#.units=cloudletinfo.resourcessnapshot.info:#.units",
	"resourcessnapshot.info:#.alertthreshold=cloudletinfo.resourcessnapshot.info:#.alertthreshold",
	"resourcessnapshot.clusterinsts:#.clusterkey.name=cloudletinfo.resourcessnapshot.clusterinsts:#.clusterkey.name",
	"resourcessnapshot.clusterinsts:#.organization=cloudletinfo.resourcessnapshot.clusterinsts:#.organization",
	"resourcessnapshot.vmappinsts:#.appkey.organization=cloudletinfo.resourcessnapshot.vmappinsts:#.appkey.organization",
	"resourcessnapshot.vmappinsts:#.appkey.name=cloudletinfo.resourcessnapshot.vmappinsts:#.appkey.name",
	"resourcessnapshot.vmappinsts:#.appkey.version=cloudletinfo.resourcessnapshot.vmappinsts:#.appkey.version",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name=cloudletinfo.resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.organization=cloudletinfo.resourcessnapshot.vmappinsts:#.clusterinstkey.organization",
	"trustpolicystate=cloudletinfo.trustpolicystate",
	"compatibilityversion=cloudletinfo.compatibilityversion",
	"properties=cloudletinfo.properties",
}
var CloudletInfoComments = map[string]string{
	"fields":                                 "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                           "Organization of the cloudlet site",
	"cloudlet":                               "Name of the cloudlet",
	"state":                                  "State of cloudlet, one of CloudletStateUnknown, CloudletStateErrors, CloudletStateReady, CloudletStateOffline, CloudletStateNotPresent, CloudletStateInit, CloudletStateUpgrade, CloudletStateNeedSync",
	"notifyid":                               "Id of client assigned by server (internal use only)",
	"controller":                             "Connected controller unique id",
	"osmaxram":                               "Maximum Ram in MB on the Cloudlet",
	"osmaxvcores":                            "Maximum number of VCPU cores on the Cloudlet",
	"osmaxvolgb":                             "Maximum amount of disk in GB on the Cloudlet",
	"errors":                                 "Any errors encountered while making changes to the Cloudlet",
	"flavors:#.name":                         "Name of the flavor on the Cloudlet",
	"flavors:#.vcpus":                        "Number of VCPU cores on the Cloudlet",
	"flavors:#.ram":                          "Ram in MB on the Cloudlet",
	"flavors:#.disk":                         "Amount of disk in GB on the Cloudlet",
	"flavors:#.propmap":                      "OS Flavor Properties, if any",
	"containerversion":                       "Cloudlet container version",
	"osimages:#.name":                        "image name",
	"osimages:#.tags":                        "optional tags present on image",
	"osimages:#.properties":                  "image properties/metadata",
	"osimages:#.diskformat":                  "format qcow2, img, etc",
	"controllercachereceived":                "Indicates all controller data has been sent to CRM",
	"maintenancestate":                       "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"resourcessnapshot.platformvms:#.name":   "Virtual machine name",
	"resourcessnapshot.platformvms:#.type":   "Type can be platform, rootlb, cluster-master, cluster-k8s-node, cluster-docker-node, appvm",
	"resourcessnapshot.platformvms:#.status": "Runtime status of the VM",
	"resourcessnapshot.platformvms:#.infraflavor":                   "Flavor allocated within the cloudlet infrastructure, distinct from the control plane flavor",
	"resourcessnapshot.platformvms:#.containers:#.name":             "Name of the container",
	"resourcessnapshot.platformvms:#.containers:#.type":             "Type can be docker or kubernetes",
	"resourcessnapshot.platformvms:#.containers:#.status":           "Runtime status of the container",
	"resourcessnapshot.platformvms:#.containers:#.clusterip":        "IP within the CNI and is applicable to kubernetes only",
	"resourcessnapshot.platformvms:#.containers:#.restarts":         "Restart count, applicable to kubernetes only",
	"resourcessnapshot.info:#.name":                                 "Resource name",
	"resourcessnapshot.info:#.value":                                "Resource value",
	"resourcessnapshot.info:#.inframaxvalue":                        "Resource infra max value",
	"resourcessnapshot.info:#.quotamaxvalue":                        "Resource quota max value",
	"resourcessnapshot.info:#.description":                          "Resource description",
	"resourcessnapshot.info:#.units":                                "Resource units",
	"resourcessnapshot.info:#.alertthreshold":                       "Generate alert when more than threshold percentage of resource is used",
	"resourcessnapshot.clusterinsts:#.clusterkey.name":              "Cluster name",
	"resourcessnapshot.clusterinsts:#.organization":                 "Name of Developer organization that this cluster belongs to",
	"resourcessnapshot.vmappinsts:#.appkey.organization":            "App developer organization",
	"resourcessnapshot.vmappinsts:#.appkey.name":                    "App name",
	"resourcessnapshot.vmappinsts:#.appkey.version":                 "App version",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name": "Cluster name",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.organization":    "Name of Developer organization that this cluster belongs to",
	"trustpolicystate":     "Trust Policy State, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"compatibilityversion": "Version for compatibility tracking",
	"properties":           "Cloudlet properties",
}
var CloudletInfoSpecialArgs = map[string]string{
	"cloudletinfo.errors":            "StringArray",
	"cloudletinfo.fields":            "StringArray",
	"cloudletinfo.flavors:#.propmap": "StringToString",
	"cloudletinfo.properties":        "StringToString",
	"cloudletinfo.status.msgs":       "StringArray",
}
var CloudletMetricsRequiredArgs = []string{}
var CloudletMetricsOptionalArgs = []string{
	"foo",
}
var CloudletMetricsAliasArgs = []string{
	"foo=cloudletmetrics.foo",
}
var CloudletMetricsComments = map[string]string{
	"foo": "what goes here?",
}
var CloudletMetricsSpecialArgs = map[string]string{}
