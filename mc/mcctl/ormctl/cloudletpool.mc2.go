// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateCloudletPoolCmd = &cli.Command{
	Use:          "CreateCloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateCloudletPool"),
}

var DeleteCloudletPoolCmd = &cli.Command{
	Use:          "DeleteCloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteCloudletPool"),
}

var UpdateCloudletPoolCmd = &cli.Command{
	Use:          "UpdateCloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateCloudletPool",
		withSetFieldsFunc(setUpdateCloudletPoolFields),
	),
}

func setUpdateCloudletPoolFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("CloudletPool")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.CloudletPool{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowCloudletPoolCmd = &cli.Command{
	Use:          "ShowCloudletPool",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletPoolRequiredArgs, CloudletPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.CloudletPool{},
	Run:          runRest("/auth/ctrl/ShowCloudletPool"),
	StreamOut:    true,
}

var AddCloudletPoolMemberCmd = &cli.Command{
	Use:          "AddCloudletPoolMember",
	RequiredArgs: "region " + strings.Join(CloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddCloudletPoolMember"),
}

var RemoveCloudletPoolMemberCmd = &cli.Command{
	Use:          "RemoveCloudletPoolMember",
	RequiredArgs: "region " + strings.Join(CloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveCloudletPoolMember"),
}

var CloudletPoolApiCmds = []*cli.Command{
	CreateCloudletPoolCmd,
	DeleteCloudletPoolCmd,
	UpdateCloudletPoolCmd,
	ShowCloudletPoolCmd,
	AddCloudletPoolMemberCmd,
	RemoveCloudletPoolMemberCmd,
}

var CloudletPoolKeyRequiredArgs = []string{}
var CloudletPoolKeyOptionalArgs = []string{
	"organization",
	"name",
}
var CloudletPoolKeyAliasArgs = []string{
	"organization=cloudletpoolkey.organization",
	"name=cloudletpoolkey.name",
}
var CloudletPoolKeyComments = map[string]string{
	"organization": "Name of the organization this pool belongs to",
	"name":         "CloudletPool Name",
}
var CloudletPoolKeySpecialArgs = map[string]string{}
var CloudletPoolRequiredArgs = []string{
	"org",
	"name",
}
var CloudletPoolOptionalArgs = []string{
	"cloudlets",
}
var CloudletPoolAliasArgs = []string{
	"fields=cloudletpool.fields",
	"org=cloudletpool.key.organization",
	"name=cloudletpool.key.name",
	"cloudlets=cloudletpool.cloudlets",
}
var CloudletPoolComments = map[string]string{
	"fields":    "Fields are used for the Update API to specify which fields to apply",
	"org":       "Name of the organization this pool belongs to",
	"name":      "CloudletPool Name",
	"cloudlets": "Cloudlets part of the pool",
}
var CloudletPoolSpecialArgs = map[string]string{
	"cloudletpool.cloudlets": "StringArray",
	"cloudletpool.fields":    "StringArray",
}
var CloudletPoolMemberRequiredArgs = []string{
	"org",
	"pool",
}
var CloudletPoolMemberOptionalArgs = []string{
	"cloudlet",
}
var CloudletPoolMemberAliasArgs = []string{
	"org=cloudletpoolmember.key.organization",
	"pool=cloudletpoolmember.key.name",
	"cloudlet=cloudletpoolmember.cloudletname",
}
var CloudletPoolMemberComments = map[string]string{
	"org":      "Name of the organization this pool belongs to",
	"pool":     "CloudletPool Name",
	"cloudlet": "Cloudlet key",
}
var CloudletPoolMemberSpecialArgs = map[string]string{}
