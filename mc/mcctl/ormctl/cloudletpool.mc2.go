// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateCloudletPoolCmd = &ApiCommand{
	Name:         "CreateCloudletPool",
	Use:          "create",
	Short:        "Create a CloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	NoConfig:     "Members,CreatedAt,UpdatedAt",
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/CreateCloudletPool",
	ProtobufApi:  true,
}

var DeleteCloudletPoolCmd = &ApiCommand{
	Name:         "DeleteCloudletPool",
	Use:          "delete",
	Short:        "Delete a CloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	NoConfig:     "Members,CreatedAt,UpdatedAt",
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/DeleteCloudletPool",
	ProtobufApi:  true,
}

var UpdateCloudletPoolCmd = &ApiCommand{
	Name:         "UpdateCloudletPool",
	Use:          "update",
	Short:        "Update a CloudletPool",
	RequiredArgs: "region " + strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	NoConfig:     "Members,CreatedAt,UpdatedAt",
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/UpdateCloudletPool",
	ProtobufApi:  true,
}

var ShowCloudletPoolCmd = &ApiCommand{
	Name:         "ShowCloudletPool",
	Use:          "show",
	Short:        "Show CloudletPools",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletPoolRequiredArgs, CloudletPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     addRegionComment(CloudletPoolComments),
	NoConfig:     "Members,CreatedAt,UpdatedAt",
	ReqData:      &ormapi.RegionCloudletPool{},
	ReplyData:    &edgeproto.CloudletPool{},
	Path:         "/auth/ctrl/ShowCloudletPool",
	StreamOut:    true,
	ProtobufApi:  true,
}

var AddCloudletPoolMemberCmd = &ApiCommand{
	Name:         "AddCloudletPoolMember",
	Use:          "addmember",
	Short:        "Add a Cloudlet to a CloudletPool",
	RequiredArgs: "region " + strings.Join(AddCloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddCloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/AddCloudletPoolMember",
	ProtobufApi:  true,
}

var RemoveCloudletPoolMemberCmd = &ApiCommand{
	Name:         "RemoveCloudletPoolMember",
	Use:          "removemember",
	Short:        "Remove a Cloudlet from a CloudletPool",
	RequiredArgs: "region " + strings.Join(RemoveCloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveCloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/RemoveCloudletPoolMember",
	ProtobufApi:  true,
}
var CloudletPoolApiCmds = []*ApiCommand{
	CreateCloudletPoolCmd,
	DeleteCloudletPoolCmd,
	UpdateCloudletPoolCmd,
	ShowCloudletPoolCmd,
	AddCloudletPoolMemberCmd,
	RemoveCloudletPoolMemberCmd,
}

const CloudletPoolGroup = "CloudletPool"

func init() {
	AllApis.AddGroup(CloudletPoolGroup, "Manage CloudletPools", CloudletPoolApiCmds)
}

var AddCloudletPoolMemberRequiredArgs = []string{
	"org",
	"pool",
	"cloudlet",
}
var AddCloudletPoolMemberOptionalArgs = []string{}
var RemoveCloudletPoolMemberRequiredArgs = []string{
	"org",
	"pool",
	"cloudlet",
}
var RemoveCloudletPoolMemberOptionalArgs = []string{}
var CloudletPoolRequiredArgs = []string{
	"org",
	"name",
}
var CloudletPoolOptionalArgs = []string{
	"cloudlets",
}
var CloudletPoolAliasArgs = []string{
	"fields=cloudletpool.fields",
	"org=cloudletpool.key.organization",
	"name=cloudletpool.key.name",
	"cloudlets=cloudletpool.cloudlets",
	"createdat.seconds=cloudletpool.createdat.seconds",
	"createdat.nanos=cloudletpool.createdat.nanos",
	"updatedat.seconds=cloudletpool.updatedat.seconds",
	"updatedat.nanos=cloudletpool.updatedat.nanos",
}
var CloudletPoolComments = map[string]string{
	"fields":    "Fields are used for the Update API to specify which fields to apply",
	"org":       "Name of the organization this pool belongs to",
	"name":      "CloudletPool Name",
	"cloudlets": "Cloudlets part of the pool, specify cloudlets:empty=true to clear",
}
var CloudletPoolSpecialArgs = map[string]string{
	"cloudletpool.cloudlets": "StringArray",
	"cloudletpool.fields":    "StringArray",
}
var CloudletPoolMemberRequiredArgs = []string{
	"org",
	"pool",
}
var CloudletPoolMemberOptionalArgs = []string{
	"cloudlet",
}
var CloudletPoolMemberAliasArgs = []string{
	"org=cloudletpoolmember.key.organization",
	"pool=cloudletpoolmember.key.name",
	"cloudlet=cloudletpoolmember.cloudletname",
}
var CloudletPoolMemberComments = map[string]string{
	"org":      "Name of the organization this pool belongs to",
	"pool":     "CloudletPool Name",
	"cloudlet": "Cloudlet name",
}
var CloudletPoolMemberSpecialArgs = map[string]string{}
