// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateCloudletVMPoolCmd = &cli.Command{
	Use:          "CreateCloudletVMPool",
	RequiredArgs: "region " + strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolComments),
	ReqData:      &ormapi.RegionCloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateCloudletVMPool"),
}

var DeleteCloudletVMPoolCmd = &cli.Command{
	Use:          "DeleteCloudletVMPool",
	RequiredArgs: "region " + strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolComments),
	ReqData:      &ormapi.RegionCloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteCloudletVMPool"),
}

var UpdateCloudletVMPoolCmd = &cli.Command{
	Use:          "UpdateCloudletVMPool",
	RequiredArgs: "region " + strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolComments),
	ReqData:      &ormapi.RegionCloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateCloudletVMPool",
		withSetFieldsFunc(setUpdateCloudletVMPoolFields),
	),
}

func setUpdateCloudletVMPoolFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("CloudletVMPool")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.CloudletVMPool{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowCloudletVMPoolCmd = &cli.Command{
	Use:          "ShowCloudletVMPool",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletVMPoolRequiredArgs, CloudletVMPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolComments),
	ReqData:      &ormapi.RegionCloudletVMPool{},
	ReplyData:    &edgeproto.CloudletVMPool{},
	Run:          runRest("/auth/ctrl/ShowCloudletVMPool"),
	StreamOut:    true,
}

var AddCloudletVMPoolMemberCmd = &cli.Command{
	Use:          "AddCloudletVMPoolMember",
	RequiredArgs: "region " + strings.Join(AddCloudletVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddCloudletVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddCloudletVMPoolMember"),
}

var RemoveCloudletVMPoolMemberCmd = &cli.Command{
	Use:          "RemoveCloudletVMPoolMember",
	RequiredArgs: "region " + strings.Join(RemoveCloudletVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveCloudletVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolMemberSpecialArgs,
	Comments:     addRegionComment(CloudletVMPoolMemberComments),
	ReqData:      &ormapi.RegionCloudletVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveCloudletVMPoolMember"),
}

var CloudletVMPoolApiCmds = []*cli.Command{
	CreateCloudletVMPoolCmd,
	DeleteCloudletVMPoolCmd,
	UpdateCloudletVMPoolCmd,
	ShowCloudletVMPoolCmd,
	AddCloudletVMPoolMemberCmd,
	RemoveCloudletVMPoolMemberCmd,
}

var AddCloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var AddCloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var RemoveCloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var RemoveCloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var CloudletVMNetInfoRequiredArgs = []string{}
var CloudletVMNetInfoOptionalArgs = []string{
	"externalip",
	"internalip",
}
var CloudletVMNetInfoAliasArgs = []string{
	"externalip=cloudletvmnetinfo.externalip",
	"internalip=cloudletvmnetinfo.internalip",
}
var CloudletVMNetInfoComments = map[string]string{
	"externalip": "External IP",
	"internalip": "Internal IP",
}
var CloudletVMNetInfoSpecialArgs = map[string]string{}
var CloudletVMRequiredArgs = []string{}
var CloudletVMOptionalArgs = []string{
	"name",
	"netinfo.externalip",
	"netinfo.internalip",
	"user",
	"state",
	"updatedat.seconds",
	"updatedat.nanos",
	"internalname",
}
var CloudletVMAliasArgs = []string{
	"name=cloudletvm.name",
	"netinfo.externalip=cloudletvm.netinfo.externalip",
	"netinfo.internalip=cloudletvm.netinfo.internalip",
	"user=cloudletvm.user",
	"state=cloudletvm.state",
	"updatedat.seconds=cloudletvm.updatedat.seconds",
	"updatedat.nanos=cloudletvm.updatedat.nanos",
	"internalname=cloudletvm.internalname",
}
var CloudletVMComments = map[string]string{
	"name":               "VM Name",
	"netinfo.externalip": "External IP",
	"netinfo.internalip": "Internal IP",
	"user":               "VM User",
	"state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"internalname":       "VM Internal Name",
}
var CloudletVMSpecialArgs = map[string]string{}
var CloudletVMPoolRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolOptionalArgs = []string{
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
}
var CloudletVMPoolAliasArgs = []string{
	"fields=cloudletvmpool.fields",
	"cloudlet-org=cloudletvmpool.key.organization",
	"cloudlet=cloudletvmpool.key.name",
	"cloudletvms:#.name=cloudletvmpool.cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip=cloudletvmpool.cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip=cloudletvmpool.cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user=cloudletvmpool.cloudletvms:#.user",
	"cloudletvms:#.state=cloudletvmpool.cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds=cloudletvmpool.cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos=cloudletvmpool.cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname=cloudletvmpool.cloudletvms:#.internalname",
	"action=cloudletvmpool.action",
	"error=cloudletvmpool.error",
}
var CloudletVMPoolComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvms:#.internalname":       "VM Internal Name",
	"action":                           "Action performed on Cloudlet VM Pool, one of CloudletVmActionDone, CloudletVmActionAllocate, CloudletVmActionRelease",
	"error":                            "Errors if any",
}
var CloudletVMPoolSpecialArgs = map[string]string{
	"cloudletvmpool.fields": "StringArray",
}
var CloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.name",
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var CloudletVMPoolMemberAliasArgs = []string{
	"cloudlet-org=cloudletvmpoolmember.key.organization",
	"cloudlet=cloudletvmpoolmember.key.name",
	"cloudletvm.name=cloudletvmpoolmember.cloudletvm.name",
	"cloudletvm.netinfo.externalip=cloudletvmpoolmember.cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip=cloudletvmpoolmember.cloudletvm.netinfo.internalip",
	"cloudletvm.user=cloudletvmpoolmember.cloudletvm.user",
	"cloudletvm.state=cloudletvmpoolmember.cloudletvm.state",
	"cloudletvm.updatedat.seconds=cloudletvmpoolmember.cloudletvm.updatedat.seconds",
	"cloudletvm.updatedat.nanos=cloudletvmpoolmember.cloudletvm.updatedat.nanos",
	"cloudletvm.internalname=cloudletvmpoolmember.cloudletvm.internalname",
}
var CloudletVMPoolMemberComments = map[string]string{
	"cloudlet-org":                  "Organization of the cloudlet site",
	"cloudlet":                      "Name of the cloudlet",
	"cloudletvm.name":               "VM Name",
	"cloudletvm.netinfo.externalip": "External IP",
	"cloudletvm.netinfo.internalip": "Internal IP",
	"cloudletvm.user":               "VM User",
	"cloudletvm.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvm.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvm.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvm.internalname":       "VM Internal Name",
}
var CloudletVMPoolMemberSpecialArgs = map[string]string{}
var CloudletVMSpecRequiredArgs = []string{}
var CloudletVMSpecOptionalArgs = []string{
	"internalname",
	"externalnetwork",
	"internalnetwork",
}
var CloudletVMSpecAliasArgs = []string{
	"internalname=cloudletvmspec.internalname",
	"externalnetwork=cloudletvmspec.externalnetwork",
	"internalnetwork=cloudletvmspec.internalnetwork",
}
var CloudletVMSpecComments = map[string]string{
	"internalname":    "Cloudlet VM internal name",
	"externalnetwork": "Cloudlet VM has external network defined or not",
	"internalnetwork": "Cloudlet VM has internal network defined or not",
}
var CloudletVMSpecSpecialArgs = map[string]string{}
var CloudletVMPoolInfoRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolInfoOptionalArgs = []string{
	"action",
	"notifyid",
	"user",
	"vmspecs:#.internalname",
	"vmspecs:#.externalnetwork",
	"vmspecs:#.internalnetwork",
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user",
	"cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname",
	"error",
}
var CloudletVMPoolInfoAliasArgs = []string{
	"fields=cloudletvmpoolinfo.fields",
	"cloudlet-org=cloudletvmpoolinfo.key.organization",
	"cloudlet=cloudletvmpoolinfo.key.name",
	"action=cloudletvmpoolinfo.action",
	"notifyid=cloudletvmpoolinfo.notifyid",
	"user=cloudletvmpoolinfo.user",
	"vmspecs:#.internalname=cloudletvmpoolinfo.vmspecs:#.internalname",
	"vmspecs:#.externalnetwork=cloudletvmpoolinfo.vmspecs:#.externalnetwork",
	"vmspecs:#.internalnetwork=cloudletvmpoolinfo.vmspecs:#.internalnetwork",
	"cloudletvms:#.name=cloudletvmpoolinfo.cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip=cloudletvmpoolinfo.cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip=cloudletvmpoolinfo.cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user=cloudletvmpoolinfo.cloudletvms:#.user",
	"cloudletvms:#.state=cloudletvmpoolinfo.cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds=cloudletvmpoolinfo.cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos=cloudletvmpoolinfo.cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname=cloudletvmpoolinfo.cloudletvms:#.internalname",
	"error=cloudletvmpoolinfo.error",
}
var CloudletVMPoolInfoComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"action":                           "Action performed on Cloudlet VM Pool, one of CloudletVmActionDone, CloudletVmActionAllocate, CloudletVmActionRelease",
	"notifyid":                         "Id of client assigned by server (internal use only)",
	"user":                             "VM User",
	"vmspecs:#.internalname":           "Cloudlet VM internal name",
	"vmspecs:#.externalnetwork":        "Cloudlet VM has external network defined or not",
	"vmspecs:#.internalnetwork":        "Cloudlet VM has internal network defined or not",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvms:#.internalname":       "VM Internal Name",
	"error":                            "Errors if any",
}
var CloudletVMPoolInfoSpecialArgs = map[string]string{
	"cloudletvmpoolinfo.fields": "StringArray",
}
