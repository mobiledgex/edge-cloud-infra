// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var EnableDebugLevelsCmd = &cli.Command{
	Use:          "EnableDebugLevels",
	RequiredArgs: strings.Join(EnableDebugLevelsRequiredArgs, " "),
	OptionalArgs: strings.Join(EnableDebugLevelsOptionalArgs, " "),
	AliasArgs:    strings.Join(DebugRequestAliasArgs, " "),
	SpecialArgs:  &DebugRequestSpecialArgs,
	Comments:     addRegionComment(DebugRequestComments),
	ReqData:      &ormapi.RegionDebugRequest{},
	ReplyData:    &edgeproto.DebugReply{},
	Run:          runRest("/auth/ctrl/EnableDebugLevels"),
	StreamOut:    true,
}

var DisableDebugLevelsCmd = &cli.Command{
	Use:          "DisableDebugLevels",
	RequiredArgs: strings.Join(DisableDebugLevelsRequiredArgs, " "),
	OptionalArgs: strings.Join(DisableDebugLevelsOptionalArgs, " "),
	AliasArgs:    strings.Join(DebugRequestAliasArgs, " "),
	SpecialArgs:  &DebugRequestSpecialArgs,
	Comments:     addRegionComment(DebugRequestComments),
	ReqData:      &ormapi.RegionDebugRequest{},
	ReplyData:    &edgeproto.DebugReply{},
	Run:          runRest("/auth/ctrl/DisableDebugLevels"),
	StreamOut:    true,
}

var ShowDebugLevelsCmd = &cli.Command{
	Use:          "ShowDebugLevels",
	OptionalArgs: strings.Join(append(DebugRequestRequiredArgs, DebugRequestOptionalArgs...), " "),
	AliasArgs:    strings.Join(DebugRequestAliasArgs, " "),
	SpecialArgs:  &DebugRequestSpecialArgs,
	Comments:     addRegionComment(DebugRequestComments),
	ReqData:      &ormapi.RegionDebugRequest{},
	ReplyData:    &edgeproto.DebugReply{},
	Run:          runRest("/auth/ctrl/ShowDebugLevels"),
	StreamOut:    true,
}

var RunDebugCmd = &cli.Command{
	Use:          "RunDebug",
	RequiredArgs: strings.Join(RunDebugRequiredArgs, " "),
	OptionalArgs: strings.Join(RunDebugOptionalArgs, " "),
	AliasArgs:    strings.Join(DebugRequestAliasArgs, " "),
	SpecialArgs:  &DebugRequestSpecialArgs,
	Comments:     addRegionComment(DebugRequestComments),
	ReqData:      &ormapi.RegionDebugRequest{},
	ReplyData:    &edgeproto.DebugReply{},
	Run:          runRest("/auth/ctrl/RunDebug"),
	StreamOut:    true,
}

var DebugApiCmds = []*cli.Command{
	EnableDebugLevelsCmd,
	DisableDebugLevelsCmd,
	ShowDebugLevelsCmd,
	RunDebugCmd,
}

var EnableDebugLevelsRequiredArgs = []string{
	"levels",
}
var EnableDebugLevelsOptionalArgs = []string{
	"name",
	"type",
	"operator",
	"cloudlet",
	"region",
	"pretty",
	"id",
}
var DisableDebugLevelsRequiredArgs = []string{
	"levels",
}
var DisableDebugLevelsOptionalArgs = []string{
	"name",
	"type",
	"operator",
	"cloudlet",
	"region",
	"pretty",
	"id",
}
var ShowDebugLevelsRequiredArgs = []string{}
var ShowDebugLevelsOptionalArgs = []string{
	"name",
	"type",
	"operator",
	"cloudlet",
	"region",
	"pretty",
	"id",
}
var RunDebugRequiredArgs = []string{}
var RunDebugOptionalArgs = []string{
	"name",
	"type",
	"operator",
	"cloudlet",
	"region",
	"cmd",
	"pretty",
	"id",
}
var DebugRequestRequiredArgs = []string{}
var DebugRequestOptionalArgs = []string{
	"name",
	"type",
	"operator",
	"cloudlet",
	"region",
	"levels",
	"cmd",
	"pretty",
	"id",
}
var DebugRequestAliasArgs = []string{
	"name=debugrequest.node.name",
	"type=debugrequest.node.type",
	"operator=debugrequest.node.cloudletkey.operatorkey.name",
	"cloudlet=debugrequest.node.cloudletkey.name",
	"region=debugrequest.node.region",
	"levels=debugrequest.levels",
	"cmd=debugrequest.cmd",
	"pretty=debugrequest.pretty",
	"id=debugrequest.id",
}
var DebugRequestComments = map[string]string{
	"name":     "Name or hostname of node",
	"type":     "Node type",
	"operator": "Company or Organization name of the operator",
	"cloudlet": "Name of the cloudlet",
	"region":   "Region the node is in",
	"levels":   "Comma separated list of debug level names: etcd,api,notify,dmereq,locapi,mexos,metrics,upgrade,info,sampled",
	"cmd":      "Debug command",
	"pretty":   "if possible, make output pretty",
	"id":       "Id used internally",
}
var DebugRequestSpecialArgs = map[string]string{}
var DebugReplyRequiredArgs = []string{}
var DebugReplyOptionalArgs = []string{
	"node.name",
	"node.type",
	"node.cloudletkey.operatorkey.name",
	"node.cloudletkey.name",
	"node.region",
	"output",
	"id",
}
var DebugReplyAliasArgs = []string{
	"node.name=debugreply.node.name",
	"node.type=debugreply.node.type",
	"node.cloudletkey.operatorkey.name=debugreply.node.cloudletkey.operatorkey.name",
	"node.cloudletkey.name=debugreply.node.cloudletkey.name",
	"node.region=debugreply.node.region",
	"output=debugreply.output",
	"id=debugreply.id",
}
var DebugReplyComments = map[string]string{
	"node.name":                         "Name or hostname of node",
	"node.type":                         "Node type",
	"node.cloudletkey.operatorkey.name": "Company or Organization name of the operator",
	"node.cloudletkey.name":             "Name of the cloudlet",
	"node.region":                       "Region the node is in",
	"output":                            "Debug output, if any",
	"id":                                "Id used internally",
}
var DebugReplySpecialArgs = map[string]string{}
