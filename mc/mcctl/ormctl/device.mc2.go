// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var InjectDeviceCmd = &cli.Command{
	Use:          "InjectDevice",
	RequiredArgs: "region " + strings.Join(DeviceRequiredArgs, " "),
	OptionalArgs: strings.Join(DeviceOptionalArgs, " "),
	AliasArgs:    strings.Join(DeviceAliasArgs, " "),
	SpecialArgs:  &DeviceSpecialArgs,
	Comments:     addRegionComment(DeviceComments),
	ReqData:      &ormapi.RegionDevice{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/InjectDevice"),
}

var ShowDeviceCmd = &cli.Command{
	Use:          "ShowDevice",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(DeviceRequiredArgs, DeviceOptionalArgs...), " "),
	AliasArgs:    strings.Join(DeviceAliasArgs, " "),
	SpecialArgs:  &DeviceSpecialArgs,
	Comments:     addRegionComment(DeviceComments),
	ReqData:      &ormapi.RegionDevice{},
	ReplyData:    &edgeproto.Device{},
	Run:          runRest("/auth/ctrl/ShowDevice"),
	StreamOut:    true,
}

var EvictDeviceCmd = &cli.Command{
	Use:          "EvictDevice",
	RequiredArgs: "region " + strings.Join(DeviceRequiredArgs, " "),
	OptionalArgs: strings.Join(DeviceOptionalArgs, " "),
	AliasArgs:    strings.Join(DeviceAliasArgs, " "),
	SpecialArgs:  &DeviceSpecialArgs,
	Comments:     addRegionComment(DeviceComments),
	ReqData:      &ormapi.RegionDevice{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/EvictDevice"),
}

var ShowDeviceReportCmd = &cli.Command{
	Use:          "ShowDeviceReport",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(DeviceReportRequiredArgs, DeviceReportOptionalArgs...), " "),
	AliasArgs:    strings.Join(DeviceReportAliasArgs, " "),
	SpecialArgs:  &DeviceReportSpecialArgs,
	Comments:     addRegionComment(DeviceReportComments),
	ReqData:      &ormapi.RegionDeviceReport{},
	ReplyData:    &edgeproto.Device{},
	Run:          runRest("/auth/ctrl/ShowDeviceReport"),
	StreamOut:    true,
}

var DeviceApiCmds = []*cli.Command{
	InjectDeviceCmd,
	ShowDeviceCmd,
	EvictDeviceCmd,
	ShowDeviceReportCmd,
}

var DeviceReportRequiredArgs = []string{
	"key.uniqueidtype",
	"key.uniqueid",
}
var DeviceReportOptionalArgs = []string{
	"begin.seconds",
	"begin.nanos",
	"end.seconds",
	"end.nanos",
}
var DeviceReportAliasArgs = []string{
	"key.uniqueidtype=devicereport.key.uniqueidtype",
	"key.uniqueid=devicereport.key.uniqueid",
	"begin.seconds=devicereport.begin.seconds",
	"begin.nanos=devicereport.begin.nanos",
	"end.seconds=devicereport.end.seconds",
	"end.nanos=devicereport.end.nanos",
}
var DeviceReportComments = map[string]string{
	"key.uniqueidtype": "Type of unique ID provided by the client",
	"key.uniqueid":     "Unique identification of the client device or user. May be overridden by the server.",
	"begin.seconds":    "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"begin.nanos":      "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"end.seconds":      "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"end.nanos":        "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
}
var DeviceReportSpecialArgs = map[string]string{}
var DeviceKeyRequiredArgs = []string{}
var DeviceKeyOptionalArgs = []string{
	"uniqueidtype",
	"uniqueid",
}
var DeviceKeyAliasArgs = []string{
	"uniqueidtype=devicekey.uniqueidtype",
	"uniqueid=devicekey.uniqueid",
}
var DeviceKeyComments = map[string]string{
	"uniqueidtype": "Type of unique ID provided by the client",
	"uniqueid":     "Unique identification of the client device or user. May be overridden by the server.",
}
var DeviceKeySpecialArgs = map[string]string{}
var DeviceRequiredArgs = []string{
	"key.uniqueidtype",
	"key.uniqueid",
}
var DeviceOptionalArgs = []string{
	"firstseen.seconds",
	"firstseen.nanos",
	"lastseen.seconds",
	"lastseen.nanos",
	"notifyid",
}
var DeviceAliasArgs = []string{
	"fields=device.fields",
	"key.uniqueidtype=device.key.uniqueidtype",
	"key.uniqueid=device.key.uniqueid",
	"firstseen.seconds=device.firstseen.seconds",
	"firstseen.nanos=device.firstseen.nanos",
	"lastseen.seconds=device.lastseen.seconds",
	"lastseen.nanos=device.lastseen.nanos",
	"notifyid=device.notifyid",
}
var DeviceComments = map[string]string{
	"key.uniqueidtype":  "Type of unique ID provided by the client",
	"key.uniqueid":      "Unique identification of the client device or user. May be overridden by the server.",
	"firstseen.seconds": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"firstseen.nanos":   "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"lastseen.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"lastseen.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"notifyid":          "Id of client assigned by server (internal use only)",
}
var DeviceSpecialArgs = map[string]string{
	"device.fields": "StringArray",
}
