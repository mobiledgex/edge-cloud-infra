// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var RunCommandCmd = &cli.Command{
	Use:          "RunCommand",
	RequiredArgs: strings.Join(append([]string{"region"}, RunCommandRequiredArgs...), " "),
	OptionalArgs: strings.Join(RunCommandOptionalArgs, " "),
	AliasArgs:    strings.Join(ExecRequestAliasArgs, " "),
	SpecialArgs:  &ExecRequestSpecialArgs,
	Comments:     addRegionComment(ExecRequestComments),
	ReqData:      &ormapi.RegionExecRequest{},
	ReplyData:    &edgeproto.ExecRequest{},
	Run:          runRest("/auth/ctrl/RunCommand"),
}

var RunConsoleCmd = &cli.Command{
	Use:          "RunConsole",
	RequiredArgs: strings.Join(append([]string{"region"}, RunConsoleRequiredArgs...), " "),
	OptionalArgs: strings.Join(RunConsoleOptionalArgs, " "),
	AliasArgs:    strings.Join(ExecRequestAliasArgs, " "),
	SpecialArgs:  &ExecRequestSpecialArgs,
	Comments:     addRegionComment(ExecRequestComments),
	ReqData:      &ormapi.RegionExecRequest{},
	ReplyData:    &edgeproto.ExecRequest{},
	Run:          runRest("/auth/ctrl/RunConsole"),
}

var ShowLogsCmd = &cli.Command{
	Use:          "ShowLogs",
	RequiredArgs: strings.Join(append([]string{"region"}, ShowLogsRequiredArgs...), " "),
	OptionalArgs: strings.Join(ShowLogsOptionalArgs, " "),
	AliasArgs:    strings.Join(ExecRequestAliasArgs, " "),
	SpecialArgs:  &ExecRequestSpecialArgs,
	Comments:     addRegionComment(ExecRequestComments),
	ReqData:      &ormapi.RegionExecRequest{},
	ReplyData:    &edgeproto.ExecRequest{},
	Run:          runRest("/auth/ctrl/ShowLogs"),
}

var SetPowerStateCmd = &cli.Command{
	Use:          "SetPowerState",
	RequiredArgs: strings.Join(append([]string{"region"}, SetPowerStateRequiredArgs...), " "),
	OptionalArgs: strings.Join(SetPowerStateOptionalArgs, " "),
	AliasArgs:    strings.Join(ExecRequestAliasArgs, " "),
	SpecialArgs:  &ExecRequestSpecialArgs,
	Comments:     addRegionComment(ExecRequestComments),
	ReqData:      &ormapi.RegionExecRequest{},
	ReplyData:    &edgeproto.ExecRequest{},
	Run:          runRest("/auth/ctrl/SetPowerState"),
}

var ExecApiCmds = []*cli.Command{
	RunCommandCmd,
	RunConsoleCmd,
	ShowLogsCmd,
	SetPowerStateCmd,
}

var RunCommandRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
	"cluster",
	"operator",
	"cloudlet",
	"command",
}
var RunCommandOptionalArgs = []string{
	"clusterdeveloper",
	"containerid",
}
var RunConsoleRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
	"cluster",
	"operator",
	"cloudlet",
}
var RunConsoleOptionalArgs = []string{
	"clusterdeveloper",
	"containerid",
}
var ShowLogsRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
	"cluster",
	"operator",
	"cloudlet",
}
var ShowLogsOptionalArgs = []string{
	"clusterdeveloper",
	"containerid",
	"since",
	"tail",
	"timestamps",
	"follow",
}
var SetPowerStateRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
	"cluster",
	"operator",
	"cloudlet",
	"state",
}
var SetPowerStateOptionalArgs = []string{
	"clusterdeveloper",
	"containerid",
}
var RunCmdRequiredArgs = []string{}
var RunCmdOptionalArgs = []string{
	"command",
}
var RunCmdAliasArgs = []string{
	"command=runcmd.command",
}
var RunCmdComments = map[string]string{
	"command": "Command or Shell",
}
var RunCmdSpecialArgs = map[string]string{}
var RunVMConsoleRequiredArgs = []string{}
var RunVMConsoleOptionalArgs = []string{
	"url",
}
var RunVMConsoleAliasArgs = []string{
	"url=runvmconsole.url",
}
var RunVMConsoleComments = map[string]string{
	"url": "VM Console URL",
}
var RunVMConsoleSpecialArgs = map[string]string{}
var ShowLogRequiredArgs = []string{}
var ShowLogOptionalArgs = []string{
	"since",
	"tail",
	"timestamps",
	"follow",
}
var ShowLogAliasArgs = []string{
	"since=showlog.since",
	"tail=showlog.tail",
	"timestamps=showlog.timestamps",
	"follow=showlog.follow",
}
var ShowLogComments = map[string]string{
	"since":      "Show logs since either a duration ago (5s, 2m, 3h) or a timestamp (RFC3339)",
	"tail":       "Show only a recent number of lines",
	"timestamps": "Show timestamps",
	"follow":     "Stream data",
}
var ShowLogSpecialArgs = map[string]string{}
var PowerStateRequiredArgs = []string{}
var PowerStateOptionalArgs = []string{
	"state",
}
var PowerStateAliasArgs = []string{
	"state=powerstate.state",
}
var PowerStateComments = map[string]string{
	"state": "Power action to be perfomed on AppInst, one of PowerOn, PowerOff, Reboot",
}
var PowerStateSpecialArgs = map[string]string{}
var ExecRequestRequiredArgs = []string{
	"developer",
	"appname",
	"appvers",
	"cluster",
	"operator",
	"cloudlet",
	"clusterdeveloper",
}
var ExecRequestOptionalArgs = []string{
	"containerid",
	"command",
	"since",
	"tail",
	"timestamps",
	"follow",
	"state",
}
var ExecRequestAliasArgs = []string{
	"developer=execrequest.appinstkey.appkey.developerkey.name",
	"appname=execrequest.appinstkey.appkey.name",
	"appvers=execrequest.appinstkey.appkey.version",
	"cluster=execrequest.appinstkey.clusterinstkey.clusterkey.name",
	"operator=execrequest.appinstkey.clusterinstkey.cloudletkey.operatorkey.name",
	"cloudlet=execrequest.appinstkey.clusterinstkey.cloudletkey.name",
	"clusterdeveloper=execrequest.appinstkey.clusterinstkey.developer",
	"containerid=execrequest.containerid",
	"offer=execrequest.offer",
	"answer=execrequest.answer",
	"err=execrequest.err",
	"command=execrequest.cmd.command",
	"since=execrequest.log.since",
	"tail=execrequest.log.tail",
	"timestamps=execrequest.log.timestamps",
	"follow=execrequest.log.follow",
	"console.url=execrequest.console.url",
	"state=execrequest.powerstate.state",
	"timeout=execrequest.timeout",
}
var ExecRequestComments = map[string]string{
	"developer":        "Organization or Company Name that a Developer is part of",
	"appname":          "App name",
	"appvers":          "App version",
	"cluster":          "Cluster name",
	"operator":         "Company or Organization name of the operator",
	"cloudlet":         "Name of the cloudlet",
	"clusterdeveloper": "Name of Developer that this cluster belongs to",
	"containerid":      "ContainerId is the name or ID of the target container, if applicable",
	"offer":            "WebRTC Offer",
	"answer":           "WebRTC Answer",
	"err":              "Any error message",
	"command":          "Command or Shell",
	"since":            "Show logs since either a duration ago (5s, 2m, 3h) or a timestamp (RFC3339)",
	"tail":             "Show only a recent number of lines",
	"timestamps":       "Show timestamps",
	"follow":           "Stream data",
	"console.url":      "VM Console URL",
	"state":            "Power action to be perfomed on AppInst, one of PowerOn, PowerOff, Reboot",
	"timeout":          "Timeout",
}
var ExecRequestSpecialArgs = map[string]string{}
