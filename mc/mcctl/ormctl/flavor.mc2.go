// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateFlavorCmd = &cli.Command{
	Use:          "CreateFlavor",
	RequiredArgs: strings.Join(append([]string{"region"}, FlavorRequiredArgs...), " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateFlavor"),
}

var DeleteFlavorCmd = &cli.Command{
	Use:          "DeleteFlavor",
	RequiredArgs: strings.Join(append([]string{"region"}, FlavorRequiredArgs...), " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteFlavor"),
}

var UpdateFlavorCmd = &cli.Command{
	Use:          "UpdateFlavor",
	RequiredArgs: strings.Join(append([]string{"region"}, FlavorRequiredArgs...), " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateFlavor",
		withSetFieldsFunc(setUpdateFlavorFields),
	),
}

func setUpdateFlavorFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("Flavor")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	objmap["fields"] = cli.GetSpecifiedFields(objmap, &edgeproto.Flavor{}, cli.JsonNamespace)
}

var ShowFlavorCmd = &cli.Command{
	Use:          "ShowFlavor",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(FlavorRequiredArgs, FlavorOptionalArgs...), " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Flavor{},
	Run:          runRest("/auth/ctrl/ShowFlavor"),
	StreamOut:    true,
}

var AddFlavorResCmd = &cli.Command{
	Use:          "AddFlavorRes",
	RequiredArgs: strings.Join(append([]string{"region"}, FlavorRequiredArgs...), " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddFlavorRes"),
}

var RemoveFlavorResCmd = &cli.Command{
	Use:          "RemoveFlavorRes",
	RequiredArgs: strings.Join(append([]string{"region"}, FlavorRequiredArgs...), " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveFlavorRes"),
}

var FlavorApiCmds = []*cli.Command{
	CreateFlavorCmd,
	DeleteFlavorCmd,
	UpdateFlavorCmd,
	ShowFlavorCmd,
	AddFlavorResCmd,
	RemoveFlavorResCmd,
}

var FlavorKeyRequiredArgs = []string{}
var FlavorKeyOptionalArgs = []string{
	"name",
}
var FlavorKeyAliasArgs = []string{
	"name=flavorkey.name",
}
var FlavorKeyComments = map[string]string{
	"name": "Flavor name",
}
var FlavorKeySpecialArgs = map[string]string{}
var FlavorRequiredArgs = []string{
	"name",
	"ram",
	"vcpus",
	"disk",
}
var FlavorOptionalArgs = []string{
	"optresmap",
}
var FlavorAliasArgs = []string{
	"name=flavor.key.name",
	"ram=flavor.ram",
	"vcpus=flavor.vcpus",
	"disk=flavor.disk",
	"optresmap=flavor.optresmap",
}
var FlavorComments = map[string]string{
	"name":      "Flavor name",
	"ram":       "RAM in megabytes",
	"vcpus":     "Number of virtual CPUs",
	"disk":      "Amount of disk space in gigabytes",
	"optresmap": "Optional Resources request, key = [gpu, nas, nic]",
}
var FlavorSpecialArgs = map[string]string{
	"optresmap": "StringToString",
}
var OptResMapEntryRequiredArgs = []string{}
var OptResMapEntryOptionalArgs = []string{
	"key",
	"value",
}
var OptResMapEntryAliasArgs = []string{
	"key=optresmapentry.key",
	"value=optresmapentry.value",
}
var OptResMapEntryComments = map[string]string{}
var OptResMapEntrySpecialArgs = map[string]string{}
