// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateFlavorCmd = &cli.Command{
	Use:          "create",
	Short:        "Create a Flavor",
	RequiredArgs: "region " + strings.Join(CreateFlavorRequiredArgs, " "),
	OptionalArgs: strings.Join(CreateFlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateFlavor"),
}

var DeleteFlavorCmd = &cli.Command{
	Use:          "delete",
	Short:        "Delete a Flavor",
	RequiredArgs: "region " + strings.Join(FlavorRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteFlavor"),
}

var UpdateFlavorCmd = &cli.Command{
	Use:          "update",
	Short:        "Update a Flavor",
	RequiredArgs: "region " + strings.Join(FlavorRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateFlavor",
		withSetFieldsFunc(setUpdateFlavorFields),
	),
}

func setUpdateFlavorFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("Flavor")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.Flavor{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowFlavorCmd = &cli.Command{
	Use:          "show",
	Short:        "Show Flavors",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(FlavorRequiredArgs, FlavorOptionalArgs...), " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Flavor{},
	Run:          runRest("/auth/ctrl/ShowFlavor"),
	StreamOut:    true,
}

var AddFlavorResCmd = &cli.Command{
	Use:          "addres",
	Short:        "Add Optional Resource",
	RequiredArgs: "region " + strings.Join(FlavorRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddFlavorRes"),
}

var RemoveFlavorResCmd = &cli.Command{
	Use:          "removeres",
	Short:        "Remove Optional Resource",
	RequiredArgs: "region " + strings.Join(FlavorRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorAliasArgs, " "),
	SpecialArgs:  &FlavorSpecialArgs,
	Comments:     addRegionComment(FlavorComments),
	ReqData:      &ormapi.RegionFlavor{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveFlavorRes"),
}

var FlavorApiCmds = []*cli.Command{
	CreateFlavorCmd,
	DeleteFlavorCmd,
	UpdateFlavorCmd,
	ShowFlavorCmd,
	AddFlavorResCmd,
	RemoveFlavorResCmd,
}

var FlavorApiCmdsGroup = cli.GenGroup("flavor", "Manage Flavors", FlavorApiCmds)

var CreateFlavorRequiredArgs = []string{
	"name",
	"ram",
	"vcpus",
	"disk",
}
var CreateFlavorOptionalArgs = []string{
	"optresmap",
}
var FlavorKeyRequiredArgs = []string{}
var FlavorKeyOptionalArgs = []string{
	"name",
}
var FlavorKeyAliasArgs = []string{
	"name=flavorkey.name",
}
var FlavorKeyComments = map[string]string{
	"name": "Flavor name",
}
var FlavorKeySpecialArgs = map[string]string{}
var FlavorRequiredArgs = []string{
	"name",
}
var FlavorOptionalArgs = []string{
	"ram",
	"vcpus",
	"disk",
	"optresmap",
}
var FlavorAliasArgs = []string{
	"fields=flavor.fields",
	"name=flavor.key.name",
	"ram=flavor.ram",
	"vcpus=flavor.vcpus",
	"disk=flavor.disk",
	"optresmap=flavor.optresmap",
}
var FlavorComments = map[string]string{
	"fields":    "Fields are used for the Update API to specify which fields to apply",
	"name":      "Flavor name",
	"ram":       "RAM in megabytes",
	"vcpus":     "Number of virtual CPUs",
	"disk":      "Amount of disk space in gigabytes",
	"optresmap": "Optional Resources request, key = [gpu, nas, nic] gpu kinds: [gpu, vgpu, pci] form: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
}
var FlavorSpecialArgs = map[string]string{
	"flavor.fields":    "StringArray",
	"flavor.optresmap": "StringToString",
}
