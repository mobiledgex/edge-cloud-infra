// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gpu.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateGPUDriverCmd = &ApiCommand{
	Name:                 "CreateGPUDriver",
	Use:                  "create",
	Short:                "Create GPU Driver. Creates GPU driver with all the config required to install it.",
	RequiredArgs:         "region " + strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs:         strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:            strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:          &GPUDriverSpecialArgs,
	Comments:             addRegionComment(GPUDriverComments),
	NoConfig:             "State,LicenseConfigMd5sum",
	ReqData:              &ormapi.RegionGPUDriver{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/CreateGPUDriver",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var DeleteGPUDriverCmd = &ApiCommand{
	Name:                 "DeleteGPUDriver",
	Use:                  "delete",
	Short:                "Delete GPU Driver. Deletes GPU driver given that it is not used by any cloudlet.",
	RequiredArgs:         "region " + strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs:         strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:            strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:          &GPUDriverSpecialArgs,
	Comments:             addRegionComment(GPUDriverComments),
	NoConfig:             "State,LicenseConfigMd5sum",
	ReqData:              &ormapi.RegionGPUDriver{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/DeleteGPUDriver",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var UpdateGPUDriverCmd = &ApiCommand{
	Name:                 "UpdateGPUDriver",
	Use:                  "update",
	Short:                "Update GPU Driver. Updates GPU driver config.",
	RequiredArgs:         "region " + strings.Join(UpdateGPUDriverRequiredArgs, " "),
	OptionalArgs:         strings.Join(UpdateGPUDriverOptionalArgs, " "),
	AliasArgs:            strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:          &GPUDriverSpecialArgs,
	Comments:             addRegionComment(GPUDriverComments),
	NoConfig:             "State,LicenseConfigMd5sum,Builds",
	ReqData:              &ormapi.RegionGPUDriver{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/UpdateGPUDriver",
	SetFieldsFunc:        SetUpdateGPUDriverFields,
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

func SetUpdateGPUDriverFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in["GPUDriver"]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.GPUDriver{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowGPUDriverCmd = &ApiCommand{
	Name:                 "ShowGPUDriver",
	Use:                  "show",
	Short:                "Show GPU Drivers. Lists all the MobiledgeX created GPU drivers and operator created GPU drivers.",
	RequiredArgs:         "region",
	OptionalArgs:         strings.Join(append(GPUDriverRequiredArgs, GPUDriverOptionalArgs...), " "),
	AliasArgs:            strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:          &GPUDriverSpecialArgs,
	Comments:             addRegionComment(GPUDriverComments),
	NoConfig:             "State,LicenseConfigMd5sum",
	ReqData:              &ormapi.RegionGPUDriver{},
	ReplyData:            &edgeproto.GPUDriver{},
	Path:                 "/auth/ctrl/ShowGPUDriver",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var AddGPUDriverBuildCmd = &ApiCommand{
	Name:                 "AddGPUDriverBuild",
	Use:                  "addbuild",
	Short:                "Add GPU Driver Build. Adds new build to GPU driver.",
	RequiredArgs:         "region " + strings.Join(AddGPUDriverBuildRequiredArgs, " "),
	OptionalArgs:         strings.Join(AddGPUDriverBuildOptionalArgs, " "),
	AliasArgs:            strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:          &GPUDriverBuildMemberSpecialArgs,
	Comments:             addRegionComment(GPUDriverBuildMemberComments),
	ReqData:              &ormapi.RegionGPUDriverBuildMember{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/AddGPUDriverBuild",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var RemoveGPUDriverBuildCmd = &ApiCommand{
	Name:                 "RemoveGPUDriverBuild",
	Use:                  "removebuild",
	Short:                "Remove GPU Driver Build. Removes build from GPU driver.",
	RequiredArgs:         "region " + strings.Join(RemoveGPUDriverBuildRequiredArgs, " "),
	OptionalArgs:         strings.Join(RemoveGPUDriverBuildOptionalArgs, " "),
	AliasArgs:            strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:          &GPUDriverBuildMemberSpecialArgs,
	Comments:             addRegionComment(GPUDriverBuildMemberComments),
	NoConfig:             "Build.DriverPath,Build.OperatingSystem,Build.KernelVersion,Build.HypervisorInfo",
	ReqData:              &ormapi.RegionGPUDriverBuildMember{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/RemoveGPUDriverBuild",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var GetGPUDriverBuildURLCmd = &ApiCommand{
	Name:         "GetGPUDriverBuildURL",
	Use:          "getbuildurl",
	Short:        "Get GPU Driver Build URL. Returns a time-limited signed URL to download GPU driver.",
	RequiredArgs: "region " + strings.Join(GetGPUDriverBuildURLRequiredArgs, " "),
	OptionalArgs: strings.Join(GetGPUDriverBuildURLOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     addRegionComment(GPUDriverBuildMemberComments),
	NoConfig:     "Build.DriverPath,Build.OperatingSystem,Build.KernelVersion,Build.HypervisorInfo",
	ReqData:      &ormapi.RegionGPUDriverBuildMember{},
	ReplyData:    &edgeproto.GPUDriverBuildURL{},
	Path:         "/auth/ctrl/GetGPUDriverBuildURL",
	ProtobufApi:  true,
}

var GPUDriverApiCmds = []*ApiCommand{
	CreateGPUDriverCmd,
	DeleteGPUDriverCmd,
	UpdateGPUDriverCmd,
	ShowGPUDriverCmd,
	AddGPUDriverBuildCmd,
	RemoveGPUDriverBuildCmd,
	GetGPUDriverBuildURLCmd,
}

const GPUDriverGroup = "GPUDriver"

func init() {
	AllApis.AddGroup(GPUDriverGroup, "Manage GPUDrivers", GPUDriverApiCmds)
}

var UpdateGPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var UpdateGPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"type",
	"licenseconfig",
	"licenseconfigmd5sum",
	"properties",
	"ignorestate",
}
var AddGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
	"build.driverpath",
	"build.operatingsystem",
	"build.md5sum",
}
var AddGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.kernelversion",
	"build.hypervisorinfo",
	"ignorestate",
}
var RemoveGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var RemoveGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.md5sum",
	"ignorestate",
}
var GetGPUDriverBuildURLRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var GetGPUDriverBuildURLOptionalArgs = []string{
	"build.driverpathcreds",
	"build.md5sum",
	"ignorestate",
}
var GPUDriverKeyRequiredArgs = []string{}
var GPUDriverKeyOptionalArgs = []string{
	"name",
	"organization",
}
var GPUDriverKeyAliasArgs = []string{
	"name=gpudriverkey.name",
	"organization=gpudriverkey.organization",
}
var GPUDriverKeyComments = map[string]string{
	"name":         "Name of the driver",
	"organization": "Organization to which the driver belongs to",
}
var GPUDriverKeySpecialArgs = map[string]string{}
var GPUDriverBuildMemberRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
}
var GPUDriverBuildMemberOptionalArgs = []string{
	"build.name",
	"build.driverpath",
	"build.driverpathcreds",
	"build.operatingsystem",
	"build.kernelversion",
	"build.hypervisorinfo",
	"build.md5sum",
	"ignorestate",
}
var GPUDriverBuildMemberAliasArgs = []string{
	"gpudrivername=gpudriverbuildmember.key.name",
	"gpudriver-org=gpudriverbuildmember.key.organization",
	"build.name=gpudriverbuildmember.build.name",
	"build.driverpath=gpudriverbuildmember.build.driverpath",
	"build.driverpathcreds=gpudriverbuildmember.build.driverpathcreds",
	"build.operatingsystem=gpudriverbuildmember.build.operatingsystem",
	"build.kernelversion=gpudriverbuildmember.build.kernelversion",
	"build.hypervisorinfo=gpudriverbuildmember.build.hypervisorinfo",
	"build.md5sum=gpudriverbuildmember.build.md5sum",
	"ignorestate=gpudriverbuildmember.ignorestate",
}
var GPUDriverBuildMemberComments = map[string]string{
	"gpudrivername":         "Name of the driver",
	"gpudriver-org":         "Organization to which the driver belongs to",
	"build.name":            "Unique identifier key",
	"build.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"build.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"build.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"build.kernelversion":   "Kernel Version supported by GPU driver build",
	"build.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"build.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"ignorestate":           "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverBuildMemberSpecialArgs = map[string]string{}
var GPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var GPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"type",
	"builds:#.name",
	"builds:#.driverpath",
	"builds:#.driverpathcreds",
	"builds:#.operatingsystem",
	"builds:#.kernelversion",
	"builds:#.hypervisorinfo",
	"builds:#.md5sum",
	"licenseconfig",
	"licenseconfigmd5sum",
	"properties",
	"ignorestate",
}
var GPUDriverAliasArgs = []string{
	"fields=gpudriver.fields",
	"gpudrivername=gpudriver.key.name",
	"gpudriver-org=gpudriver.key.organization",
	"type=gpudriver.type",
	"builds:#.name=gpudriver.builds:#.name",
	"builds:#.driverpath=gpudriver.builds:#.driverpath",
	"builds:#.driverpathcreds=gpudriver.builds:#.driverpathcreds",
	"builds:#.operatingsystem=gpudriver.builds:#.operatingsystem",
	"builds:#.kernelversion=gpudriver.builds:#.kernelversion",
	"builds:#.hypervisorinfo=gpudriver.builds:#.hypervisorinfo",
	"builds:#.md5sum=gpudriver.builds:#.md5sum",
	"licenseconfig=gpudriver.licenseconfig",
	"licenseconfigmd5sum=gpudriver.licenseconfigmd5sum",
	"properties=gpudriver.properties",
	"state=gpudriver.state",
	"ignorestate=gpudriver.ignorestate",
}
var GPUDriverComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"gpudrivername":            "Name of the driver",
	"gpudriver-org":            "Organization to which the driver belongs to",
	"type":                     "Type of GPU hardware, one of GpuTypeNone, GpuTypePassthrough, GpuTypeVgpu",
	"builds:#.name":            "Unique identifier key",
	"builds:#.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"builds:#.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"builds:#.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"builds:#.kernelversion":   "Kernel Version supported by GPU driver build",
	"builds:#.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"builds:#.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"licenseconfig":            "License config to setup license (will be stored in secure storage)",
	"licenseconfigmd5sum":      "License config md5sum, to ensure integrity of license config",
	"properties":               "Additional properties associated with GPU driver build For example: license server information, driver release date, etc",
	"state":                    "State to figure out if any action on the GPU driver is in-progress",
	"ignorestate":              "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverSpecialArgs = map[string]string{
	"gpudriver.fields":     "StringArray",
	"gpudriver.properties": "StringToString",
}
