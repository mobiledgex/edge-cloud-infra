// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateNetworkCmd = &ApiCommand{
	Name:         "CreateNetwork",
	Use:          "create",
	Short:        "Create a Network",
	RequiredArgs: "region " + strings.Join(NetworkRequiredArgs, " "),
	OptionalArgs: strings.Join(NetworkOptionalArgs, " "),
	AliasArgs:    strings.Join(NetworkAliasArgs, " "),
	SpecialArgs:  &NetworkSpecialArgs,
	Comments:     addRegionComment(NetworkComments),
	NoConfig:     "DeletePrepare",
	ReqData:      &ormapi.RegionNetwork{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/CreateNetwork",
	StreamOut:    true,
	ProtobufApi:  true,
}

var DeleteNetworkCmd = &ApiCommand{
	Name:                 "DeleteNetwork",
	Use:                  "delete",
	Short:                "Delete a Network",
	RequiredArgs:         "region " + strings.Join(NetworkRequiredArgs, " "),
	OptionalArgs:         strings.Join(NetworkOptionalArgs, " "),
	AliasArgs:            strings.Join(NetworkAliasArgs, " "),
	SpecialArgs:          &NetworkSpecialArgs,
	Comments:             addRegionComment(NetworkComments),
	NoConfig:             "DeletePrepare",
	ReqData:              &ormapi.RegionNetwork{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/DeleteNetwork",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var UpdateNetworkCmd = &ApiCommand{
	Name:                 "UpdateNetwork",
	Use:                  "update",
	Short:                "Update a Network",
	RequiredArgs:         "region " + strings.Join(NetworkRequiredArgs, " "),
	OptionalArgs:         strings.Join(NetworkOptionalArgs, " "),
	AliasArgs:            strings.Join(NetworkAliasArgs, " "),
	SpecialArgs:          &NetworkSpecialArgs,
	Comments:             addRegionComment(NetworkComments),
	NoConfig:             "DeletePrepare",
	ReqData:              &ormapi.RegionNetwork{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/UpdateNetwork",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var ShowNetworkCmd = &ApiCommand{
	Name:         "ShowNetwork",
	Use:          "show",
	Short:        "Show Networks. Any fields specified will be used to filter results.",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(NetworkRequiredArgs, NetworkOptionalArgs...), " "),
	AliasArgs:    strings.Join(NetworkAliasArgs, " "),
	SpecialArgs:  &NetworkSpecialArgs,
	Comments:     addRegionComment(NetworkComments),
	NoConfig:     "DeletePrepare",
	ReqData:      &ormapi.RegionNetwork{},
	ReplyData:    &edgeproto.Network{},
	Path:         "/auth/ctrl/ShowNetwork",
	StreamOut:    true,
	ProtobufApi:  true,
}
var NetworkApiCmds = []*ApiCommand{
	CreateNetworkCmd,
	DeleteNetworkCmd,
	UpdateNetworkCmd,
	ShowNetworkCmd,
}

const NetworkGroup = "Network"

func init() {
	AllApis.AddGroup(NetworkGroup, "Manage Networks", NetworkApiCmds)
}

var NetworkRequiredArgs = []string{
	"cloudlet-org",
	"key.cloudletkey.name",
	"name",
}
var NetworkOptionalArgs = []string{
	"routes:empty",
	"routes:#.destinationcidr",
	"routes:#.nexthopip",
	"connectiontype",
}
var NetworkAliasArgs = []string{
	"fields=network.fields",
	"cloudlet-org=network.key.cloudletkey.organization",
	"key.cloudletkey.name=network.key.cloudletkey.name",
	"name=network.key.name",
	"routes:empty=network.routes:empty",
	"routes:#.destinationcidr=network.routes:#.destinationcidr",
	"routes:#.nexthopip=network.routes:#.nexthopip",
	"connectiontype=network.connectiontype",
	"deleteprepare=network.deleteprepare",
}
var NetworkComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":             "Organization of the cloudlet site",
	"key.cloudletkey.name":     "Name of the cloudlet",
	"name":                     "Network Name",
	"routes:empty":             "List of routes, specify routes:empty=true to clear",
	"routes:#.destinationcidr": "Destination CIDR",
	"routes:#.nexthopip":       "Next hop IP",
	"connectiontype":           "Network connection type, one of Undefined, ConnectToLoadBalancer, ConnectToClusterNodes, ConnectToAll",
	"deleteprepare":            "Preparing to be deleted",
}
var NetworkSpecialArgs = map[string]string{
	"network.fields": "StringArray",
}
