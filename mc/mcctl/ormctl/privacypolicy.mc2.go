// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacypolicy.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreatePrivacyPolicyCmd = &cli.Command{
	Use:          "CreatePrivacyPolicy",
	RequiredArgs: "region " + strings.Join(PrivacyPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(PrivacyPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(PrivacyPolicyAliasArgs, " "),
	SpecialArgs:  &PrivacyPolicySpecialArgs,
	Comments:     addRegionComment(PrivacyPolicyComments),
	ReqData:      &ormapi.RegionPrivacyPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreatePrivacyPolicy"),
}

var DeletePrivacyPolicyCmd = &cli.Command{
	Use:          "DeletePrivacyPolicy",
	RequiredArgs: "region " + strings.Join(PrivacyPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(PrivacyPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(PrivacyPolicyAliasArgs, " "),
	SpecialArgs:  &PrivacyPolicySpecialArgs,
	Comments:     addRegionComment(PrivacyPolicyComments),
	ReqData:      &ormapi.RegionPrivacyPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeletePrivacyPolicy"),
}

var UpdatePrivacyPolicyCmd = &cli.Command{
	Use:          "UpdatePrivacyPolicy",
	RequiredArgs: "region " + strings.Join(PrivacyPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(PrivacyPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(PrivacyPolicyAliasArgs, " "),
	SpecialArgs:  &PrivacyPolicySpecialArgs,
	Comments:     addRegionComment(PrivacyPolicyComments),
	ReqData:      &ormapi.RegionPrivacyPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdatePrivacyPolicy",
		withSetFieldsFunc(setUpdatePrivacyPolicyFields),
	),
}

func setUpdatePrivacyPolicyFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("PrivacyPolicy")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.PrivacyPolicy{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowPrivacyPolicyCmd = &cli.Command{
	Use:          "ShowPrivacyPolicy",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(PrivacyPolicyRequiredArgs, PrivacyPolicyOptionalArgs...), " "),
	AliasArgs:    strings.Join(PrivacyPolicyAliasArgs, " "),
	SpecialArgs:  &PrivacyPolicySpecialArgs,
	Comments:     addRegionComment(PrivacyPolicyComments),
	ReqData:      &ormapi.RegionPrivacyPolicy{},
	ReplyData:    &edgeproto.PrivacyPolicy{},
	Run:          runRest("/auth/ctrl/ShowPrivacyPolicy"),
	StreamOut:    true,
}

var PrivacyPolicyApiCmds = []*cli.Command{
	CreatePrivacyPolicyCmd,
	DeletePrivacyPolicyCmd,
	UpdatePrivacyPolicyCmd,
	ShowPrivacyPolicyCmd,
}

var SecurityRuleRequiredArgs = []string{}
var SecurityRuleOptionalArgs = []string{
	"protocol",
	"portrangemin",
	"portrangemax",
	"remotecidr",
}
var SecurityRuleAliasArgs = []string{
	"protocol=securityrule.protocol",
	"portrangemin=securityrule.portrangemin",
	"portrangemax=securityrule.portrangemax",
	"remotecidr=securityrule.remotecidr",
}
var SecurityRuleComments = map[string]string{
	"protocol":     "tcp, udp, icmp",
	"portrangemin": "TCP or UDP port range start",
	"portrangemax": "TCP or UDP port range end",
	"remotecidr":   "remote CIDR X.X.X.X/X",
}
var SecurityRuleSpecialArgs = map[string]string{}
var PrivacyPolicyRequiredArgs = []string{
	"cloudlet-org",
	"name",
}
var PrivacyPolicyOptionalArgs = []string{
	"outboundsecurityrules:#.protocol",
	"outboundsecurityrules:#.portrangemin",
	"outboundsecurityrules:#.portrangemax",
	"outboundsecurityrules:#.remotecidr",
	"inboundsecurityrules:#.protocol",
	"inboundsecurityrules:#.portrangemin",
	"inboundsecurityrules:#.portrangemax",
	"inboundsecurityrules:#.remotecidr",
}
var PrivacyPolicyAliasArgs = []string{
	"fields=privacypolicy.fields",
	"cloudlet-org=privacypolicy.key.organization",
	"name=privacypolicy.key.name",
	"outboundsecurityrules:#.protocol=privacypolicy.outboundsecurityrules:#.protocol",
	"outboundsecurityrules:#.portrangemin=privacypolicy.outboundsecurityrules:#.portrangemin",
	"outboundsecurityrules:#.portrangemax=privacypolicy.outboundsecurityrules:#.portrangemax",
	"outboundsecurityrules:#.remotecidr=privacypolicy.outboundsecurityrules:#.remotecidr",
	"inboundsecurityrules:#.protocol=privacypolicy.inboundsecurityrules:#.protocol",
	"inboundsecurityrules:#.portrangemin=privacypolicy.inboundsecurityrules:#.portrangemin",
	"inboundsecurityrules:#.portrangemax=privacypolicy.inboundsecurityrules:#.portrangemax",
	"inboundsecurityrules:#.remotecidr=privacypolicy.inboundsecurityrules:#.remotecidr",
}
var PrivacyPolicyComments = map[string]string{
	"fields":                               "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                         "Name of the organization for the cluster that this policy will apply to",
	"name":                                 "Policy name",
	"outboundsecurityrules:#.protocol":     "tcp, udp, icmp",
	"outboundsecurityrules:#.portrangemin": "TCP or UDP port range start",
	"outboundsecurityrules:#.portrangemax": "TCP or UDP port range end",
	"outboundsecurityrules:#.remotecidr":   "remote CIDR X.X.X.X/X",
	"inboundsecurityrules:#.protocol":      "tcp, udp, icmp",
	"inboundsecurityrules:#.portrangemin":  "TCP or UDP port range start",
	"inboundsecurityrules:#.portrangemax":  "TCP or UDP port range end",
	"inboundsecurityrules:#.remotecidr":    "remote CIDR X.X.X.X/X",
}
var PrivacyPolicySpecialArgs = map[string]string{
	"privacypolicy.fields": "StringArray",
}
