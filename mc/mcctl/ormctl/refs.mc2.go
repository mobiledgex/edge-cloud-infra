// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: refs.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var ShowCloudletRefsCmd = &Command{
	Use:          "ShowCloudletRefs",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletRefsRequiredArgs, CloudletRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletRefsAliasArgs, " "),
	SpecialArgs:  &CloudletRefsSpecialArgs,
	ReqData:      &ormapi.RegionCloudletRefs{},
	ReplyData:    &edgeproto.CloudletRefs{},
	Path:         "/auth/ctrl/ShowCloudletRefs",
	StreamOut:    true,
}
var CloudletRefsApiCmds = []*Command{
	ShowCloudletRefsCmd,
}

var ShowClusterRefsCmd = &Command{
	Use:          "ShowClusterRefs",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(ClusterRefsRequiredArgs, ClusterRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(ClusterRefsAliasArgs, " "),
	SpecialArgs:  &ClusterRefsSpecialArgs,
	ReqData:      &ormapi.RegionClusterRefs{},
	ReplyData:    &edgeproto.ClusterRefs{},
	Path:         "/auth/ctrl/ShowClusterRefs",
	StreamOut:    true,
}
var ClusterRefsApiCmds = []*Command{
	ShowClusterRefsCmd,
}

var CloudletRefsRequiredArgs = []string{
	"key.operatorkey.name",
	"key.name",
}
var CloudletRefsOptionalArgs = []string{
	"clusters.name",
	"usedram",
	"usedvcores",
	"useddisk",
	"rootlbports.key",
	"rootlbports.value",
	"useddynamicips",
	"usedstaticips",
}
var CloudletRefsAliasArgs = []string{
	"key.operatorkey.name=cloudletrefs.key.operatorkey.name",
	"key.name=cloudletrefs.key.name",
	"clusters.name=cloudletrefs.clusters.name",
	"usedram=cloudletrefs.usedram",
	"usedvcores=cloudletrefs.usedvcores",
	"useddisk=cloudletrefs.useddisk",
	"rootlbports.key=cloudletrefs.rootlbports.key",
	"rootlbports.value=cloudletrefs.rootlbports.value",
	"useddynamicips=cloudletrefs.useddynamicips",
	"usedstaticips=cloudletrefs.usedstaticips",
}
var CloudletRefsSpecialArgs = map[string]string{}
var RootLbPortsEntryRequiredArgs = []string{}
var RootLbPortsEntryOptionalArgs = []string{
	"key",
	"value",
}
var RootLbPortsEntryAliasArgs = []string{
	"key=rootlbportsentry.key",
	"value=rootlbportsentry.value",
}
var RootLbPortsEntrySpecialArgs = map[string]string{}
var ClusterRefsRequiredArgs = []string{
	"key.clusterkey.name",
	"key.cloudletkey.operatorkey.name",
	"key.cloudletkey.name",
	"key.developer",
}
var ClusterRefsOptionalArgs = []string{
	"apps.developerkey.name",
	"apps.name",
	"apps.version",
	"usedram",
	"usedvcores",
	"useddisk",
}
var ClusterRefsAliasArgs = []string{
	"key.clusterkey.name=clusterrefs.key.clusterkey.name",
	"key.cloudletkey.operatorkey.name=clusterrefs.key.cloudletkey.operatorkey.name",
	"key.cloudletkey.name=clusterrefs.key.cloudletkey.name",
	"key.developer=clusterrefs.key.developer",
	"apps.developerkey.name=clusterrefs.apps.developerkey.name",
	"apps.name=clusterrefs.apps.name",
	"apps.version=clusterrefs.apps.version",
	"usedram=clusterrefs.usedram",
	"usedvcores=clusterrefs.usedvcores",
	"useddisk=clusterrefs.useddisk",
}
var ClusterRefsSpecialArgs = map[string]string{}
