// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: refs.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var ShowCloudletRefsCmd = &cli.Command{
	Use:          "ShowCloudletRefs",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletRefsRequiredArgs, CloudletRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletRefsAliasArgs, " "),
	SpecialArgs:  &CloudletRefsSpecialArgs,
	Comments:     addRegionComment(CloudletRefsComments),
	ReqData:      &ormapi.RegionCloudletRefs{},
	ReplyData:    &edgeproto.CloudletRefs{},
	Run:          runRest("/auth/ctrl/ShowCloudletRefs"),
	StreamOut:    true,
}

var CloudletRefsApiCmds = []*cli.Command{
	ShowCloudletRefsCmd,
}

var ShowClusterRefsCmd = &cli.Command{
	Use:          "ShowClusterRefs",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(ClusterRefsRequiredArgs, ClusterRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(ClusterRefsAliasArgs, " "),
	SpecialArgs:  &ClusterRefsSpecialArgs,
	Comments:     addRegionComment(ClusterRefsComments),
	ReqData:      &ormapi.RegionClusterRefs{},
	ReplyData:    &edgeproto.ClusterRefs{},
	Run:          runRest("/auth/ctrl/ShowClusterRefs"),
	StreamOut:    true,
}

var ClusterRefsApiCmds = []*cli.Command{
	ShowClusterRefsCmd,
}

var ShowAppInstRefsCmd = &cli.Command{
	Use:          "ShowAppInstRefs",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(AppInstRefsRequiredArgs, AppInstRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(AppInstRefsAliasArgs, " "),
	SpecialArgs:  &AppInstRefsSpecialArgs,
	Comments:     addRegionComment(AppInstRefsComments),
	ReqData:      &ormapi.RegionAppInstRefs{},
	ReplyData:    &edgeproto.AppInstRefs{},
	Run:          runRest("/auth/ctrl/ShowAppInstRefs"),
	StreamOut:    true,
}

var AppInstRefsApiCmds = []*cli.Command{
	ShowAppInstRefsCmd,
}

var VMResourceRequiredArgs = []string{
	"key.clusterkey.name",
	"key.cloudletkey.organization",
	"key.cloudletkey.name",
	"key.organization",
}
var VMResourceOptionalArgs = []string{
	"vmflavor.name",
	"vmflavor.vcpus",
	"vmflavor.ram",
	"vmflavor.disk",
	"vmflavor.propmap",
	"type",
	"appaccesstype",
}
var VMResourceAliasArgs = []string{
	"key.clusterkey.name=vmresource.key.clusterkey.name",
	"key.cloudletkey.organization=vmresource.key.cloudletkey.organization",
	"key.cloudletkey.name=vmresource.key.cloudletkey.name",
	"key.organization=vmresource.key.organization",
	"vmflavor.name=vmresource.vmflavor.name",
	"vmflavor.vcpus=vmresource.vmflavor.vcpus",
	"vmflavor.ram=vmresource.vmflavor.ram",
	"vmflavor.disk=vmresource.vmflavor.disk",
	"vmflavor.propmap=vmresource.vmflavor.propmap",
	"type=vmresource.type",
	"appaccesstype=vmresource.appaccesstype",
}
var VMResourceComments = map[string]string{
	"key.clusterkey.name":          "Cluster name",
	"key.cloudletkey.organization": "Organization of the cloudlet site",
	"key.cloudletkey.name":         "Name of the cloudlet",
	"key.organization":             "Name of Developer organization that this cluster belongs to",
	"vmflavor.name":                "Name of the flavor on the Cloudlet",
	"vmflavor.vcpus":               "Number of VCPU cores on the Cloudlet",
	"vmflavor.ram":                 "Ram in MB on the Cloudlet",
	"vmflavor.disk":                "Amount of disk in GB on the Cloudlet",
	"vmflavor.propmap":             "OS Flavor Properties, if any",
	"type":                         "Resource Type can be platform, rootlb, cluster-master, cluster-node, vmapp",
	"appaccesstype":                "Access type for resource of type App VM, one of AccessTypeDefaultForDeployment, AccessTypeDirect, AccessTypeLoadBalancer",
}
var VMResourceSpecialArgs = map[string]string{
	"vmresource.vmflavor.propmap": "StringToString",
}
var CloudletRefsRequiredArgs = []string{
	"key.organization",
	"key.name",
}
var CloudletRefsOptionalArgs = []string{
	"usedram",
	"usedvcores",
	"useddisk",
	"rootlbports:#.key",
	"rootlbports:#.value",
	"useddynamicips",
	"usedstaticips",
	"optresusedmap:#.key",
	"optresusedmap:#.value",
	"clusterinsts:#.clusterkey.name",
	"clusterinsts:#.organization",
	"vmappinsts:#.appkey.organization",
	"vmappinsts:#.appkey.name",
	"vmappinsts:#.appkey.version",
	"vmappinsts:#.clusterinstkey.clusterkey.name",
	"vmappinsts:#.clusterinstkey.organization",
}
var CloudletRefsAliasArgs = []string{
	"key.organization=cloudletrefs.key.organization",
	"key.name=cloudletrefs.key.name",
	"usedram=cloudletrefs.usedram",
	"usedvcores=cloudletrefs.usedvcores",
	"useddisk=cloudletrefs.useddisk",
	"rootlbports:#.key=cloudletrefs.rootlbports:#.key",
	"rootlbports:#.value=cloudletrefs.rootlbports:#.value",
	"useddynamicips=cloudletrefs.useddynamicips",
	"usedstaticips=cloudletrefs.usedstaticips",
	"optresusedmap:#.key=cloudletrefs.optresusedmap:#.key",
	"optresusedmap:#.value=cloudletrefs.optresusedmap:#.value",
	"clusterinsts:#.clusterkey.name=cloudletrefs.clusterinsts:#.clusterkey.name",
	"clusterinsts:#.organization=cloudletrefs.clusterinsts:#.organization",
	"vmappinsts:#.appkey.organization=cloudletrefs.vmappinsts:#.appkey.organization",
	"vmappinsts:#.appkey.name=cloudletrefs.vmappinsts:#.appkey.name",
	"vmappinsts:#.appkey.version=cloudletrefs.vmappinsts:#.appkey.version",
	"vmappinsts:#.clusterinstkey.clusterkey.name=cloudletrefs.vmappinsts:#.clusterinstkey.clusterkey.name",
	"vmappinsts:#.clusterinstkey.organization=cloudletrefs.vmappinsts:#.clusterinstkey.organization",
}
var CloudletRefsComments = map[string]string{
	"key.organization":                 "Organization of the cloudlet site",
	"key.name":                         "Name of the cloudlet",
	"usedram":                          "Used RAM in MB",
	"usedvcores":                       "Used VCPU cores",
	"useddisk":                         "Used disk in GB",
	"useddynamicips":                   "Used dynamic IPs",
	"usedstaticips":                    "Used static IPs",
	"clusterinsts:#.clusterkey.name":   "Cluster name",
	"clusterinsts:#.organization":      "Name of Developer organization that this cluster belongs to",
	"vmappinsts:#.appkey.organization": "App developer organization",
	"vmappinsts:#.appkey.name":         "App name",
	"vmappinsts:#.appkey.version":      "App version",
	"vmappinsts:#.clusterinstkey.clusterkey.name": "Cluster name",
	"vmappinsts:#.clusterinstkey.organization":    "Name of Developer organization that this cluster belongs to",
}
var CloudletRefsSpecialArgs = map[string]string{}
var ClusterRefsRequiredArgs = []string{
	"key.clusterkey.name",
	"key.cloudletkey.organization",
	"key.cloudletkey.name",
	"key.organization",
}
var ClusterRefsOptionalArgs = []string{
	"apps:#.organization",
	"apps:#.name",
	"apps:#.version",
	"usedram",
	"usedvcores",
	"useddisk",
}
var ClusterRefsAliasArgs = []string{
	"key.clusterkey.name=clusterrefs.key.clusterkey.name",
	"key.cloudletkey.organization=clusterrefs.key.cloudletkey.organization",
	"key.cloudletkey.name=clusterrefs.key.cloudletkey.name",
	"key.organization=clusterrefs.key.organization",
	"apps:#.organization=clusterrefs.apps:#.organization",
	"apps:#.name=clusterrefs.apps:#.name",
	"apps:#.version=clusterrefs.apps:#.version",
	"usedram=clusterrefs.usedram",
	"usedvcores=clusterrefs.usedvcores",
	"useddisk=clusterrefs.useddisk",
}
var ClusterRefsComments = map[string]string{
	"key.clusterkey.name":          "Cluster name",
	"key.cloudletkey.organization": "Organization of the cloudlet site",
	"key.cloudletkey.name":         "Name of the cloudlet",
	"key.organization":             "Name of Developer organization that this cluster belongs to",
	"apps:#.organization":          "App developer organization",
	"apps:#.name":                  "App name",
	"apps:#.version":               "App version",
	"usedram":                      "Used RAM in MB",
	"usedvcores":                   "Used VCPU cores",
	"useddisk":                     "Used disk in GB",
}
var ClusterRefsSpecialArgs = map[string]string{}
var AppInstRefsRequiredArgs = []string{
	"key.organization",
	"key.name",
	"key.version",
}
var AppInstRefsOptionalArgs = []string{
	"insts:#.key",
	"insts:#.value",
}
var AppInstRefsAliasArgs = []string{
	"key.organization=appinstrefs.key.organization",
	"key.name=appinstrefs.key.name",
	"key.version=appinstrefs.key.version",
	"insts:#.key=appinstrefs.insts:#.key",
	"insts:#.value=appinstrefs.insts:#.value",
}
var AppInstRefsComments = map[string]string{
	"key.organization": "App developer organization",
	"key.name":         "App name",
	"key.version":      "App version",
}
var AppInstRefsSpecialArgs = map[string]string{}
