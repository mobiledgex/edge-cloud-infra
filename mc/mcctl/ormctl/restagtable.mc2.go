// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateResTagTableCmd = &cli.Command{
	Use:          "CreateResTagTable",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateResTagTable"),
}

var DeleteResTagTableCmd = &cli.Command{
	Use:          "DeleteResTagTable",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteResTagTable"),
}

var UpdateResTagTableCmd = &cli.Command{
	Use:          "UpdateResTagTable",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateResTagTable",
		withSetFieldsFunc(setUpdateResTagTableFields),
	),
}

func setUpdateResTagTableFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("ResTagTable")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	objmap["fields"] = cli.GetSpecifiedFields(objmap, &edgeproto.ResTagTable{}, cli.JsonNamespace)
}

var ShowResTagTableCmd = &cli.Command{
	Use:          "ShowResTagTable",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(ResTagTableRequiredArgs, ResTagTableOptionalArgs...), " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.ResTagTable{},
	Run:          runRest("/auth/ctrl/ShowResTagTable"),
	StreamOut:    true,
}

var AddResTagCmd = &cli.Command{
	Use:          "AddResTag",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddResTag"),
}

var RemoveResTagCmd = &cli.Command{
	Use:          "RemoveResTag",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableAliasArgs, " "),
	SpecialArgs:  &ResTagTableSpecialArgs,
	Comments:     addRegionComment(ResTagTableComments),
	ReqData:      &ormapi.RegionResTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveResTag"),
}

var GetResTagTableCmd = &cli.Command{
	Use:          "GetResTagTable",
	RequiredArgs: strings.Join(append([]string{"region"}, ResTagTableKeyRequiredArgs...), " "),
	OptionalArgs: strings.Join(ResTagTableKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(ResTagTableKeyAliasArgs, " "),
	SpecialArgs:  &ResTagTableKeySpecialArgs,
	Comments:     addRegionComment(ResTagTableKeyComments),
	ReqData:      &ormapi.RegionResTagTableKey{},
	ReplyData:    &edgeproto.ResTagTable{},
	Run:          runRest("/auth/ctrl/GetResTagTable"),
}

var ResTagTableApiCmds = []*cli.Command{
	CreateResTagTableCmd,
	DeleteResTagTableCmd,
	UpdateResTagTableCmd,
	ShowResTagTableCmd,
	AddResTagCmd,
	RemoveResTagCmd,
	GetResTagTableCmd,
}

var ResTagTableKeyRequiredArgs = []string{}
var ResTagTableKeyOptionalArgs = []string{
	"name",
	"operator",
}
var ResTagTableKeyAliasArgs = []string{
	"name=restagtablekey.name",
	"operator=restagtablekey.operatorkey.name",
}
var ResTagTableKeyComments = map[string]string{
	"operator": "Company or Organization name of the operator",
}
var ResTagTableKeySpecialArgs = map[string]string{}
var ResTagTableRequiredArgs = []string{
	"res",
	"operator",
	"tags",
}
var ResTagTableOptionalArgs = []string{
	"azone",
}
var ResTagTableAliasArgs = []string{
	"res=restagtable.key.name",
	"operator=restagtable.key.operatorkey.name",
	"tags=restagtable.tags",
	"azone=restagtable.azone",
}
var ResTagTableComments = map[string]string{
	"operator": "Company or Organization name of the operator",
	"tags":     "one or more string tags",
	"azone":    "availability zone(s) of resource if required",
}
var ResTagTableSpecialArgs = map[string]string{
	"tags": "StringArray",
}
