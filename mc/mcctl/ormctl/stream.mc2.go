// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var StreamAppInstCmd = &ApiCommand{
	Name:                 "StreamAppInst",
	Use:                  "streamappinst",
	Short:                "Stream Application Instance current progress",
	RequiredArgs:         "region " + strings.Join(AppInstKeyRequiredArgs, " "),
	OptionalArgs:         strings.Join(AppInstKeyOptionalArgs, " "),
	AliasArgs:            strings.Join(AppInstKeyAliasArgs, " "),
	SpecialArgs:          &AppInstKeySpecialArgs,
	Comments:             addRegionComment(AppInstKeyComments),
	ReqData:              &ormapi.RegionAppInstKey{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/StreamAppInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var StreamClusterInstCmd = &ApiCommand{
	Name:                 "StreamClusterInst",
	Use:                  "streamclusterinst",
	Short:                "Stream Cluster Instance current progress",
	RequiredArgs:         "region " + strings.Join(ClusterInstKeyRequiredArgs, " "),
	OptionalArgs:         strings.Join(ClusterInstKeyOptionalArgs, " "),
	AliasArgs:            strings.Join(ClusterInstKeyAliasArgs, " "),
	SpecialArgs:          &ClusterInstKeySpecialArgs,
	Comments:             addRegionComment(ClusterInstKeyComments),
	ReqData:              &ormapi.RegionClusterInstKey{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/StreamClusterInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var StreamCloudletCmd = &ApiCommand{
	Name:                 "StreamCloudlet",
	Use:                  "streamcloudlet",
	Short:                "Stream Cloudlet current progress",
	RequiredArgs:         "region " + strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs:         strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:            strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:          &CloudletKeySpecialArgs,
	Comments:             addRegionComment(CloudletKeyComments),
	ReqData:              &ormapi.RegionCloudletKey{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/StreamCloudlet",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var StreamObjApiCmds = []*ApiCommand{
	StreamAppInstCmd,
	StreamClusterInstCmd,
	StreamCloudletCmd,
}

const StreamObjGroup = "StreamObj"

func init() {
	AllApis.AddGroup(StreamObjGroup, "Manage StreamObjs", StreamObjApiCmds)
}

var StreamObjRequiredArgs = []string{
	"key.appkey.organization",
	"key.appkey.name",
	"key.appkey.version",
	"key.clusterinstkey.clusterkey.name",
	"key.clusterinstkey.cloudletkey.organization",
	"key.clusterinstkey.cloudletkey.name",
	"key.clusterinstkey.organization",
}
var StreamObjOptionalArgs = []string{
	"status.tasknumber",
	"status.maxtasks",
	"status.taskname",
	"status.stepname",
	"status.msgcount",
	"status.msgs",
}
var StreamObjAliasArgs = []string{
	"key.appkey.organization=streamobj.key.appkey.organization",
	"key.appkey.name=streamobj.key.appkey.name",
	"key.appkey.version=streamobj.key.appkey.version",
	"key.clusterinstkey.clusterkey.name=streamobj.key.clusterinstkey.clusterkey.name",
	"key.clusterinstkey.cloudletkey.organization=streamobj.key.clusterinstkey.cloudletkey.organization",
	"key.clusterinstkey.cloudletkey.name=streamobj.key.clusterinstkey.cloudletkey.name",
	"key.clusterinstkey.organization=streamobj.key.clusterinstkey.organization",
	"status.tasknumber=streamobj.status.tasknumber",
	"status.maxtasks=streamobj.status.maxtasks",
	"status.taskname=streamobj.status.taskname",
	"status.stepname=streamobj.status.stepname",
	"status.msgcount=streamobj.status.msgcount",
	"status.msgs=streamobj.status.msgs",
}
var StreamObjComments = map[string]string{
	"key.appkey.organization":                     "App developer organization",
	"key.appkey.name":                             "App name",
	"key.appkey.version":                          "App version",
	"key.clusterinstkey.clusterkey.name":          "Cluster name",
	"key.clusterinstkey.cloudletkey.organization": "Organization of the cloudlet site",
	"key.clusterinstkey.cloudletkey.name":         "Name of the cloudlet",
	"key.clusterinstkey.organization":             "Name of Developer organization that this cluster belongs to",
}
var StreamObjSpecialArgs = map[string]string{
	"streamobj.status.msgs": "StringArray",
}
