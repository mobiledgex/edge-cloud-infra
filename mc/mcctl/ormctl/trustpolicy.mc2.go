// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trustpolicy.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateTrustPolicyCmd = &ApiCommand{
	Name:                 "CreateTrustPolicy",
	Use:                  "create",
	Short:                "Create a Trust Policy",
	RequiredArgs:         "region " + strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs:         strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:            strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:          &TrustPolicySpecialArgs,
	Comments:             addRegionComment(TrustPolicyComments),
	ReqData:              &ormapi.RegionTrustPolicy{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/CreateTrustPolicy",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var DeleteTrustPolicyCmd = &ApiCommand{
	Name:                 "DeleteTrustPolicy",
	Use:                  "delete",
	Short:                "Delete a Trust policy",
	RequiredArgs:         "region " + strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs:         strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:            strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:          &TrustPolicySpecialArgs,
	Comments:             addRegionComment(TrustPolicyComments),
	ReqData:              &ormapi.RegionTrustPolicy{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/DeleteTrustPolicy",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var UpdateTrustPolicyCmd = &ApiCommand{
	Name:                 "UpdateTrustPolicy",
	Use:                  "update",
	Short:                "Update a Trust policy",
	RequiredArgs:         "region " + strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs:         strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:            strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:          &TrustPolicySpecialArgs,
	Comments:             addRegionComment(TrustPolicyComments),
	ReqData:              &ormapi.RegionTrustPolicy{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/UpdateTrustPolicy",
	SetFieldsFunc:        SetUpdateTrustPolicyFields,
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

func SetUpdateTrustPolicyFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in["TrustPolicy"]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.TrustPolicy{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowTrustPolicyCmd = &ApiCommand{
	Name:         "ShowTrustPolicy",
	Use:          "show",
	Short:        "Show Trust Policies. Any fields specified will be used to filter results.",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(TrustPolicyRequiredArgs, TrustPolicyOptionalArgs...), " "),
	AliasArgs:    strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:  &TrustPolicySpecialArgs,
	Comments:     addRegionComment(TrustPolicyComments),
	ReqData:      &ormapi.RegionTrustPolicy{},
	ReplyData:    &edgeproto.TrustPolicy{},
	Path:         "/auth/ctrl/ShowTrustPolicy",
	StreamOut:    true,
	ProtobufApi:  true,
}

var TrustPolicyApiCmds = []*ApiCommand{
	CreateTrustPolicyCmd,
	DeleteTrustPolicyCmd,
	UpdateTrustPolicyCmd,
	ShowTrustPolicyCmd,
}

const TrustPolicyGroup = "TrustPolicy"

func init() {
	AllApis.AddGroup(TrustPolicyGroup, "Manage TrustPolicys", TrustPolicyApiCmds)
}

var SecurityRuleRequiredArgs = []string{}
var SecurityRuleOptionalArgs = []string{
	"protocol",
	"portrangemin",
	"portrangemax",
	"remotecidr",
}
var SecurityRuleAliasArgs = []string{
	"protocol=securityrule.protocol",
	"portrangemin=securityrule.portrangemin",
	"portrangemax=securityrule.portrangemax",
	"remotecidr=securityrule.remotecidr",
}
var SecurityRuleComments = map[string]string{
	"protocol":     "tcp, udp, icmp",
	"portrangemin": "TCP or UDP port range start",
	"portrangemax": "TCP or UDP port range end",
	"remotecidr":   "remote CIDR X.X.X.X/X",
}
var SecurityRuleSpecialArgs = map[string]string{}
var TrustPolicyRequiredArgs = []string{
	"cloudlet-org",
	"name",
}
var TrustPolicyOptionalArgs = []string{
	"outboundsecurityrules:#.protocol",
	"outboundsecurityrules:#.portrangemin",
	"outboundsecurityrules:#.portrangemax",
	"outboundsecurityrules:#.remotecidr",
}
var TrustPolicyAliasArgs = []string{
	"fields=trustpolicy.fields",
	"cloudlet-org=trustpolicy.key.organization",
	"name=trustpolicy.key.name",
	"outboundsecurityrules:#.protocol=trustpolicy.outboundsecurityrules:#.protocol",
	"outboundsecurityrules:#.portrangemin=trustpolicy.outboundsecurityrules:#.portrangemin",
	"outboundsecurityrules:#.portrangemax=trustpolicy.outboundsecurityrules:#.portrangemax",
	"outboundsecurityrules:#.remotecidr=trustpolicy.outboundsecurityrules:#.remotecidr",
}
var TrustPolicyComments = map[string]string{
	"fields":                               "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                         "Name of the organization for the cluster that this policy will apply to",
	"name":                                 "Policy name",
	"outboundsecurityrules:#.protocol":     "tcp, udp, icmp",
	"outboundsecurityrules:#.portrangemin": "TCP or UDP port range start",
	"outboundsecurityrules:#.portrangemax": "TCP or UDP port range end",
	"outboundsecurityrules:#.remotecidr":   "remote CIDR X.X.X.X/X",
}
var TrustPolicySpecialArgs = map[string]string{
	"trustpolicy.fields": "StringArray",
}
