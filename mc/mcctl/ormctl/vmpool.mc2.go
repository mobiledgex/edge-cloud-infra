// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmpool.proto

package ormctl

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateVMPoolCmd = &cli.Command{
	Use:          "CreateVMPool",
	RequiredArgs: "region " + strings.Join(VMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(VMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateVMPool"),
}

var DeleteVMPoolCmd = &cli.Command{
	Use:          "DeleteVMPool",
	RequiredArgs: "region " + strings.Join(VMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(VMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteVMPool"),
}

var UpdateVMPoolCmd = &cli.Command{
	Use:          "UpdateVMPool",
	RequiredArgs: "region " + strings.Join(VMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(VMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateVMPool",
		withSetFieldsFunc(setUpdateVMPoolFields),
	),
}

func setUpdateVMPoolFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("VMPool")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.VMPool{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowVMPoolCmd = &cli.Command{
	Use:          "ShowVMPool",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(VMPoolRequiredArgs, VMPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.VMPool{},
	Run:          runRest("/auth/ctrl/ShowVMPool"),
	StreamOut:    true,
}

var AddVMPoolMemberCmd = &cli.Command{
	Use:          "AddVMPoolMember",
	RequiredArgs: "region " + strings.Join(AddVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolMemberAliasArgs, " "),
	SpecialArgs:  &VMPoolMemberSpecialArgs,
	Comments:     addRegionComment(VMPoolMemberComments),
	ReqData:      &ormapi.RegionVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddVMPoolMember"),
}

var RemoveVMPoolMemberCmd = &cli.Command{
	Use:          "RemoveVMPoolMember",
	RequiredArgs: "region " + strings.Join(RemoveVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolMemberAliasArgs, " "),
	SpecialArgs:  &VMPoolMemberSpecialArgs,
	Comments:     addRegionComment(VMPoolMemberComments),
	ReqData:      &ormapi.RegionVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveVMPoolMember"),
}

var VMPoolApiCmds = []*cli.Command{
	CreateVMPoolCmd,
	DeleteVMPoolCmd,
	UpdateVMPoolCmd,
	ShowVMPoolCmd,
	AddVMPoolMemberCmd,
	RemoveVMPoolMemberCmd,
}

var AddVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var AddVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var RemoveVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var RemoveVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var CloudletVMNetInfoRequiredArgs = []string{}
var CloudletVMNetInfoOptionalArgs = []string{
	"externalip",
	"internalip",
}
var CloudletVMNetInfoAliasArgs = []string{
	"externalip=cloudletvmnetinfo.externalip",
	"internalip=cloudletvmnetinfo.internalip",
}
var CloudletVMNetInfoComments = map[string]string{
	"externalip": "External IP",
	"internalip": "Internal IP",
}
var CloudletVMNetInfoSpecialArgs = map[string]string{}
var CloudletVMRequiredArgs = []string{}
var CloudletVMOptionalArgs = []string{
	"name",
	"netinfo.externalip",
	"netinfo.internalip",
	"user",
	"state",
	"updatedat.seconds",
	"updatedat.nanos",
	"internalname",
}
var CloudletVMAliasArgs = []string{
	"name=cloudletvm.name",
	"netinfo.externalip=cloudletvm.netinfo.externalip",
	"netinfo.internalip=cloudletvm.netinfo.internalip",
	"user=cloudletvm.user",
	"state=cloudletvm.state",
	"updatedat.seconds=cloudletvm.updatedat.seconds",
	"updatedat.nanos=cloudletvm.updatedat.nanos",
	"internalname=cloudletvm.internalname",
}
var CloudletVMComments = map[string]string{
	"name":               "VM Name",
	"netinfo.externalip": "External IP",
	"netinfo.internalip": "Internal IP",
	"user":               "VM User",
	"state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"internalname":       "VM Internal Name",
}
var CloudletVMSpecialArgs = map[string]string{}
var VMPoolRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var VMPoolOptionalArgs = []string{
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
}
var VMPoolAliasArgs = []string{
	"fields=vmpool.fields",
	"cloudlet-org=vmpool.key.organization",
	"cloudlet=vmpool.key.name",
	"cloudletvms:#.name=vmpool.cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip=vmpool.cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip=vmpool.cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user=vmpool.cloudletvms:#.user",
	"cloudletvms:#.state=vmpool.cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds=vmpool.cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos=vmpool.cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname=vmpool.cloudletvms:#.internalname",
	"action=vmpool.action",
	"error=vmpool.error",
}
var VMPoolComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvms:#.internalname":       "VM Internal Name",
	"action":                           "Action performed on Cloudlet VM Pool, one of CloudletVmActionDone, CloudletVmActionAllocate, CloudletVmActionRelease",
	"error":                            "Errors if any",
}
var VMPoolSpecialArgs = map[string]string{
	"vmpool.fields": "StringArray",
}
var VMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var VMPoolMemberOptionalArgs = []string{
	"cloudletvm.name",
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
	"cloudletvm.internalname",
}
var VMPoolMemberAliasArgs = []string{
	"cloudlet-org=vmpoolmember.key.organization",
	"cloudlet=vmpoolmember.key.name",
	"cloudletvm.name=vmpoolmember.cloudletvm.name",
	"cloudletvm.netinfo.externalip=vmpoolmember.cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip=vmpoolmember.cloudletvm.netinfo.internalip",
	"cloudletvm.user=vmpoolmember.cloudletvm.user",
	"cloudletvm.state=vmpoolmember.cloudletvm.state",
	"cloudletvm.updatedat.seconds=vmpoolmember.cloudletvm.updatedat.seconds",
	"cloudletvm.updatedat.nanos=vmpoolmember.cloudletvm.updatedat.nanos",
	"cloudletvm.internalname=vmpoolmember.cloudletvm.internalname",
}
var VMPoolMemberComments = map[string]string{
	"cloudlet-org":                  "Organization of the cloudlet site",
	"cloudlet":                      "Name of the cloudlet",
	"cloudletvm.name":               "VM Name",
	"cloudletvm.netinfo.externalip": "External IP",
	"cloudletvm.netinfo.internalip": "Internal IP",
	"cloudletvm.user":               "VM User",
	"cloudletvm.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvm.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvm.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvm.internalname":       "VM Internal Name",
}
var VMPoolMemberSpecialArgs = map[string]string{}
var CloudletVMSpecRequiredArgs = []string{}
var CloudletVMSpecOptionalArgs = []string{
	"internalname",
	"externalnetwork",
	"internalnetwork",
}
var CloudletVMSpecAliasArgs = []string{
	"internalname=cloudletvmspec.internalname",
	"externalnetwork=cloudletvmspec.externalnetwork",
	"internalnetwork=cloudletvmspec.internalnetwork",
}
var CloudletVMSpecComments = map[string]string{
	"internalname":    "Cloudlet VM internal name",
	"externalnetwork": "Cloudlet VM has external network defined or not",
	"internalnetwork": "Cloudlet VM has internal network defined or not",
}
var CloudletVMSpecSpecialArgs = map[string]string{}
var VMPoolInfoRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var VMPoolInfoOptionalArgs = []string{
	"action",
	"notifyid",
	"user",
	"vmspecs:#.internalname",
	"vmspecs:#.externalnetwork",
	"vmspecs:#.internalnetwork",
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user",
	"cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname",
	"error",
}
var VMPoolInfoAliasArgs = []string{
	"fields=vmpoolinfo.fields",
	"cloudlet-org=vmpoolinfo.key.organization",
	"cloudlet=vmpoolinfo.key.name",
	"action=vmpoolinfo.action",
	"notifyid=vmpoolinfo.notifyid",
	"user=vmpoolinfo.user",
	"vmspecs:#.internalname=vmpoolinfo.vmspecs:#.internalname",
	"vmspecs:#.externalnetwork=vmpoolinfo.vmspecs:#.externalnetwork",
	"vmspecs:#.internalnetwork=vmpoolinfo.vmspecs:#.internalnetwork",
	"cloudletvms:#.name=vmpoolinfo.cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip=vmpoolinfo.cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip=vmpoolinfo.cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.user=vmpoolinfo.cloudletvms:#.user",
	"cloudletvms:#.state=vmpoolinfo.cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds=vmpoolinfo.cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos=vmpoolinfo.cloudletvms:#.updatedat.nanos",
	"cloudletvms:#.internalname=vmpoolinfo.cloudletvms:#.internalname",
	"error=vmpoolinfo.error",
}
var VMPoolInfoComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"action":                           "Action performed on Cloudlet VM Pool, one of CloudletVmActionDone, CloudletVmActionAllocate, CloudletVmActionRelease",
	"notifyid":                         "Id of client assigned by server (internal use only)",
	"user":                             "VM User",
	"vmspecs:#.internalname":           "Cloudlet VM internal name",
	"vmspecs:#.externalnetwork":        "Cloudlet VM has external network defined or not",
	"vmspecs:#.internalnetwork":        "Cloudlet VM has internal network defined or not",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmInUse, CloudletVmError",
	"cloudletvms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"cloudletvms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"cloudletvms:#.internalname":       "VM Internal Name",
	"error":                            "Errors if any",
}
var VMPoolInfoSpecialArgs = map[string]string{
	"vmpoolinfo.fields": "StringArray",
}
