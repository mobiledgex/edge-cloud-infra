// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmpool.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud/cli"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateVMPoolCmd = &cli.Command{
	Use:          "CreateVMPool",
	RequiredArgs: "region " + strings.Join(CreateVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CreateVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/CreateVMPool"),
}

var DeleteVMPoolCmd = &cli.Command{
	Use:          "DeleteVMPool",
	RequiredArgs: "region " + strings.Join(VMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(VMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/DeleteVMPool"),
}

var UpdateVMPoolCmd = &cli.Command{
	Use:          "UpdateVMPool",
	RequiredArgs: "region " + strings.Join(VMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(VMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run: runRest("/auth/ctrl/UpdateVMPool",
		withSetFieldsFunc(setUpdateVMPoolFields),
	),
}

func setUpdateVMPoolFields(in map[string]interface{}) {
	// get map for edgeproto object in region struct
	obj := in[strings.ToLower("VMPool")]
	if obj == nil {
		return
	}
	objmap, ok := obj.(map[string]interface{})
	if !ok {
		return
	}
	fields := cli.GetSpecifiedFields(objmap, &edgeproto.VMPool{}, cli.JsonNamespace)
	// include fields already specified
	if inFields, found := objmap["fields"]; found {
		if fieldsArr, ok := inFields.([]string); ok {
			fields = append(fields, fieldsArr...)
		}
	}
	objmap["fields"] = fields
}

var ShowVMPoolCmd = &cli.Command{
	Use:          "ShowVMPool",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(VMPoolRequiredArgs, VMPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(VMPoolAliasArgs, " "),
	SpecialArgs:  &VMPoolSpecialArgs,
	Comments:     addRegionComment(VMPoolComments),
	ReqData:      &ormapi.RegionVMPool{},
	ReplyData:    &edgeproto.VMPool{},
	Run:          runRest("/auth/ctrl/ShowVMPool"),
	StreamOut:    true,
}

var AddVMPoolMemberCmd = &cli.Command{
	Use:          "AddVMPoolMember",
	RequiredArgs: "region " + strings.Join(AddVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolMemberAliasArgs, " "),
	SpecialArgs:  &VMPoolMemberSpecialArgs,
	Comments:     addRegionComment(VMPoolMemberComments),
	ReqData:      &ormapi.RegionVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/AddVMPoolMember"),
}

var RemoveVMPoolMemberCmd = &cli.Command{
	Use:          "RemoveVMPoolMember",
	RequiredArgs: "region " + strings.Join(RemoveVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(VMPoolMemberAliasArgs, " "),
	SpecialArgs:  &VMPoolMemberSpecialArgs,
	Comments:     addRegionComment(VMPoolMemberComments),
	ReqData:      &ormapi.RegionVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRest("/auth/ctrl/RemoveVMPoolMember"),
}

var VMPoolApiCmds = []*cli.Command{
	CreateVMPoolCmd,
	DeleteVMPoolCmd,
	UpdateVMPoolCmd,
	ShowVMPoolCmd,
	AddVMPoolMemberCmd,
	RemoveVMPoolMemberCmd,
}

var CreateVMPoolRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
}
var CreateVMPoolOptionalArgs = []string{
	"vms:#.name",
	"vms:#.netinfo.externalip",
	"vms:#.netinfo.internalip",
	"crmoverride",
}
var AddVMPoolMemberRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
	"vm.name",
	"vm.netinfo.internalip",
}
var AddVMPoolMemberOptionalArgs = []string{
	"vm.netinfo.externalip",
	"crmoverride",
}
var RemoveVMPoolMemberRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
	"vm.name",
}
var RemoveVMPoolMemberOptionalArgs = []string{
	"crmoverride",
}
var VMNetInfoRequiredArgs = []string{}
var VMNetInfoOptionalArgs = []string{
	"externalip",
	"internalip",
}
var VMNetInfoAliasArgs = []string{
	"externalip=vmnetinfo.externalip",
	"internalip=vmnetinfo.internalip",
}
var VMNetInfoComments = map[string]string{
	"externalip": "External IP",
	"internalip": "Internal IP",
}
var VMNetInfoSpecialArgs = map[string]string{}
var VMRequiredArgs = []string{}
var VMOptionalArgs = []string{
	"name",
	"netinfo.externalip",
	"netinfo.internalip",
	"groupname",
	"state",
	"updatedat.seconds",
	"updatedat.nanos",
	"internalname",
	"flavor.name",
	"flavor.vcpus",
	"flavor.ram",
	"flavor.disk",
	"flavor.propmap",
}
var VMAliasArgs = []string{
	"name=vm.name",
	"netinfo.externalip=vm.netinfo.externalip",
	"netinfo.internalip=vm.netinfo.internalip",
	"groupname=vm.groupname",
	"state=vm.state",
	"updatedat.seconds=vm.updatedat.seconds",
	"updatedat.nanos=vm.updatedat.nanos",
	"internalname=vm.internalname",
	"flavor.name=vm.flavor.name",
	"flavor.vcpus=vm.flavor.vcpus",
	"flavor.ram=vm.flavor.ram",
	"flavor.disk=vm.flavor.disk",
	"flavor.propmap=vm.flavor.propmap",
}
var VMComments = map[string]string{
	"name":               "VM Name",
	"netinfo.externalip": "External IP",
	"netinfo.internalip": "Internal IP",
	"groupname":          "VM Group Name",
	"state":              "VM State, one of VmFree, VmInProgress, VmInUse, VmAdd, VmRemove, VmUpdate, VmForceFree",
	"updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"internalname":       "VM Internal Name",
	"flavor.name":        "Name of the flavor on the Cloudlet",
	"flavor.vcpus":       "Number of VCPU cores on the Cloudlet",
	"flavor.ram":         "Ram in MB on the Cloudlet",
	"flavor.disk":        "Amount of disk in GB on the Cloudlet",
	"flavor.propmap":     "OS Flavor Properties, if any",
}
var VMSpecialArgs = map[string]string{
	"vm.flavor.propmap": "StringToString",
}
var VMPoolKeyRequiredArgs = []string{}
var VMPoolKeyOptionalArgs = []string{
	"organization",
	"name",
}
var VMPoolKeyAliasArgs = []string{
	"organization=vmpoolkey.organization",
	"name=vmpoolkey.name",
}
var VMPoolKeyComments = map[string]string{
	"organization": "Organization of the vmpool",
	"name":         "Name of the vmpool",
}
var VMPoolKeySpecialArgs = map[string]string{}
var VMPoolRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
}
var VMPoolOptionalArgs = []string{
	"vms:#.name",
	"vms:#.netinfo.externalip",
	"vms:#.netinfo.internalip",
	"vms:#.state",
	"crmoverride",
}
var VMPoolAliasArgs = []string{
	"fields=vmpool.fields",
	"vmpool-org=vmpool.key.organization",
	"vmpool=vmpool.key.name",
	"vms:#.name=vmpool.vms:#.name",
	"vms:#.netinfo.externalip=vmpool.vms:#.netinfo.externalip",
	"vms:#.netinfo.internalip=vmpool.vms:#.netinfo.internalip",
	"vms:#.groupname=vmpool.vms:#.groupname",
	"vms:#.state=vmpool.vms:#.state",
	"vms:#.updatedat.seconds=vmpool.vms:#.updatedat.seconds",
	"vms:#.updatedat.nanos=vmpool.vms:#.updatedat.nanos",
	"vms:#.internalname=vmpool.vms:#.internalname",
	"vms:#.flavor.name=vmpool.vms:#.flavor.name",
	"vms:#.flavor.vcpus=vmpool.vms:#.flavor.vcpus",
	"vms:#.flavor.ram=vmpool.vms:#.flavor.ram",
	"vms:#.flavor.disk=vmpool.vms:#.flavor.disk",
	"vms:#.flavor.propmap=vmpool.vms:#.flavor.propmap",
	"state=vmpool.state",
	"errors=vmpool.errors",
	"status.tasknumber=vmpool.status.tasknumber",
	"status.maxtasks=vmpool.status.maxtasks",
	"status.taskname=vmpool.status.taskname",
	"status.stepname=vmpool.status.stepname",
	"status.msgcount=vmpool.status.msgcount",
	"status.msgs=vmpool.status.msgs",
	"crmoverride=vmpool.crmoverride",
}
var VMPoolComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"vmpool-org":               "Organization of the vmpool",
	"vmpool":                   "Name of the vmpool",
	"vms:#.name":               "VM Name",
	"vms:#.netinfo.externalip": "External IP",
	"vms:#.netinfo.internalip": "Internal IP",
	"vms:#.groupname":          "VM Group Name",
	"vms:#.state":              "VM State, one of VmFree, VmInProgress, VmInUse, VmAdd, VmRemove, VmUpdate, VmForceFree",
	"vms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"vms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"vms:#.internalname":       "VM Internal Name",
	"vms:#.flavor.name":        "Name of the flavor on the Cloudlet",
	"vms:#.flavor.vcpus":       "Number of VCPU cores on the Cloudlet",
	"vms:#.flavor.ram":         "Ram in MB on the Cloudlet",
	"vms:#.flavor.disk":        "Amount of disk in GB on the Cloudlet",
	"vms:#.flavor.propmap":     "OS Flavor Properties, if any",
	"state":                    "Current state of the VM pool, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone, ResourceUpdateRequested",
	"errors":                   "Any errors trying to add/remove VM to/from VM Pool",
	"crmoverride":              "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
}
var VMPoolSpecialArgs = map[string]string{
	"vmpool.errors":               "StringArray",
	"vmpool.fields":               "StringArray",
	"vmpool.status.msgs":          "StringArray",
	"vmpool.vms:#.flavor.propmap": "StringToString",
}
var VMPoolMemberRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
}
var VMPoolMemberOptionalArgs = []string{
	"vm.name",
	"vm.netinfo.externalip",
	"vm.netinfo.internalip",
	"crmoverride",
}
var VMPoolMemberAliasArgs = []string{
	"vmpool-org=vmpoolmember.key.organization",
	"vmpool=vmpoolmember.key.name",
	"vm.name=vmpoolmember.vm.name",
	"vm.netinfo.externalip=vmpoolmember.vm.netinfo.externalip",
	"vm.netinfo.internalip=vmpoolmember.vm.netinfo.internalip",
	"vm.groupname=vmpoolmember.vm.groupname",
	"vm.state=vmpoolmember.vm.state",
	"vm.updatedat.seconds=vmpoolmember.vm.updatedat.seconds",
	"vm.updatedat.nanos=vmpoolmember.vm.updatedat.nanos",
	"vm.internalname=vmpoolmember.vm.internalname",
	"vm.flavor.name=vmpoolmember.vm.flavor.name",
	"vm.flavor.vcpus=vmpoolmember.vm.flavor.vcpus",
	"vm.flavor.ram=vmpoolmember.vm.flavor.ram",
	"vm.flavor.disk=vmpoolmember.vm.flavor.disk",
	"vm.flavor.propmap=vmpoolmember.vm.flavor.propmap",
	"crmoverride=vmpoolmember.crmoverride",
}
var VMPoolMemberComments = map[string]string{
	"vmpool-org":            "Organization of the vmpool",
	"vmpool":                "Name of the vmpool",
	"vm.name":               "VM Name",
	"vm.netinfo.externalip": "External IP",
	"vm.netinfo.internalip": "Internal IP",
	"vm.groupname":          "VM Group Name",
	"vm.state":              "VM State, one of VmFree, VmInProgress, VmInUse, VmAdd, VmRemove, VmUpdate, VmForceFree",
	"vm.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"vm.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"vm.internalname":       "VM Internal Name",
	"vm.flavor.name":        "Name of the flavor on the Cloudlet",
	"vm.flavor.vcpus":       "Number of VCPU cores on the Cloudlet",
	"vm.flavor.ram":         "Ram in MB on the Cloudlet",
	"vm.flavor.disk":        "Amount of disk in GB on the Cloudlet",
	"vm.flavor.propmap":     "OS Flavor Properties, if any",
	"crmoverride":           "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
}
var VMPoolMemberSpecialArgs = map[string]string{
	"vmpoolmember.vm.flavor.propmap": "StringToString",
}
var VMSpecRequiredArgs = []string{}
var VMSpecOptionalArgs = []string{
	"internalname",
	"externalnetwork",
	"internalnetwork",
	"flavor.fields",
	"flavor.key.name",
	"flavor.ram",
	"flavor.vcpus",
	"flavor.disk",
	"flavor.optresmap",
}
var VMSpecAliasArgs = []string{
	"internalname=vmspec.internalname",
	"externalnetwork=vmspec.externalnetwork",
	"internalnetwork=vmspec.internalnetwork",
	"flavor.fields=vmspec.flavor.fields",
	"flavor.key.name=vmspec.flavor.key.name",
	"flavor.ram=vmspec.flavor.ram",
	"flavor.vcpus=vmspec.flavor.vcpus",
	"flavor.disk=vmspec.flavor.disk",
	"flavor.optresmap=vmspec.flavor.optresmap",
}
var VMSpecComments = map[string]string{
	"internalname":     "VM internal name",
	"externalnetwork":  "VM has external network defined or not",
	"internalnetwork":  "VM has internal network defined or not",
	"flavor.fields":    "Fields are used for the Update API to specify which fields to apply",
	"flavor.key.name":  "Flavor name",
	"flavor.ram":       "RAM in megabytes",
	"flavor.vcpus":     "Number of virtual CPUs",
	"flavor.disk":      "Amount of disk space in gigabytes",
	"flavor.optresmap": "Optional Resources request, key = [gpu, nas, nic] gpu kinds: [gpu, vgpu, pci] form: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
}
var VMSpecSpecialArgs = map[string]string{
	"vmspec.flavor.fields":    "StringArray",
	"vmspec.flavor.optresmap": "StringToString",
}
var VMPoolInfoRequiredArgs = []string{
	"vmpool-org",
	"vmpool",
}
var VMPoolInfoOptionalArgs = []string{
	"notifyid",
	"vms:#.name",
	"vms:#.netinfo.externalip",
	"vms:#.netinfo.internalip",
	"vms:#.groupname",
	"vms:#.state",
	"vms:#.updatedat.seconds",
	"vms:#.updatedat.nanos",
	"vms:#.internalname",
	"vms:#.flavor.name",
	"vms:#.flavor.vcpus",
	"vms:#.flavor.ram",
	"vms:#.flavor.disk",
	"vms:#.flavor.propmap",
	"state",
	"errors",
	"status.tasknumber",
	"status.maxtasks",
	"status.taskname",
	"status.stepname",
	"status.msgcount",
	"status.msgs",
}
var VMPoolInfoAliasArgs = []string{
	"fields=vmpoolinfo.fields",
	"vmpool-org=vmpoolinfo.key.organization",
	"vmpool=vmpoolinfo.key.name",
	"notifyid=vmpoolinfo.notifyid",
	"vms:#.name=vmpoolinfo.vms:#.name",
	"vms:#.netinfo.externalip=vmpoolinfo.vms:#.netinfo.externalip",
	"vms:#.netinfo.internalip=vmpoolinfo.vms:#.netinfo.internalip",
	"vms:#.groupname=vmpoolinfo.vms:#.groupname",
	"vms:#.state=vmpoolinfo.vms:#.state",
	"vms:#.updatedat.seconds=vmpoolinfo.vms:#.updatedat.seconds",
	"vms:#.updatedat.nanos=vmpoolinfo.vms:#.updatedat.nanos",
	"vms:#.internalname=vmpoolinfo.vms:#.internalname",
	"vms:#.flavor.name=vmpoolinfo.vms:#.flavor.name",
	"vms:#.flavor.vcpus=vmpoolinfo.vms:#.flavor.vcpus",
	"vms:#.flavor.ram=vmpoolinfo.vms:#.flavor.ram",
	"vms:#.flavor.disk=vmpoolinfo.vms:#.flavor.disk",
	"vms:#.flavor.propmap=vmpoolinfo.vms:#.flavor.propmap",
	"state=vmpoolinfo.state",
	"errors=vmpoolinfo.errors",
	"status.tasknumber=vmpoolinfo.status.tasknumber",
	"status.maxtasks=vmpoolinfo.status.maxtasks",
	"status.taskname=vmpoolinfo.status.taskname",
	"status.stepname=vmpoolinfo.status.stepname",
	"status.msgcount=vmpoolinfo.status.msgcount",
	"status.msgs=vmpoolinfo.status.msgs",
}
var VMPoolInfoComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"vmpool-org":               "Organization of the vmpool",
	"vmpool":                   "Name of the vmpool",
	"notifyid":                 "Id of client assigned by server (internal use only)",
	"vms:#.name":               "VM Name",
	"vms:#.netinfo.externalip": "External IP",
	"vms:#.netinfo.internalip": "Internal IP",
	"vms:#.groupname":          "VM Group Name",
	"vms:#.state":              "VM State, one of VmFree, VmInProgress, VmInUse, VmAdd, VmRemove, VmUpdate, VmForceFree",
	"vms:#.updatedat.seconds":  "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"vms:#.updatedat.nanos":    "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"vms:#.internalname":       "VM Internal Name",
	"vms:#.flavor.name":        "Name of the flavor on the Cloudlet",
	"vms:#.flavor.vcpus":       "Number of VCPU cores on the Cloudlet",
	"vms:#.flavor.ram":         "Ram in MB on the Cloudlet",
	"vms:#.flavor.disk":        "Amount of disk in GB on the Cloudlet",
	"vms:#.flavor.propmap":     "OS Flavor Properties, if any",
	"state":                    "Current state of the VM pool on the Cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone, ResourceUpdateRequested",
	"errors":                   "Any errors trying to add/remove VM to/from VM Pool",
}
var VMPoolInfoSpecialArgs = map[string]string{
	"vmpoolinfo.errors":               "StringArray",
	"vmpoolinfo.fields":               "StringArray",
	"vmpoolinfo.status.msgs":          "StringArray",
	"vmpoolinfo.vms:#.flavor.propmap": "StringToString",
}
