// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert.proto

/*
Package orm is a generated protocol buffer package.

It is generated from these files:
	alert.proto
	app.proto
	app_inst.proto
	autoprovpolicy.proto
	autoscalepolicy.proto
	cloudlet.proto
	cloudletpool.proto
	cluster.proto
	clusterinst.proto
	common.proto
	controller.proto
	developer.proto
	exec.proto
	flavor.proto
	metric.proto
	node.proto
	notice.proto
	operator.proto
	privacypolicy.proto
	refs.proto
	restagtable.proto
	result.proto
	settings.proto
	version.proto

It has these top-level messages:
	Alert
	AppKey
	ConfigFile
	App
	AppInstKey
	AppInst
	AppInstRuntime
	AppInstInfo
	AppInstMetrics
	AutoProvPolicy
	AutoProvCloudlet
	AutoProvCount
	AutoProvCounts
	AutoProvPolicyCloudlet
	PolicyKey
	AutoScalePolicy
	CloudletKey
	OperationTimeLimits
	CloudletInfraCommon
	AzureProperties
	GcpProperties
	OpenStackProperties
	CloudletInfraProperties
	PlatformConfig
	CloudletResMap
	Cloudlet
	FlavorMatch
	FlavorInfo
	OSAZone
	OSImage
	CloudletInfo
	CloudletMetrics
	CloudletPoolKey
	CloudletPool
	CloudletPoolMember
	ClusterKey
	ClusterInstKey
	ClusterInst
	ClusterInstInfo
	StatusInfo
	ControllerKey
	Controller
	DeveloperKey
	Developer
	RunCmd
	RunVMConsole
	ShowLog
	ExecRequest
	FlavorKey
	Flavor
	MetricTag
	MetricVal
	Metric
	NodeKey
	Node
	Notice
	OperatorKey
	Operator
	OperatorCode
	OutboundSecurityRule
	PrivacyPolicy
	CloudletRefs
	ClusterRefs
	ResTagTableKey
	ResTagTable
	Result
	Settings
*/
package orm

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "github.com/labstack/echo"
import "context"
import "io"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func ShowAlert(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionAlert{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	defer CloseConn(c)
	rc.region = in.Region

	err = ShowAlertStream(ctx, rc, &in.Alert, func(res *edgeproto.Alert) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		WriteStream(c, &payload)
	})
	if err != nil {
		WriteError(c, err)
	}
	return nil
}

type ShowAlertAuthz interface {
	Ok(obj *edgeproto.Alert) bool
}

func ShowAlertStream(ctx context.Context, rc *RegionContext, obj *edgeproto.Alert, cb func(res *edgeproto.Alert)) error {
	var authz ShowAlertAuthz
	var err error
	if !rc.skipAuthz {
		authz, err = newShowAlertAuthz(ctx, rc.region, rc.username, ResourceAlert, ActionView)
		if err == echo.ErrForbidden {
			return nil
		}
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewAlertApiClient(rc.conn)
	stream, err := api.ShowAlert(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			if !authz.Ok(res) {
				continue
			}
		}
		cb(res)
	}
	return nil
}

func ShowAlertObj(ctx context.Context, rc *RegionContext, obj *edgeproto.Alert) ([]edgeproto.Alert, error) {
	arr := []edgeproto.Alert{}
	err := ShowAlertStream(ctx, rc, obj, func(res *edgeproto.Alert) {
		arr = append(arr, *res)
	})
	return arr, err
}

func addControllerApis(method string, group *echo.Group) {
	// swagger:route POST /auth/ctrl/ShowAlert Alert ShowAlert
	// Show alerts.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAlert", ShowAlert)
	// swagger:route POST /auth/ctrl/CreateFlavor Flavor CreateFlavor
	// Create a Flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateFlavor", CreateFlavor)
	// swagger:route POST /auth/ctrl/DeleteFlavor Flavor DeleteFlavor
	// Delete a Flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteFlavor", DeleteFlavor)
	// swagger:route POST /auth/ctrl/UpdateFlavor Flavor UpdateFlavor
	// Update a Flavor.
	// Following are `Flavor.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = FlavorFieldKey
	// 2.1                  = FlavorFieldKeyName
	// 3                    = FlavorFieldRam
	// 4                    = FlavorFieldVcpus
	// 5                    = FlavorFieldDisk
	// 6                    = FlavorFieldOptResMap
	// 6.1                  = FlavorFieldOptResMapKey
	// 6.2                  = FlavorFieldOptResMapValue
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateFlavor", UpdateFlavor)
	// swagger:route POST /auth/ctrl/ShowFlavor Flavor ShowFlavor
	// Show Flavors.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowFlavor", ShowFlavor)
	// swagger:route POST /auth/ctrl/AddFlavorRes Flavor AddFlavorRes
	// Add Optional Resource.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddFlavorRes", AddFlavorRes)
	// swagger:route POST /auth/ctrl/RemoveFlavorRes Flavor RemoveFlavorRes
	// Remove Optional Resource.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveFlavorRes", RemoveFlavorRes)
	// swagger:route POST /auth/ctrl/CreateApp App CreateApp
	// Create Application.
	//  Creates a definition for an application instance for Cloudlet deployment.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateApp", CreateApp)
	// swagger:route POST /auth/ctrl/DeleteApp App DeleteApp
	// Delete Application.
	//  Deletes a definition of an Application instance. Make sure no other application instances exist with that definition. If they do exist, you must delete those Application instances first.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteApp", DeleteApp)
	// swagger:route POST /auth/ctrl/UpdateApp App UpdateApp
	// Update Application.
	//  Updates the definition of an Application instance.
	// Following are `App.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = AppFieldKey
	// 2.1                  = AppFieldKeyDeveloperKey
	// 2.1.2                = AppFieldKeyDeveloperKeyName
	// 2.2                  = AppFieldKeyName
	// 2.3                  = AppFieldKeyVersion
	// 4                    = AppFieldImagePath
	// 5                    = AppFieldImageType
	// 7                    = AppFieldAccessPorts
	// 9                    = AppFieldDefaultFlavor
	// 9.1                  = AppFieldDefaultFlavorName
	// 12                   = AppFieldAuthPublicKey
	// 13                   = AppFieldCommand
	// 14                   = AppFieldAnnotations
	// 15                   = AppFieldDeployment
	// 16                   = AppFieldDeploymentManifest
	// 17                   = AppFieldDeploymentGenerator
	// 18                   = AppFieldAndroidPackageName
	// 20                   = AppFieldDelOpt
	// 21                   = AppFieldConfigs
	// 21.1                 = AppFieldConfigsKind
	// 21.2                 = AppFieldConfigsConfig
	// 22                   = AppFieldScaleWithCluster
	// 23                   = AppFieldInternalPorts
	// 24                   = AppFieldRevision
	// 25                   = AppFieldOfficialFqdn
	// 26                   = AppFieldMd5Sum
	// 27                   = AppFieldDefaultSharedVolumeSize
	// 28                   = AppFieldAutoProvPolicy
	// 29                   = AppFieldAccessType
	// 30                   = AppFieldDefaultPrivacyPolicy
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateApp", UpdateApp)
	// swagger:route POST /auth/ctrl/ShowApp App ShowApp
	// Show Applications.
	//  Lists all Application definitions managed from the Edge Controller. Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowApp", ShowApp)
	// swagger:route POST /auth/ctrl/CreateOperatorCode OperatorCode CreateOperatorCode
	// Create a code for an Operator.
	//
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateOperatorCode", CreateOperatorCode)
	// swagger:route POST /auth/ctrl/DeleteOperatorCode OperatorCode DeleteOperatorCode
	// Delete a code for an Operator.
	//
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteOperatorCode", DeleteOperatorCode)
	// swagger:route POST /auth/ctrl/ShowOperatorCode OperatorCode ShowOperatorCode
	// Show OperatorCodes.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowOperatorCode", ShowOperatorCode)
	// swagger:route POST /auth/ctrl/CreateResTagTable ResTagTable CreateResTagTable
	// Create TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateResTagTable", CreateResTagTable)
	// swagger:route POST /auth/ctrl/DeleteResTagTable ResTagTable DeleteResTagTable
	// Delete TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteResTagTable", DeleteResTagTable)
	// swagger:route POST /auth/ctrl/UpdateResTagTable ResTagTable UpdateResTagTable
	// .
	// Following are `ResTagTable.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = ResTagTableFieldKey
	// 2.1                  = ResTagTableFieldKeyName
	// 2.2                  = ResTagTableFieldKeyOperatorKey
	// 2.2.1                = ResTagTableFieldKeyOperatorKeyName
	// 3                    = ResTagTableFieldTags
	// 3.1                  = ResTagTableFieldTagsKey
	// 3.2                  = ResTagTableFieldTagsValue
	// 4                    = ResTagTableFieldAzone
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateResTagTable", UpdateResTagTable)
	// swagger:route POST /auth/ctrl/ShowResTagTable ResTagTable ShowResTagTable
	// show TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowResTagTable", ShowResTagTable)
	// swagger:route POST /auth/ctrl/AddResTag ResTagTable AddResTag
	// add new tag(s) to TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddResTag", AddResTag)
	// swagger:route POST /auth/ctrl/RemoveResTag ResTagTable RemoveResTag
	// remove existing tag(s) from TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveResTag", RemoveResTag)
	// swagger:route POST /auth/ctrl/GetResTagTable ResTagTableKey GetResTagTable
	// Fetch a copy of the TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetResTagTable", GetResTagTable)
	// swagger:route POST /auth/ctrl/CreateCloudlet Cloudlet CreateCloudlet
	// Create Cloudlet.
	//  Sets up Cloudlet services on the Operators compute resources, and integrated as part of MobiledgeX edge resource portfolio. These resources are managed from the Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateCloudlet", CreateCloudlet)
	group.Match([]string{method}, "/ctrl/StreamCloudlet", StreamCloudlet)
	// swagger:route POST /auth/ctrl/DeleteCloudlet Cloudlet DeleteCloudlet
	// Delete Cloudlet.
	//  Removes the Cloudlet services where they are no longer managed from the Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteCloudlet", DeleteCloudlet)
	// swagger:route POST /auth/ctrl/UpdateCloudlet Cloudlet UpdateCloudlet
	// Update Cloudlet.
	//  Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.
	// Following are `Cloudlet.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = CloudletFieldKey
	// 2.1                  = CloudletFieldKeyOperatorKey
	// 2.1.1                = CloudletFieldKeyOperatorKeyName
	// 2.2                  = CloudletFieldKeyName
	// 5                    = CloudletFieldLocation
	// 5.1                  = CloudletFieldLocationLatitude
	// 5.2                  = CloudletFieldLocationLongitude
	// 5.3                  = CloudletFieldLocationHorizontalAccuracy
	// 5.4                  = CloudletFieldLocationVerticalAccuracy
	// 5.5                  = CloudletFieldLocationAltitude
	// 5.6                  = CloudletFieldLocationCourse
	// 5.7                  = CloudletFieldLocationSpeed
	// 5.8                  = CloudletFieldLocationTimestamp
	// 5.8.1                = CloudletFieldLocationTimestampSeconds
	// 5.8.2                = CloudletFieldLocationTimestampNanos
	// 6                    = CloudletFieldIpSupport
	// 7                    = CloudletFieldStaticIps
	// 8                    = CloudletFieldNumDynamicIps
	// 9                    = CloudletFieldTimeLimits
	// 9.1                  = CloudletFieldTimeLimitsCreateClusterInstTimeout
	// 9.2                  = CloudletFieldTimeLimitsUpdateClusterInstTimeout
	// 9.3                  = CloudletFieldTimeLimitsDeleteClusterInstTimeout
	// 9.4                  = CloudletFieldTimeLimitsCreateAppInstTimeout
	// 9.5                  = CloudletFieldTimeLimitsUpdateAppInstTimeout
	// 9.6                  = CloudletFieldTimeLimitsDeleteAppInstTimeout
	// 10                   = CloudletFieldErrors
	// 11                   = CloudletFieldStatus
	// 11.1                 = CloudletFieldStatusTaskNumber
	// 11.2                 = CloudletFieldStatusMaxTasks
	// 11.3                 = CloudletFieldStatusTaskName
	// 11.4                 = CloudletFieldStatusStepName
	// 12                   = CloudletFieldState
	// 13                   = CloudletFieldCrmOverride
	// 14                   = CloudletFieldDeploymentLocal
	// 15                   = CloudletFieldPlatformType
	// 16                   = CloudletFieldNotifySrvAddr
	// 17                   = CloudletFieldFlavor
	// 17.1                 = CloudletFieldFlavorName
	// 18                   = CloudletFieldPhysicalName
	// 19                   = CloudletFieldEnvVar
	// 19.1                 = CloudletFieldEnvVarKey
	// 19.2                 = CloudletFieldEnvVarValue
	// 20                   = CloudletFieldContainerVersion
	// 21                   = CloudletFieldConfig
	// 21.1                 = CloudletFieldConfigContainerRegistryPath
	// 21.2                 = CloudletFieldConfigCloudletVmImagePath
	// 21.3                 = CloudletFieldConfigNotifyCtrlAddrs
	// 21.4                 = CloudletFieldConfigVaultAddr
	// 21.5                 = CloudletFieldConfigTlsCertFile
	// 21.6                 = CloudletFieldConfigEnvVar
	// 21.6.1               = CloudletFieldConfigEnvVarKey
	// 21.6.2               = CloudletFieldConfigEnvVarValue
	// 21.8                 = CloudletFieldConfigPlatformTag
	// 21.9                 = CloudletFieldConfigTestMode
	// 21.10                = CloudletFieldConfigSpan
	// 21.11                = CloudletFieldConfigCleanupMode
	// 21.12                = CloudletFieldConfigRegion
	// 22                   = CloudletFieldResTagMap
	// 22.1                 = CloudletFieldResTagMapKey
	// 22.2                 = CloudletFieldResTagMapValue
	// 22.2.1               = CloudletFieldResTagMapValueName
	// 22.2.2               = CloudletFieldResTagMapValueOperatorKey
	// 22.2.2.1             = CloudletFieldResTagMapValueOperatorKeyName
	// 23                   = CloudletFieldAccessVars
	// 23.1                 = CloudletFieldAccessVarsKey
	// 23.2                 = CloudletFieldAccessVarsValue
	// 24                   = CloudletFieldVmImageVersion
	// 25                   = CloudletFieldPackageVersion
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateCloudlet", UpdateCloudlet)
	// swagger:route POST /auth/ctrl/ShowCloudlet Cloudlet ShowCloudlet
	// Show Cloudlets.
	//  Lists all the cloudlets managed from Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudlet", ShowCloudlet)
	// swagger:route POST /auth/ctrl/AddCloudletResMapping CloudletResMap AddCloudletResMapping
	// Add Optional Resource tag table.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddCloudletResMapping", AddCloudletResMapping)
	// swagger:route POST /auth/ctrl/RemoveCloudletResMapping CloudletResMap RemoveCloudletResMapping
	// Add Optional Resource tag table.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveCloudletResMapping", RemoveCloudletResMapping)
	// swagger:route POST /auth/ctrl/FindFlavorMatch FlavorMatch FindFlavorMatch
	// Discover if flavor produces a matching platform flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/FindFlavorMatch", FindFlavorMatch)
	// swagger:route POST /auth/ctrl/ShowCloudletInfo CloudletInfo ShowCloudletInfo
	// Show CloudletInfos.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletInfo", ShowCloudletInfo)
	// swagger:route POST /auth/ctrl/CreateClusterInst ClusterInst CreateClusterInst
	// Create Cluster Instance.
	//  Creates an instance of a Cluster on a Cloudlet, defined by a Cluster Key and a Cloudlet Key. ClusterInst is a collection of compute resources on a Cloudlet on which AppInsts are deployed.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateClusterInst", CreateClusterInst)
	group.Match([]string{method}, "/ctrl/StreamClusterInst", StreamClusterInst)
	// swagger:route POST /auth/ctrl/DeleteClusterInst ClusterInst DeleteClusterInst
	// Delete Cluster Instance.
	//  Deletes an instance of a Cluster deployed on a Cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteClusterInst", DeleteClusterInst)
	// swagger:route POST /auth/ctrl/UpdateClusterInst ClusterInst UpdateClusterInst
	// Update Cluster Instance.
	//  Updates an instance of a Cluster deployed on a Cloudlet.
	// Following are `ClusterInst.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = ClusterInstFieldKey
	// 2.1                  = ClusterInstFieldKeyClusterKey
	// 2.1.1                = ClusterInstFieldKeyClusterKeyName
	// 2.2                  = ClusterInstFieldKeyCloudletKey
	// 2.2.1                = ClusterInstFieldKeyCloudletKeyOperatorKey
	// 2.2.1.1              = ClusterInstFieldKeyCloudletKeyOperatorKeyName
	// 2.2.2                = ClusterInstFieldKeyCloudletKeyName
	// 2.3                  = ClusterInstFieldKeyDeveloper
	// 3                    = ClusterInstFieldFlavor
	// 3.1                  = ClusterInstFieldFlavorName
	// 9                    = ClusterInstFieldLiveness
	// 10                   = ClusterInstFieldAuto
	// 4                    = ClusterInstFieldState
	// 5                    = ClusterInstFieldErrors
	// 6                    = ClusterInstFieldCrmOverride
	// 7                    = ClusterInstFieldIpAccess
	// 8                    = ClusterInstFieldAllocatedIp
	// 11                   = ClusterInstFieldNodeFlavor
	// 15                   = ClusterInstFieldDeployment
	// 13                   = ClusterInstFieldNumMasters
	// 14                   = ClusterInstFieldNumNodes
	// 16                   = ClusterInstFieldStatus
	// 16.1                 = ClusterInstFieldStatusTaskNumber
	// 16.2                 = ClusterInstFieldStatusMaxTasks
	// 16.3                 = ClusterInstFieldStatusTaskName
	// 16.4                 = ClusterInstFieldStatusStepName
	// 17                   = ClusterInstFieldExternalVolumeSize
	// 18                   = ClusterInstFieldAutoScalePolicy
	// 19                   = ClusterInstFieldAvailabilityZone
	// 20                   = ClusterInstFieldImageName
	// 21                   = ClusterInstFieldReservable
	// 22                   = ClusterInstFieldReservedBy
	// 23                   = ClusterInstFieldSharedVolumeSize
	// 24                   = ClusterInstFieldPrivacyPolicy
	// 25                   = ClusterInstFieldMasterNodeFlavor
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateClusterInst", UpdateClusterInst)
	// swagger:route POST /auth/ctrl/ShowClusterInst ClusterInst ShowClusterInst
	// Show Cluster Instances.
	//  Lists all the cluster instances managed by Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowClusterInst", ShowClusterInst)
	// swagger:route POST /auth/ctrl/CreateAppInst AppInst CreateAppInst
	// Create Application Instance.
	//  Creates an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. Many of the fields here are inherited from the App definition.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAppInst", CreateAppInst)
	group.Match([]string{method}, "/ctrl/StreamAppInst", StreamAppInst)
	// swagger:route POST /auth/ctrl/DeleteAppInst AppInst DeleteAppInst
	// Delete Application Instance.
	//  Deletes an instance of the App from the Cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAppInst", DeleteAppInst)
	// swagger:route POST /auth/ctrl/RefreshAppInst AppInst RefreshAppInst
	// Refresh Application Instance.
	//  Restarts an App instance with new App settings or image.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RefreshAppInst", RefreshAppInst)
	// swagger:route POST /auth/ctrl/UpdateAppInst AppInst UpdateAppInst
	// Update Application Instance.
	//  Updates an Application instance and then refreshes it.
	// Following are `AppInst.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = AppInstFieldKey
	// 2.1                  = AppInstFieldKeyAppKey
	// 2.1.1                = AppInstFieldKeyAppKeyDeveloperKey
	// 2.1.1.2              = AppInstFieldKeyAppKeyDeveloperKeyName
	// 2.1.2                = AppInstFieldKeyAppKeyName
	// 2.1.3                = AppInstFieldKeyAppKeyVersion
	// 2.4                  = AppInstFieldKeyClusterInstKey
	// 2.4.1                = AppInstFieldKeyClusterInstKeyClusterKey
	// 2.4.1.1              = AppInstFieldKeyClusterInstKeyClusterKeyName
	// 2.4.2                = AppInstFieldKeyClusterInstKeyCloudletKey
	// 2.4.2.1              = AppInstFieldKeyClusterInstKeyCloudletKeyOperatorKey
	// 2.4.2.1.1            = AppInstFieldKeyClusterInstKeyCloudletKeyOperatorKeyName
	// 2.4.2.2              = AppInstFieldKeyClusterInstKeyCloudletKeyName
	// 2.4.3                = AppInstFieldKeyClusterInstKeyDeveloper
	// 3                    = AppInstFieldCloudletLoc
	// 3.1                  = AppInstFieldCloudletLocLatitude
	// 3.2                  = AppInstFieldCloudletLocLongitude
	// 3.3                  = AppInstFieldCloudletLocHorizontalAccuracy
	// 3.4                  = AppInstFieldCloudletLocVerticalAccuracy
	// 3.5                  = AppInstFieldCloudletLocAltitude
	// 3.6                  = AppInstFieldCloudletLocCourse
	// 3.7                  = AppInstFieldCloudletLocSpeed
	// 3.8                  = AppInstFieldCloudletLocTimestamp
	// 3.8.1                = AppInstFieldCloudletLocTimestampSeconds
	// 3.8.2                = AppInstFieldCloudletLocTimestampNanos
	// 4                    = AppInstFieldUri
	// 6                    = AppInstFieldLiveness
	// 9                    = AppInstFieldMappedPorts
	// 9.1                  = AppInstFieldMappedPortsProto
	// 9.2                  = AppInstFieldMappedPortsInternalPort
	// 9.3                  = AppInstFieldMappedPortsPublicPort
	// 9.4                  = AppInstFieldMappedPortsPathPrefix
	// 9.5                  = AppInstFieldMappedPortsFqdnPrefix
	// 9.6                  = AppInstFieldMappedPortsEndPort
	// 12                   = AppInstFieldFlavor
	// 12.1                 = AppInstFieldFlavorName
	// 14                   = AppInstFieldState
	// 15                   = AppInstFieldErrors
	// 16                   = AppInstFieldCrmOverride
	// 17                   = AppInstFieldRuntimeInfo
	// 17.1                 = AppInstFieldRuntimeInfoContainerIds
	// 21                   = AppInstFieldCreatedAt
	// 21.1                 = AppInstFieldCreatedAtSeconds
	// 21.2                 = AppInstFieldCreatedAtNanos
	// 22                   = AppInstFieldAutoClusterIpAccess
	// 23                   = AppInstFieldStatus
	// 23.1                 = AppInstFieldStatusTaskNumber
	// 23.2                 = AppInstFieldStatusMaxTasks
	// 23.3                 = AppInstFieldStatusTaskName
	// 23.4                 = AppInstFieldStatusStepName
	// 24                   = AppInstFieldRevision
	// 25                   = AppInstFieldForceUpdate
	// 26                   = AppInstFieldUpdateMultiple
	// 27                   = AppInstFieldConfigs
	// 27.1                 = AppInstFieldConfigsKind
	// 27.2                 = AppInstFieldConfigsConfig
	// 28                   = AppInstFieldSharedVolumeSize
	// 29                   = AppInstFieldHealthCheck
	// 30                   = AppInstFieldPrivacyPolicy
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAppInst", UpdateAppInst)
	// swagger:route POST /auth/ctrl/ShowAppInst AppInst ShowAppInst
	// Show Application Instances.
	//  Lists all the Application instances managed by the Edge Controller. Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAppInst", ShowAppInst)
	// swagger:route POST /auth/ctrl/CreateAutoScalePolicy AutoScalePolicy CreateAutoScalePolicy
	// Create an Auto Scale Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAutoScalePolicy", CreateAutoScalePolicy)
	// swagger:route POST /auth/ctrl/DeleteAutoScalePolicy AutoScalePolicy DeleteAutoScalePolicy
	// Delete an Auto Scale Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAutoScalePolicy", DeleteAutoScalePolicy)
	// swagger:route POST /auth/ctrl/UpdateAutoScalePolicy AutoScalePolicy UpdateAutoScalePolicy
	// Update an Auto Scale Policy.
	// Following are `AutoScalePolicy.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = AutoScalePolicyFieldKey
	// 2.1                  = AutoScalePolicyFieldKeyDeveloper
	// 2.2                  = AutoScalePolicyFieldKeyName
	// 3                    = AutoScalePolicyFieldMinNodes
	// 4                    = AutoScalePolicyFieldMaxNodes
	// 5                    = AutoScalePolicyFieldScaleUpCpuThresh
	// 6                    = AutoScalePolicyFieldScaleDownCpuThresh
	// 7                    = AutoScalePolicyFieldTriggerTimeSec
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAutoScalePolicy", UpdateAutoScalePolicy)
	// swagger:route POST /auth/ctrl/ShowAutoScalePolicy AutoScalePolicy ShowAutoScalePolicy
	// Show Auto Scale Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAutoScalePolicy", ShowAutoScalePolicy)
	// swagger:route POST /auth/ctrl/CreateAutoProvPolicy AutoProvPolicy CreateAutoProvPolicy
	// Create an Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAutoProvPolicy", CreateAutoProvPolicy)
	// swagger:route POST /auth/ctrl/DeleteAutoProvPolicy AutoProvPolicy DeleteAutoProvPolicy
	// Delete an Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAutoProvPolicy", DeleteAutoProvPolicy)
	// swagger:route POST /auth/ctrl/UpdateAutoProvPolicy AutoProvPolicy UpdateAutoProvPolicy
	// Update an Auto Provisioning Policy.
	// Following are `AutoProvPolicy.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = AutoProvPolicyFieldKey
	// 2.1                  = AutoProvPolicyFieldKeyDeveloper
	// 2.2                  = AutoProvPolicyFieldKeyName
	// 3                    = AutoProvPolicyFieldDeployClientCount
	// 4                    = AutoProvPolicyFieldDeployIntervalCount
	// 5                    = AutoProvPolicyFieldCloudlets
	// 5.1                  = AutoProvPolicyFieldCloudletsKey
	// 5.1.1                = AutoProvPolicyFieldCloudletsKeyOperatorKey
	// 5.1.1.1              = AutoProvPolicyFieldCloudletsKeyOperatorKeyName
	// 5.1.2                = AutoProvPolicyFieldCloudletsKeyName
	// 5.2                  = AutoProvPolicyFieldCloudletsLoc
	// 5.2.1                = AutoProvPolicyFieldCloudletsLocLatitude
	// 5.2.2                = AutoProvPolicyFieldCloudletsLocLongitude
	// 5.2.3                = AutoProvPolicyFieldCloudletsLocHorizontalAccuracy
	// 5.2.4                = AutoProvPolicyFieldCloudletsLocVerticalAccuracy
	// 5.2.5                = AutoProvPolicyFieldCloudletsLocAltitude
	// 5.2.6                = AutoProvPolicyFieldCloudletsLocCourse
	// 5.2.7                = AutoProvPolicyFieldCloudletsLocSpeed
	// 5.2.8                = AutoProvPolicyFieldCloudletsLocTimestamp
	// 5.2.8.1              = AutoProvPolicyFieldCloudletsLocTimestampSeconds
	// 5.2.8.2              = AutoProvPolicyFieldCloudletsLocTimestampNanos
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAutoProvPolicy", UpdateAutoProvPolicy)
	// swagger:route POST /auth/ctrl/ShowAutoProvPolicy AutoProvPolicy ShowAutoProvPolicy
	// Show Auto Provisioning Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAutoProvPolicy", ShowAutoProvPolicy)
	// swagger:route POST /auth/ctrl/AddAutoProvPolicyCloudlet AutoProvPolicyCloudlet AddAutoProvPolicyCloudlet
	// Add a Cloudlet to the Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddAutoProvPolicyCloudlet", AddAutoProvPolicyCloudlet)
	// swagger:route POST /auth/ctrl/RemoveAutoProvPolicyCloudlet AutoProvPolicyCloudlet RemoveAutoProvPolicyCloudlet
	// Remove a Cloudlet from the Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveAutoProvPolicyCloudlet", RemoveAutoProvPolicyCloudlet)
	// swagger:route POST /auth/ctrl/CreateCloudletPool CloudletPool CreateCloudletPool
	// Create a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateCloudletPool", CreateCloudletPool)
	// swagger:route POST /auth/ctrl/DeleteCloudletPool CloudletPool DeleteCloudletPool
	// Delete a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteCloudletPool", DeleteCloudletPool)
	// swagger:route POST /auth/ctrl/ShowCloudletPool CloudletPool ShowCloudletPool
	// Show CloudletPools.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletPool", ShowCloudletPool)
	// swagger:route POST /auth/ctrl/CreateCloudletPoolMember CloudletPoolMember CreateCloudletPoolMember
	// Add a Cloudlet to a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateCloudletPoolMember", CreateCloudletPoolMember)
	// swagger:route POST /auth/ctrl/DeleteCloudletPoolMember CloudletPoolMember DeleteCloudletPoolMember
	// Remove a Cloudlet from a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteCloudletPoolMember", DeleteCloudletPoolMember)
	// swagger:route POST /auth/ctrl/ShowCloudletPoolMember CloudletPoolMember ShowCloudletPoolMember
	// Show the Cloudlet to CloudletPool relationships.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletPoolMember", ShowCloudletPoolMember)
	// swagger:route POST /auth/ctrl/ShowPoolsForCloudlet CloudletKey ShowPoolsForCloudlet
	// Show CloudletPools that have Cloudlet as a member.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowPoolsForCloudlet", ShowPoolsForCloudlet)
	// swagger:route POST /auth/ctrl/ShowCloudletsForPool CloudletPoolKey ShowCloudletsForPool
	// Show Cloudlets that belong to the Pool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletsForPool", ShowCloudletsForPool)
	// swagger:route POST /auth/ctrl/RunCommand ExecRequest RunCommand
	// Run a Command or Shell on a container.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RunCommand", RunCommand)
	// swagger:route POST /auth/ctrl/RunConsole ExecRequest RunConsole
	// Run console on a VM.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RunConsole", RunConsole)
	// swagger:route POST /auth/ctrl/ShowLogs ExecRequest ShowLogs
	// View logs for AppInst.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowLogs", ShowLogs)
	// swagger:route POST /auth/ctrl/ShowNode Node ShowNode
	// Show all Nodes connected to all Controllers.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowNode", ShowNode)
	// swagger:route POST /auth/ctrl/CreatePrivacyPolicy PrivacyPolicy CreatePrivacyPolicy
	// Create a Privacy Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreatePrivacyPolicy", CreatePrivacyPolicy)
	// swagger:route POST /auth/ctrl/DeletePrivacyPolicy PrivacyPolicy DeletePrivacyPolicy
	// Delete a Privacy policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeletePrivacyPolicy", DeletePrivacyPolicy)
	// swagger:route POST /auth/ctrl/UpdatePrivacyPolicy PrivacyPolicy UpdatePrivacyPolicy
	// Update a Privacy policy.
	// Following are `PrivacyPolicy.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = PrivacyPolicyFieldKey
	// 2.1                  = PrivacyPolicyFieldKeyDeveloper
	// 2.2                  = PrivacyPolicyFieldKeyName
	// 3                    = PrivacyPolicyFieldOutboundSecurityRules
	// 3.1                  = PrivacyPolicyFieldOutboundSecurityRulesProtocol
	// 3.2                  = PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin
	// 3.3                  = PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax
	// 3.4                  = PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdatePrivacyPolicy", UpdatePrivacyPolicy)
	// swagger:route POST /auth/ctrl/ShowPrivacyPolicy PrivacyPolicy ShowPrivacyPolicy
	// Show Privacy Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowPrivacyPolicy", ShowPrivacyPolicy)
	// swagger:route POST /auth/ctrl/ShowCloudletRefs CloudletRefs ShowCloudletRefs
	// Show CloudletRefs (debug only).
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletRefs", ShowCloudletRefs)
	// swagger:route POST /auth/ctrl/ShowClusterRefs ClusterRefs ShowClusterRefs
	// Show ClusterRefs (debug only).
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowClusterRefs", ShowClusterRefs)
	// swagger:route POST /auth/ctrl/UpdateSettings Settings UpdateSettings
	// Update settings.
	// Following are `Settings.fields` values to be used to specify which fields to update:
	// ```
	// 2                    = SettingsFieldShepherdMetricsCollectionInterval
	// 3                    = SettingsFieldShepherdHealthCheckRetries
	// 4                    = SettingsFieldShepherdHealthCheckInterval
	// 5                    = SettingsFieldAutoDeployIntervalSec
	// 6                    = SettingsFieldAutoDeployOffsetSec
	// 7                    = SettingsFieldAutoDeployMaxIntervals
	// 8                    = SettingsFieldCreateAppInstTimeout
	// 9                    = SettingsFieldUpdateAppInstTimeout
	// 10                   = SettingsFieldDeleteAppInstTimeout
	// 11                   = SettingsFieldCreateClusterInstTimeout
	// 12                   = SettingsFieldUpdateClusterInstTimeout
	// 13                   = SettingsFieldDeleteClusterInstTimeout
	// 14                   = SettingsFieldMasterNodeFlavor
	// 15                   = SettingsFieldLoadBalancerMaxPortRange
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateSettings", UpdateSettings)
	// swagger:route POST /auth/ctrl/ResetSettings Settings ResetSettings
	// Reset all settings to their defaults.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ResetSettings", ResetSettings)
	// swagger:route POST /auth/ctrl/ShowSettings Settings ShowSettings
	// Show settings.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowSettings", ShowSettings)
}
