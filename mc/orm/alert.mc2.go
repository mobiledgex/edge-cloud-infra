// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert.proto

package orm

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/labstack/echo"
	"github.com/mobiledgex/edge-cloud-infra/mc/ctrlclient"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func ShowAlert(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionAlert{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	rc.Database = database
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)

	obj := &in.Alert
	var authz ctrlclient.ShowAlertAuthz
	if !rc.SkipAuthz {
		authz, err = newShowAlertAuthz(ctx, rc.Region, rc.Username, ResourceAlert, ActionView)
		if err != nil {
			return err
		}
	}

	cb := func(res *edgeproto.Alert) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlclient.ShowAlertStream(ctx, rc, obj, connCache, authz, cb)
	if err != nil {
		return err
	}
	return nil
}

func addControllerApis(method string, group *echo.Group) {
	// swagger:route POST /auth/ctrl/ShowAlert Alert ShowAlert
	// Show alerts.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAlert", ShowAlert)
	// swagger:route POST /auth/ctrl/CreateAlertPolicy AlertPolicy CreateAlertPolicy
	// Create an Alert Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAlertPolicy", CreateAlertPolicy)
	// swagger:route POST /auth/ctrl/DeleteAlertPolicy AlertPolicy DeleteAlertPolicy
	// Delete an Alert Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAlertPolicy", DeleteAlertPolicy)
	// swagger:route POST /auth/ctrl/UpdateAlertPolicy AlertPolicy UpdateAlertPolicy
	// Update an Alert Policy.
	// The following values should be added to `AlertPolicy.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// CpuUtilizationLimit: 3
	// MemUtilizationLimit: 4
	// DiskUtilizationLimit: 5
	// ActiveConnLimit: 6
	// Severity: 7
	// TriggerTime: 8
	// Labels: 9
	// LabelsKey: 9.1
	// LabelsValue: 9.2
	// Annotations: 10
	// AnnotationsKey: 10.1
	// AnnotationsValue: 10.2
	// Description: 11
	// DeletePrepare: 12
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAlertPolicy", UpdateAlertPolicy)
	// swagger:route POST /auth/ctrl/ShowAlertPolicy AlertPolicy ShowAlertPolicy
	// Show Alert Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAlertPolicy", ShowAlertPolicy)
	// swagger:route POST /auth/ctrl/UpdateSettings Settings UpdateSettings
	// Update settings.
	// The following values should be added to `Settings.fields` field array to specify which fields will be updated.
	// ```
	// ShepherdMetricsCollectionInterval: 2
	// ShepherdAlertEvaluationInterval: 20
	// ShepherdMetricsScrapeInterval: 40
	// ShepherdHealthCheckRetries: 3
	// ShepherdHealthCheckInterval: 4
	// AutoDeployIntervalSec: 5
	// AutoDeployOffsetSec: 6
	// AutoDeployMaxIntervals: 7
	// CreateAppInstTimeout: 8
	// UpdateAppInstTimeout: 9
	// DeleteAppInstTimeout: 10
	// CreateClusterInstTimeout: 11
	// UpdateClusterInstTimeout: 12
	// DeleteClusterInstTimeout: 13
	// MasterNodeFlavor: 14
	// MaxTrackedDmeClients: 16
	// ChefClientInterval: 17
	// InfluxDbMetricsRetention: 18
	// CloudletMaintenanceTimeout: 19
	// UpdateVmPoolTimeout: 21
	// UpdateTrustPolicyTimeout: 22
	// DmeApiMetricsCollectionInterval: 23
	// EdgeEventsMetricsCollectionInterval: 24
	// CleanupReservableAutoClusterIdletime: 25
	// InfluxDbCloudletUsageMetricsRetention: 26
	// CreateCloudletTimeout: 27
	// UpdateCloudletTimeout: 28
	// LocationTileSideLengthKm: 29
	// EdgeEventsMetricsContinuousQueriesCollectionIntervals: 30
	// EdgeEventsMetricsContinuousQueriesCollectionIntervalsInterval: 30.1
	// EdgeEventsMetricsContinuousQueriesCollectionIntervalsRetention: 30.2
	// InfluxDbDownsampledMetricsRetention: 31
	// InfluxDbEdgeEventsMetricsRetention: 32
	// AppinstClientCleanupInterval: 33
	// ClusterAutoScaleAveragingDurationSec: 34
	// ClusterAutoScaleRetryDelay: 35
	// AlertPolicyMinTriggerTime: 36
	// DisableRateLimit: 37
	// RateLimitMaxTrackedIps: 39
	// ResourceSnapshotThreadInterval: 41
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateSettings", UpdateSettings)
	// swagger:route POST /auth/ctrl/ResetSettings Settings ResetSettings
	// Reset all settings to their defaults.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ResetSettings", ResetSettings)
	// swagger:route POST /auth/ctrl/ShowSettings Settings ShowSettings
	// Show settings.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowSettings", ShowSettings)
	// swagger:route POST /auth/ctrl/CreateFlavor Flavor CreateFlavor
	// Create a Flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateFlavor", CreateFlavor)
	// swagger:route POST /auth/ctrl/DeleteFlavor Flavor DeleteFlavor
	// Delete a Flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteFlavor", DeleteFlavor)
	// swagger:route POST /auth/ctrl/UpdateFlavor Flavor UpdateFlavor
	// Update a Flavor.
	// The following values should be added to `Flavor.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyName: 2.1
	// Ram: 3
	// Vcpus: 4
	// Disk: 5
	// OptResMap: 6
	// OptResMapKey: 6.1
	// OptResMapValue: 6.2
	// DeletePrepare: 7
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateFlavor", UpdateFlavor)
	// swagger:route POST /auth/ctrl/ShowFlavor Flavor ShowFlavor
	// Show Flavors.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowFlavor", ShowFlavor)
	// swagger:route POST /auth/ctrl/AddFlavorRes Flavor AddFlavorRes
	// Add Optional Resource.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddFlavorRes", AddFlavorRes)
	// swagger:route POST /auth/ctrl/RemoveFlavorRes Flavor RemoveFlavorRes
	// Remove Optional Resource.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveFlavorRes", RemoveFlavorRes)
	// swagger:route POST /auth/ctrl/CreateOperatorCode OperatorCode CreateOperatorCode
	// Create Operator Code.
	//  Create a code for an Operator.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateOperatorCode", CreateOperatorCode)
	// swagger:route POST /auth/ctrl/DeleteOperatorCode OperatorCode DeleteOperatorCode
	// Delete Operator Code.
	//  Delete a code for an Operator.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteOperatorCode", DeleteOperatorCode)
	// swagger:route POST /auth/ctrl/ShowOperatorCode OperatorCode ShowOperatorCode
	// Show Operator Code.
	//  Show Codes for an Operator.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowOperatorCode", ShowOperatorCode)
	// swagger:route POST /auth/ctrl/CreateResTagTable ResTagTable CreateResTagTable
	// Create TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateResTagTable", CreateResTagTable)
	// swagger:route POST /auth/ctrl/DeleteResTagTable ResTagTable DeleteResTagTable
	// Delete TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteResTagTable", DeleteResTagTable)
	// swagger:route POST /auth/ctrl/UpdateResTagTable ResTagTable UpdateResTagTable
	// Update TagTable.
	// The following values should be added to `ResTagTable.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyName: 2.1
	// KeyOrganization: 2.2
	// Tags: 3
	// TagsKey: 3.1
	// TagsValue: 3.2
	// Azone: 4
	// DeletePrepare: 5
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateResTagTable", UpdateResTagTable)
	// swagger:route POST /auth/ctrl/ShowResTagTable ResTagTable ShowResTagTable
	// Show TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowResTagTable", ShowResTagTable)
	// swagger:route POST /auth/ctrl/AddResTag ResTagTable AddResTag
	// Add new tag(s) to TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddResTag", AddResTag)
	// swagger:route POST /auth/ctrl/RemoveResTag ResTagTable RemoveResTag
	// Remove existing tag(s) from TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveResTag", RemoveResTag)
	// swagger:route POST /auth/ctrl/GetResTagTable ResTagTableKey GetResTagTable
	// Fetch a copy of the TagTable.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetResTagTable", GetResTagTable)
	// swagger:route POST /auth/ctrl/CreateAutoScalePolicy AutoScalePolicy CreateAutoScalePolicy
	// Create an Auto Scale Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAutoScalePolicy", CreateAutoScalePolicy)
	// swagger:route POST /auth/ctrl/DeleteAutoScalePolicy AutoScalePolicy DeleteAutoScalePolicy
	// Delete an Auto Scale Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAutoScalePolicy", DeleteAutoScalePolicy)
	// swagger:route POST /auth/ctrl/UpdateAutoScalePolicy AutoScalePolicy UpdateAutoScalePolicy
	// Update an Auto Scale Policy.
	// The following values should be added to `AutoScalePolicy.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// MinNodes: 3
	// MaxNodes: 4
	// ScaleUpCpuThresh: 5
	// ScaleDownCpuThresh: 6
	// TriggerTimeSec: 7
	// StabilizationWindowSec: 8
	// TargetCpu: 9
	// TargetMem: 10
	// TargetActiveConnections: 11
	// DeletePrepare: 12
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAutoScalePolicy", UpdateAutoScalePolicy)
	// swagger:route POST /auth/ctrl/ShowAutoScalePolicy AutoScalePolicy ShowAutoScalePolicy
	// Show Auto Scale Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAutoScalePolicy", ShowAutoScalePolicy)
	// swagger:route POST /auth/ctrl/CreateTrustPolicy TrustPolicy CreateTrustPolicy
	// Create a Trust Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateTrustPolicy", CreateTrustPolicy)
	// swagger:route POST /auth/ctrl/DeleteTrustPolicy TrustPolicy DeleteTrustPolicy
	// Delete a Trust policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteTrustPolicy", DeleteTrustPolicy)
	// swagger:route POST /auth/ctrl/UpdateTrustPolicy TrustPolicy UpdateTrustPolicy
	// Update a Trust policy.
	// The following values should be added to `TrustPolicy.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// OutboundSecurityRules: 3
	// OutboundSecurityRulesProtocol: 3.1
	// OutboundSecurityRulesPortRangeMin: 3.2
	// OutboundSecurityRulesPortRangeMax: 3.3
	// OutboundSecurityRulesRemoteCidr: 3.4
	// DeletePrepare: 4
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateTrustPolicy", UpdateTrustPolicy)
	// swagger:route POST /auth/ctrl/ShowTrustPolicy TrustPolicy ShowTrustPolicy
	// Show Trust Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowTrustPolicy", ShowTrustPolicy)
	// swagger:route POST /auth/ctrl/CreateApp App CreateApp
	// Create Application.
	//  Creates a definition for an application instance for Cloudlet deployment.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateApp", CreateApp)
	// swagger:route POST /auth/ctrl/DeleteApp App DeleteApp
	// Delete Application.
	//  Deletes a definition of an Application instance. Make sure no other application instances exist with that definition. If they do exist, you must delete those Application instances first.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteApp", DeleteApp)
	// swagger:route POST /auth/ctrl/UpdateApp App UpdateApp
	// Update Application.
	//  Updates the definition of an Application instance.
	// The following values should be added to `App.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// KeyVersion: 2.3
	// ImagePath: 4
	// ImageType: 5
	// AccessPorts: 7
	// DefaultFlavor: 9
	// DefaultFlavorName: 9.1
	// AuthPublicKey: 12
	// Command: 13
	// Annotations: 14
	// Deployment: 15
	// DeploymentManifest: 16
	// DeploymentGenerator: 17
	// AndroidPackageName: 18
	// DelOpt: 20
	// Configs: 21
	// ConfigsKind: 21.1
	// ConfigsConfig: 21.2
	// ScaleWithCluster: 22
	// InternalPorts: 23
	// Revision: 24
	// OfficialFqdn: 25
	// Md5Sum: 26
	// AutoProvPolicy: 28
	// AccessType: 29
	// DeletePrepare: 31
	// AutoProvPolicies: 32
	// TemplateDelimiter: 33
	// SkipHcPorts: 34
	// CreatedAt: 35
	// CreatedAtSeconds: 35.1
	// CreatedAtNanos: 35.2
	// UpdatedAt: 36
	// UpdatedAtSeconds: 36.1
	// UpdatedAtNanos: 36.2
	// Trusted: 37
	// RequiredOutboundConnections: 38
	// RequiredOutboundConnectionsProtocol: 38.1
	// RequiredOutboundConnectionsPortRangeMin: 38.2
	// RequiredOutboundConnectionsPortRangeMax: 38.3
	// RequiredOutboundConnectionsRemoteCidr: 38.4
	// AllowServerless: 39
	// ServerlessConfig: 40
	// ServerlessConfigVcpus: 40.1
	// ServerlessConfigVcpusWhole: 40.1.1
	// ServerlessConfigVcpusNanos: 40.1.2
	// ServerlessConfigRam: 40.2
	// ServerlessConfigMinReplicas: 40.3
	// VmAppOsType: 41
	// AlertPolicies: 42
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateApp", UpdateApp)
	// swagger:route POST /auth/ctrl/ShowApp App ShowApp
	// Show Applications.
	//  Lists all Application definitions managed from the Edge Controller. Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowApp", ShowApp)
	// swagger:route POST /auth/ctrl/AddAppAutoProvPolicy AppAutoProvPolicy AddAppAutoProvPolicy
	// Add an AutoProvPolicy to the App.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddAppAutoProvPolicy", AddAppAutoProvPolicy)
	// swagger:route POST /auth/ctrl/RemoveAppAutoProvPolicy AppAutoProvPolicy RemoveAppAutoProvPolicy
	// Remove an AutoProvPolicy from the App.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveAppAutoProvPolicy", RemoveAppAutoProvPolicy)
	// swagger:route POST /auth/ctrl/AddAppAlertPolicy AppAlertPolicy AddAppAlertPolicy
	// Add an AlertPolicy to the App.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddAppAlertPolicy", AddAppAlertPolicy)
	// swagger:route POST /auth/ctrl/RemoveAppAlertPolicy AppAlertPolicy RemoveAppAlertPolicy
	// Remove an AlertPolicy from the App.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveAppAlertPolicy", RemoveAppAlertPolicy)
	// swagger:route POST /auth/ctrl/ShowCloudletsForAppDeployment DeploymentCloudletRequest ShowCloudletsForAppDeployment
	// Discover cloudlets supporting deployments of App.
	// DefaultFlavor
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletsForAppDeployment", ShowCloudletsForAppDeployment)
	// swagger:route POST /auth/ctrl/CreateGPUDriver GPUDriver CreateGPUDriver
	// Create GPU Driver.
	//  Creates GPU driver with all the config required to install it.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateGPUDriver", CreateGPUDriver)
	// swagger:route POST /auth/ctrl/DeleteGPUDriver GPUDriver DeleteGPUDriver
	// Delete GPU Driver.
	//  Deletes GPU driver given that it is not used by any cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteGPUDriver", DeleteGPUDriver)
	// swagger:route POST /auth/ctrl/UpdateGPUDriver GPUDriver UpdateGPUDriver
	// Update GPU Driver.
	//  Updates GPU driver config.
	// The following values should be added to `GPUDriver.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyName: 2.1
	// KeyOrganization: 2.2
	// Builds: 3
	// BuildsName: 3.1
	// BuildsDriverPath: 3.2
	// BuildsDriverPathCreds: 3.3
	// BuildsOperatingSystem: 3.4
	// BuildsKernelVersion: 3.5
	// BuildsHypervisorInfo: 3.6
	// BuildsMd5Sum: 3.7
	// LicenseConfig: 4
	// LicenseConfigMd5Sum: 5
	// Properties: 6
	// PropertiesKey: 6.1
	// PropertiesValue: 6.2
	// State: 7
	// IgnoreState: 8
	// DeletePrepare: 9
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateGPUDriver", UpdateGPUDriver)
	// swagger:route POST /auth/ctrl/ShowGPUDriver GPUDriver ShowGPUDriver
	// Show GPU Drivers.
	//  Lists all the MobiledgeX created GPU drivers and operator created GPU drivers.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowGPUDriver", ShowGPUDriver)
	// swagger:route POST /auth/ctrl/AddGPUDriverBuild GPUDriverBuildMember AddGPUDriverBuild
	// Add GPU Driver Build.
	//  Adds new build to GPU driver.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddGPUDriverBuild", AddGPUDriverBuild)
	// swagger:route POST /auth/ctrl/RemoveGPUDriverBuild GPUDriverBuildMember RemoveGPUDriverBuild
	// Remove GPU Driver Build.
	//  Removes build from GPU driver.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveGPUDriverBuild", RemoveGPUDriverBuild)
	// swagger:route POST /auth/ctrl/GetGPUDriverBuildURL GPUDriverBuildMember GetGPUDriverBuildURL
	// Get GPU Driver Build URL.
	//  Returns a time-limited signed URL to download GPU driver.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetGPUDriverBuildURL", GetGPUDriverBuildURL)
	// swagger:route POST /auth/ctrl/CreateCloudlet Cloudlet CreateCloudlet
	// Create Cloudlet.
	//  Sets up Cloudlet services on the Operators compute resources, and integrated as part of MobiledgeX edge resource portfolio. These resources are managed from the Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateCloudlet", CreateCloudlet)
	// swagger:route POST /auth/ctrl/DeleteCloudlet Cloudlet DeleteCloudlet
	// Delete Cloudlet.
	//  Removes the Cloudlet services where they are no longer managed from the Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteCloudlet", DeleteCloudlet)
	// swagger:route POST /auth/ctrl/UpdateCloudlet Cloudlet UpdateCloudlet
	// Update Cloudlet.
	//  Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.
	// The following values should be added to `Cloudlet.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// Location: 5
	// LocationLatitude: 5.1
	// LocationLongitude: 5.2
	// LocationHorizontalAccuracy: 5.3
	// LocationVerticalAccuracy: 5.4
	// LocationAltitude: 5.5
	// LocationCourse: 5.6
	// LocationSpeed: 5.7
	// LocationTimestamp: 5.8
	// LocationTimestampSeconds: 5.8.1
	// LocationTimestampNanos: 5.8.2
	// IpSupport: 6
	// StaticIps: 7
	// NumDynamicIps: 8
	// TimeLimits: 9
	// TimeLimitsCreateClusterInstTimeout: 9.1
	// TimeLimitsUpdateClusterInstTimeout: 9.2
	// TimeLimitsDeleteClusterInstTimeout: 9.3
	// TimeLimitsCreateAppInstTimeout: 9.4
	// TimeLimitsUpdateAppInstTimeout: 9.5
	// TimeLimitsDeleteAppInstTimeout: 9.6
	// Errors: 10
	// Status: 11
	// StatusTaskNumber: 11.1
	// StatusMaxTasks: 11.2
	// StatusTaskName: 11.3
	// StatusStepName: 11.4
	// StatusMsgCount: 11.5
	// StatusMsgs: 11.6
	// State: 12
	// CrmOverride: 13
	// DeploymentLocal: 14
	// PlatformType: 15
	// NotifySrvAddr: 16
	// Flavor: 17
	// FlavorName: 17.1
	// PhysicalName: 18
	// EnvVar: 19
	// EnvVarKey: 19.1
	// EnvVarValue: 19.2
	// ContainerVersion: 20
	// Config: 21
	// ConfigContainerRegistryPath: 21.1
	// ConfigCloudletVmImagePath: 21.2
	// ConfigNotifyCtrlAddrs: 21.3
	// ConfigTlsCertFile: 21.5
	// ConfigTlsKeyFile: 21.20
	// ConfigTlsCaFile: 21.21
	// ConfigEnvVar: 21.6
	// ConfigEnvVarKey: 21.6.1
	// ConfigEnvVarValue: 21.6.2
	// ConfigPlatformTag: 21.8
	// ConfigTestMode: 21.9
	// ConfigSpan: 21.10
	// ConfigCleanupMode: 21.11
	// ConfigRegion: 21.12
	// ConfigCommercialCerts: 21.13
	// ConfigUseVaultPki: 21.14
	// ConfigAppDnsRoot: 21.16
	// ConfigChefServerPath: 21.17
	// ConfigChefClientInterval: 21.18
	// ConfigDeploymentTag: 21.19
	// ConfigCrmAccessPrivateKey: 21.22
	// ConfigAccessApiAddr: 21.23
	// ConfigCacheDir: 21.24
	// ResTagMap: 22
	// ResTagMapKey: 22.1
	// ResTagMapValue: 22.2
	// ResTagMapValueName: 22.2.1
	// ResTagMapValueOrganization: 22.2.2
	// AccessVars: 23
	// AccessVarsKey: 23.1
	// AccessVarsValue: 23.2
	// VmImageVersion: 24
	// Deployment: 26
	// InfraApiAccess: 27
	// InfraConfig: 28
	// InfraConfigExternalNetworkName: 28.1
	// InfraConfigFlavorName: 28.2
	// ChefClientKey: 29
	// ChefClientKeyKey: 29.1
	// ChefClientKeyValue: 29.2
	// MaintenanceState: 30
	// OverridePolicyContainerVersion: 31
	// VmPool: 32
	// CrmAccessPublicKey: 33
	// CrmAccessKeyUpgradeRequired: 34
	// CreatedAt: 35
	// CreatedAtSeconds: 35.1
	// CreatedAtNanos: 35.2
	// UpdatedAt: 36
	// UpdatedAtSeconds: 36.1
	// UpdatedAtNanos: 36.2
	// TrustPolicy: 37
	// TrustPolicyState: 38
	// ResourceQuotas: 39
	// ResourceQuotasName: 39.1
	// ResourceQuotasValue: 39.2
	// ResourceQuotasAlertThreshold: 39.3
	// DefaultResourceAlertThreshold: 40
	// HostController: 41
	// KafkaCluster: 42
	// KafkaUser: 43
	// KafkaPassword: 44
	// GpuConfig: 45
	// GpuConfigDriver: 45.1
	// GpuConfigDriverName: 45.1.1
	// GpuConfigDriverOrganization: 45.1.2
	// GpuConfigProperties: 45.2
	// GpuConfigPropertiesKey: 45.2.1
	// GpuConfigPropertiesValue: 45.2.2
	// EnableDefaultServerlessCluster: 46
	// AllianceOrgs: 47
	// SingleKubernetesClusterOwner: 48
	// DeletePrepare: 49
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateCloudlet", UpdateCloudlet)
	// swagger:route POST /auth/ctrl/ShowCloudlet Cloudlet ShowCloudlet
	// Show Cloudlets.
	//  Lists all the cloudlets managed from Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudlet", ShowCloudlet)
	// swagger:route POST /auth/ctrl/GetCloudletManifest CloudletKey GetCloudletManifest
	// Get Cloudlet Manifest.
	//  Shows deployment manifest required to setup cloudlet
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetCloudletManifest", GetCloudletManifest)
	// swagger:route POST /auth/ctrl/GetCloudletProps CloudletProps GetCloudletProps
	// Get Cloudlet Properties.
	//  Shows all the infra properties used to setup cloudlet
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetCloudletProps", GetCloudletProps)
	// swagger:route POST /auth/ctrl/GetCloudletResourceQuotaProps CloudletResourceQuotaProps GetCloudletResourceQuotaProps
	// Get Cloudlet Resource Quota Properties.
	//  Shows all the resource quota properties of the cloudlet
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetCloudletResourceQuotaProps", GetCloudletResourceQuotaProps)
	// swagger:route POST /auth/ctrl/GetCloudletResourceUsage CloudletResourceUsage GetCloudletResourceUsage
	// Get Cloudlet resource information.
	//  Shows cloudlet resources used and their limits
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetCloudletResourceUsage", GetCloudletResourceUsage)
	// swagger:route POST /auth/ctrl/AddCloudletResMapping CloudletResMap AddCloudletResMapping
	// Add Optional Resource tag table.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddCloudletResMapping", AddCloudletResMapping)
	// swagger:route POST /auth/ctrl/RemoveCloudletResMapping CloudletResMap RemoveCloudletResMapping
	// Remove Optional Resource tag table.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveCloudletResMapping", RemoveCloudletResMapping)
	// swagger:route POST /auth/ctrl/AddCloudletAllianceOrg CloudletAllianceOrg AddCloudletAllianceOrg
	// Add alliance organization to the cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddCloudletAllianceOrg", AddCloudletAllianceOrg)
	// swagger:route POST /auth/ctrl/RemoveCloudletAllianceOrg CloudletAllianceOrg RemoveCloudletAllianceOrg
	// Remove alliance organization from the cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveCloudletAllianceOrg", RemoveCloudletAllianceOrg)
	// swagger:route POST /auth/ctrl/FindFlavorMatch FlavorMatch FindFlavorMatch
	// Discover if flavor produces a matching platform flavor.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/FindFlavorMatch", FindFlavorMatch)
	// swagger:route POST /auth/ctrl/ShowFlavorsForCloudlet CloudletKey ShowFlavorsForCloudlet
	// Find all meta flavors viable on cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowFlavorsForCloudlet", ShowFlavorsForCloudlet)
	// swagger:route POST /auth/ctrl/GetOrganizationsOnCloudlet CloudletKey GetOrganizationsOnCloudlet
	// Get organizations of ClusterInsts and AppInsts on cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GetOrganizationsOnCloudlet", GetOrganizationsOnCloudlet)
	// swagger:route POST /auth/ctrl/RevokeAccessKey CloudletKey RevokeAccessKey
	// Revoke crm access key.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RevokeAccessKey", RevokeAccessKey)
	// swagger:route POST /auth/ctrl/GenerateAccessKey CloudletKey GenerateAccessKey
	// Generate new crm access key.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/GenerateAccessKey", GenerateAccessKey)
	// swagger:route POST /auth/ctrl/ShowCloudletInfo CloudletInfo ShowCloudletInfo
	// Show CloudletInfos.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletInfo", ShowCloudletInfo)
	// swagger:route POST /auth/ctrl/InjectCloudletInfo CloudletInfo InjectCloudletInfo
	// Inject (create) a CloudletInfo for regression testing.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/InjectCloudletInfo", InjectCloudletInfo)
	// swagger:route POST /auth/ctrl/EvictCloudletInfo CloudletInfo EvictCloudletInfo
	// Evict (delete) a CloudletInfo for regression testing.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/EvictCloudletInfo", EvictCloudletInfo)
	// swagger:route POST /auth/ctrl/CreateCloudletPool CloudletPool CreateCloudletPool
	// Create a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateCloudletPool", CreateCloudletPool)
	// swagger:route POST /auth/ctrl/DeleteCloudletPool CloudletPool DeleteCloudletPool
	// Delete a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteCloudletPool", DeleteCloudletPool)
	// swagger:route POST /auth/ctrl/UpdateCloudletPool CloudletPool UpdateCloudletPool
	// Update a CloudletPool.
	// The following values should be added to `CloudletPool.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// Cloudlets: 3
	// CreatedAt: 4
	// CreatedAtSeconds: 4.1
	// CreatedAtNanos: 4.2
	// UpdatedAt: 5
	// UpdatedAtSeconds: 5.1
	// UpdatedAtNanos: 5.2
	// DeletePrepare: 6
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateCloudletPool", UpdateCloudletPool)
	// swagger:route POST /auth/ctrl/ShowCloudletPool CloudletPool ShowCloudletPool
	// Show CloudletPools.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletPool", ShowCloudletPool)
	// swagger:route POST /auth/ctrl/AddCloudletPoolMember CloudletPoolMember AddCloudletPoolMember
	// Add a Cloudlet to a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddCloudletPoolMember", AddCloudletPoolMember)
	// swagger:route POST /auth/ctrl/RemoveCloudletPoolMember CloudletPoolMember RemoveCloudletPoolMember
	// Remove a Cloudlet from a CloudletPool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveCloudletPoolMember", RemoveCloudletPoolMember)
	// swagger:route POST /auth/ctrl/CreateVMPool VMPool CreateVMPool
	// Create VMPool.
	//  Creates VM pool which will have VMs defined.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateVMPool", CreateVMPool)
	// swagger:route POST /auth/ctrl/DeleteVMPool VMPool DeleteVMPool
	// Delete VMPool.
	//  Deletes VM pool given that none of VMs part of this pool is used.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteVMPool", DeleteVMPool)
	// swagger:route POST /auth/ctrl/UpdateVMPool VMPool UpdateVMPool
	// Update VMPool.
	//  Updates a VM pools VMs.
	// The following values should be added to `VMPool.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// Vms: 3
	// VmsName: 3.1
	// VmsNetInfo: 3.2
	// VmsNetInfoExternalIp: 3.2.1
	// VmsNetInfoInternalIp: 3.2.2
	// VmsGroupName: 3.3
	// VmsState: 3.4
	// VmsUpdatedAt: 3.5
	// VmsUpdatedAtSeconds: 3.5.1
	// VmsUpdatedAtNanos: 3.5.2
	// VmsInternalName: 3.6
	// VmsFlavor: 3.7
	// VmsFlavorName: 3.7.1
	// VmsFlavorVcpus: 3.7.2
	// VmsFlavorRam: 3.7.3
	// VmsFlavorDisk: 3.7.4
	// VmsFlavorPropMap: 3.7.5
	// VmsFlavorPropMapKey: 3.7.5.1
	// VmsFlavorPropMapValue: 3.7.5.2
	// State: 4
	// Errors: 5
	// Status: 6
	// StatusTaskNumber: 6.1
	// StatusMaxTasks: 6.2
	// StatusTaskName: 6.3
	// StatusStepName: 6.4
	// StatusMsgCount: 6.5
	// StatusMsgs: 6.6
	// CrmOverride: 7
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateVMPool", UpdateVMPool)
	// swagger:route POST /auth/ctrl/ShowVMPool VMPool ShowVMPool
	// Show VMPools.
	//  Lists all the VMs part of the VM pool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowVMPool", ShowVMPool)
	// swagger:route POST /auth/ctrl/AddVMPoolMember VMPoolMember AddVMPoolMember
	// Add VMPoolMember.
	//  Adds a VM to existing VM Pool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddVMPoolMember", AddVMPoolMember)
	// swagger:route POST /auth/ctrl/RemoveVMPoolMember VMPoolMember RemoveVMPoolMember
	// Remove VMPoolMember.
	//  Removes a VM from existing VM Pool.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveVMPoolMember", RemoveVMPoolMember)
	// swagger:route POST /auth/ctrl/CreateClusterInst ClusterInst CreateClusterInst
	// Create Cluster Instance.
	//  Creates an instance of a Cluster on a Cloudlet, defined by a Cluster Key and a Cloudlet Key. ClusterInst is a collection of compute resources on a Cloudlet on which AppInsts are deployed.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateClusterInst", CreateClusterInst)
	// swagger:route POST /auth/ctrl/DeleteClusterInst ClusterInst DeleteClusterInst
	// Delete Cluster Instance.
	//  Deletes an instance of a Cluster deployed on a Cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteClusterInst", DeleteClusterInst)
	// swagger:route POST /auth/ctrl/UpdateClusterInst ClusterInst UpdateClusterInst
	// Update Cluster Instance.
	//  Updates an instance of a Cluster deployed on a Cloudlet.
	// The following values should be added to `ClusterInst.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyClusterKey: 2.1
	// KeyClusterKeyName: 2.1.1
	// KeyCloudletKey: 2.2
	// KeyCloudletKeyOrganization: 2.2.1
	// KeyCloudletKeyName: 2.2.2
	// KeyOrganization: 2.3
	// Flavor: 3
	// FlavorName: 3.1
	// Liveness: 9
	// Auto: 10
	// State: 4
	// Errors: 5
	// CrmOverride: 6
	// IpAccess: 7
	// AllocatedIp: 8
	// NodeFlavor: 11
	// Deployment: 15
	// NumMasters: 13
	// NumNodes: 14
	// Status: 16
	// StatusTaskNumber: 16.1
	// StatusMaxTasks: 16.2
	// StatusTaskName: 16.3
	// StatusStepName: 16.4
	// StatusMsgCount: 16.5
	// StatusMsgs: 16.6
	// ExternalVolumeSize: 17
	// AutoScalePolicy: 18
	// AvailabilityZone: 19
	// ImageName: 20
	// Reservable: 21
	// ReservedBy: 22
	// SharedVolumeSize: 23
	// MasterNodeFlavor: 25
	// SkipCrmCleanupOnFailure: 26
	// OptRes: 27
	// Resources: 28
	// ResourcesVms: 28.1
	// ResourcesVmsName: 28.1.1
	// ResourcesVmsType: 28.1.2
	// ResourcesVmsStatus: 28.1.3
	// ResourcesVmsInfraFlavor: 28.1.4
	// ResourcesVmsIpaddresses: 28.1.5
	// ResourcesVmsIpaddressesExternalIp: 28.1.5.1
	// ResourcesVmsIpaddressesInternalIp: 28.1.5.2
	// ResourcesVmsContainers: 28.1.6
	// ResourcesVmsContainersName: 28.1.6.1
	// ResourcesVmsContainersType: 28.1.6.2
	// ResourcesVmsContainersStatus: 28.1.6.3
	// ResourcesVmsContainersClusterip: 28.1.6.4
	// ResourcesVmsContainersRestarts: 28.1.6.5
	// CreatedAt: 29
	// CreatedAtSeconds: 29.1
	// CreatedAtNanos: 29.2
	// UpdatedAt: 30
	// UpdatedAtSeconds: 30.1
	// UpdatedAtNanos: 30.2
	// ReservationEndedAt: 31
	// ReservationEndedAtSeconds: 31.1
	// ReservationEndedAtNanos: 31.2
	// MultiTenant: 32
	// Networks: 33
	// DeletePrepare: 34
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateClusterInst", UpdateClusterInst)
	// swagger:route POST /auth/ctrl/ShowClusterInst ClusterInst ShowClusterInst
	// Show Cluster Instances.
	//  Lists all the cluster instances managed by Edge Controller.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowClusterInst", ShowClusterInst)
	// swagger:route POST /auth/ctrl/DeleteIdleReservableClusterInsts IdleReservableClusterInsts DeleteIdleReservableClusterInsts
	// Cleanup Reservable Cluster Instances.
	//  Deletes reservable cluster instances that are not in use.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteIdleReservableClusterInsts", DeleteIdleReservableClusterInsts)
	// swagger:route POST /auth/ctrl/CreateAutoProvPolicy AutoProvPolicy CreateAutoProvPolicy
	// Create an Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAutoProvPolicy", CreateAutoProvPolicy)
	// swagger:route POST /auth/ctrl/DeleteAutoProvPolicy AutoProvPolicy DeleteAutoProvPolicy
	// Delete an Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAutoProvPolicy", DeleteAutoProvPolicy)
	// swagger:route POST /auth/ctrl/UpdateAutoProvPolicy AutoProvPolicy UpdateAutoProvPolicy
	// Update an Auto Provisioning Policy.
	// The following values should be added to `AutoProvPolicy.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyOrganization: 2.1
	// KeyName: 2.2
	// DeployClientCount: 3
	// DeployIntervalCount: 4
	// Cloudlets: 5
	// CloudletsKey: 5.1
	// CloudletsKeyOrganization: 5.1.1
	// CloudletsKeyName: 5.1.2
	// CloudletsLoc: 5.2
	// CloudletsLocLatitude: 5.2.1
	// CloudletsLocLongitude: 5.2.2
	// CloudletsLocHorizontalAccuracy: 5.2.3
	// CloudletsLocVerticalAccuracy: 5.2.4
	// CloudletsLocAltitude: 5.2.5
	// CloudletsLocCourse: 5.2.6
	// CloudletsLocSpeed: 5.2.7
	// CloudletsLocTimestamp: 5.2.8
	// CloudletsLocTimestampSeconds: 5.2.8.1
	// CloudletsLocTimestampNanos: 5.2.8.2
	// MinActiveInstances: 6
	// MaxInstances: 7
	// UndeployClientCount: 8
	// UndeployIntervalCount: 9
	// DeletePrepare: 10
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAutoProvPolicy", UpdateAutoProvPolicy)
	// swagger:route POST /auth/ctrl/ShowAutoProvPolicy AutoProvPolicy ShowAutoProvPolicy
	// Show Auto Provisioning Policies.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAutoProvPolicy", ShowAutoProvPolicy)
	// swagger:route POST /auth/ctrl/AddAutoProvPolicyCloudlet AutoProvPolicyCloudlet AddAutoProvPolicyCloudlet
	// Add a Cloudlet to the Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AddAutoProvPolicyCloudlet", AddAutoProvPolicyCloudlet)
	// swagger:route POST /auth/ctrl/RemoveAutoProvPolicyCloudlet AutoProvPolicyCloudlet RemoveAutoProvPolicyCloudlet
	// Remove a Cloudlet from the Auto Provisioning Policy.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RemoveAutoProvPolicyCloudlet", RemoveAutoProvPolicyCloudlet)
	// swagger:route POST /auth/ctrl/CreateTrustPolicyException TrustPolicyException CreateTrustPolicyException
	// Create a Trust Policy Exception, by App Developer Organization.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateTrustPolicyException", CreateTrustPolicyException)
	// swagger:route POST /auth/ctrl/UpdateTrustPolicyException TrustPolicyException UpdateTrustPolicyException
	// Update a Trust Policy Exception, by Operator Organization.
	// The following values should be added to `TrustPolicyException.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyAppKey: 2.1
	// KeyAppKeyOrganization: 2.1.1
	// KeyAppKeyName: 2.1.2
	// KeyAppKeyVersion: 2.1.3
	// KeyCloudletPoolKey: 2.2
	// KeyCloudletPoolKeyOrganization: 2.2.1
	// KeyCloudletPoolKeyName: 2.2.2
	// KeyName: 2.3
	// State: 3
	// OutboundSecurityRules: 4
	// OutboundSecurityRulesProtocol: 4.1
	// OutboundSecurityRulesPortRangeMin: 4.2
	// OutboundSecurityRulesPortRangeMax: 4.3
	// OutboundSecurityRulesRemoteCidr: 4.4
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateTrustPolicyException", UpdateTrustPolicyException)
	// swagger:route POST /auth/ctrl/DeleteTrustPolicyException TrustPolicyException DeleteTrustPolicyException
	// Delete a Trust Policy Exception, by App Developer Organization.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteTrustPolicyException", DeleteTrustPolicyException)
	// swagger:route POST /auth/ctrl/ShowTrustPolicyException TrustPolicyException ShowTrustPolicyException
	// Show Trust Policy Exceptions.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowTrustPolicyException", ShowTrustPolicyException)
	// swagger:route POST /auth/ctrl/CreateNetwork Network CreateNetwork
	// Create a Network.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateNetwork", CreateNetwork)
	// swagger:route POST /auth/ctrl/DeleteNetwork Network DeleteNetwork
	// Delete a Network.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteNetwork", DeleteNetwork)
	// swagger:route POST /auth/ctrl/UpdateNetwork Network UpdateNetwork
	// Update a Network.
	// The following values should be added to `Network.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyCloudletKey: 2.1
	// KeyCloudletKeyOrganization: 2.1.1
	// KeyCloudletKeyName: 2.1.2
	// KeyName: 2.2
	// Routes: 3
	// RoutesDestinationCidr: 3.1
	// RoutesNextHopIp: 3.2
	// ConnectionType: 4
	// DeletePrepare: 5
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateNetwork", UpdateNetwork)
	// swagger:route POST /auth/ctrl/ShowNetwork Network ShowNetwork
	// Show Networks.
	//  Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowNetwork", ShowNetwork)
	// swagger:route POST /auth/ctrl/CreateAppInst AppInst CreateAppInst
	// Create Application Instance.
	//  Creates an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. Many of the fields here are inherited from the App definition.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateAppInst", CreateAppInst)
	// swagger:route POST /auth/ctrl/DeleteAppInst AppInst DeleteAppInst
	// Delete Application Instance.
	//  Deletes an instance of the App from the Cloudlet.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteAppInst", DeleteAppInst)
	// swagger:route POST /auth/ctrl/RefreshAppInst AppInst RefreshAppInst
	// Refresh Application Instance.
	//  Restarts an App instance with new App settings or image.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RefreshAppInst", RefreshAppInst)
	// swagger:route POST /auth/ctrl/UpdateAppInst AppInst UpdateAppInst
	// Update Application Instance.
	//  Updates an Application instance and then refreshes it.
	// The following values should be added to `AppInst.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyAppKey: 2.1
	// KeyAppKeyOrganization: 2.1.1
	// KeyAppKeyName: 2.1.2
	// KeyAppKeyVersion: 2.1.3
	// KeyClusterInstKey: 2.4
	// KeyClusterInstKeyClusterKey: 2.4.1
	// KeyClusterInstKeyClusterKeyName: 2.4.1.1
	// KeyClusterInstKeyCloudletKey: 2.4.2
	// KeyClusterInstKeyCloudletKeyOrganization: 2.4.2.1
	// KeyClusterInstKeyCloudletKeyName: 2.4.2.2
	// KeyClusterInstKeyOrganization: 2.4.3
	// CloudletLoc: 3
	// CloudletLocLatitude: 3.1
	// CloudletLocLongitude: 3.2
	// CloudletLocHorizontalAccuracy: 3.3
	// CloudletLocVerticalAccuracy: 3.4
	// CloudletLocAltitude: 3.5
	// CloudletLocCourse: 3.6
	// CloudletLocSpeed: 3.7
	// CloudletLocTimestamp: 3.8
	// CloudletLocTimestampSeconds: 3.8.1
	// CloudletLocTimestampNanos: 3.8.2
	// Uri: 4
	// Liveness: 6
	// MappedPorts: 9
	// MappedPortsProto: 9.1
	// MappedPortsInternalPort: 9.2
	// MappedPortsPublicPort: 9.3
	// MappedPortsFqdnPrefix: 9.5
	// MappedPortsEndPort: 9.6
	// MappedPortsTls: 9.7
	// MappedPortsNginx: 9.8
	// MappedPortsMaxPktSize: 9.9
	// Flavor: 12
	// FlavorName: 12.1
	// State: 14
	// Errors: 15
	// CrmOverride: 16
	// RuntimeInfo: 17
	// RuntimeInfoContainerIds: 17.1
	// CreatedAt: 21
	// CreatedAtSeconds: 21.1
	// CreatedAtNanos: 21.2
	// AutoClusterIpAccess: 22
	// Status: 23
	// StatusTaskNumber: 23.1
	// StatusMaxTasks: 23.2
	// StatusTaskName: 23.3
	// StatusStepName: 23.4
	// StatusMsgCount: 23.5
	// StatusMsgs: 23.6
	// Revision: 24
	// ForceUpdate: 25
	// UpdateMultiple: 26
	// Configs: 27
	// ConfigsKind: 27.1
	// ConfigsConfig: 27.2
	// HealthCheck: 29
	// PrivacyPolicy: 30
	// PowerState: 31
	// ExternalVolumeSize: 32
	// AvailabilityZone: 33
	// VmFlavor: 34
	// OptRes: 35
	// UpdatedAt: 36
	// UpdatedAtSeconds: 36.1
	// UpdatedAtNanos: 36.2
	// RealClusterName: 37
	// InternalPortToLbIp: 38
	// InternalPortToLbIpKey: 38.1
	// InternalPortToLbIpValue: 38.2
	// DedicatedIp: 39
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateAppInst", UpdateAppInst)
	// swagger:route POST /auth/ctrl/ShowAppInst AppInst ShowAppInst
	// Show Application Instances.
	//  Lists all the Application instances managed by the Edge Controller. Any fields specified will be used to filter results.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAppInst", ShowAppInst)
	// swagger:route POST /auth/ctrl/RequestAppInstLatency AppInstLatency RequestAppInstLatency
	// Request Latency measurements for clients connected to AppInst.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RequestAppInstLatency", RequestAppInstLatency)
	// swagger:route POST /auth/ctrl/ShowCloudletRefs CloudletRefs ShowCloudletRefs
	// Show CloudletRefs (debug only).
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowCloudletRefs", ShowCloudletRefs)
	// swagger:route POST /auth/ctrl/ShowClusterRefs ClusterRefs ShowClusterRefs
	// Show ClusterRefs (debug only).
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowClusterRefs", ShowClusterRefs)
	// swagger:route POST /auth/ctrl/ShowAppInstRefs AppInstRefs ShowAppInstRefs
	// Show AppInstRefs (debug only).
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAppInstRefs", ShowAppInstRefs)
	// swagger:route POST /auth/ctrl/ShowRateLimitSettings RateLimitSettings ShowRateLimitSettings
	// Show RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowRateLimitSettings", ShowRateLimitSettings)
	// swagger:route POST /auth/ctrl/CreateFlowRateLimitSettings FlowRateLimitSettings CreateFlowRateLimitSettings
	// Create Flow RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateFlowRateLimitSettings", CreateFlowRateLimitSettings)
	// swagger:route POST /auth/ctrl/UpdateFlowRateLimitSettings FlowRateLimitSettings UpdateFlowRateLimitSettings
	// Update Flow RateLimit settings for an API endpoint and target.
	// The following values should be added to `FlowRateLimitSettings.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyFlowSettingsName: 2.1
	// KeyRateLimitKey: 2.2
	// KeyRateLimitKeyApiName: 2.2.1
	// KeyRateLimitKeyApiEndpointType: 2.2.2
	// KeyRateLimitKeyRateLimitTarget: 2.2.3
	// Settings: 3
	// SettingsFlowAlgorithm: 3.1
	// SettingsReqsPerSecond: 3.2
	// SettingsBurstSize: 3.3
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateFlowRateLimitSettings", UpdateFlowRateLimitSettings)
	// swagger:route POST /auth/ctrl/DeleteFlowRateLimitSettings FlowRateLimitSettings DeleteFlowRateLimitSettings
	// Delete Flow RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteFlowRateLimitSettings", DeleteFlowRateLimitSettings)
	// swagger:route POST /auth/ctrl/ShowFlowRateLimitSettings FlowRateLimitSettings ShowFlowRateLimitSettings
	// Show Flow RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowFlowRateLimitSettings", ShowFlowRateLimitSettings)
	// swagger:route POST /auth/ctrl/CreateMaxReqsRateLimitSettings MaxReqsRateLimitSettings CreateMaxReqsRateLimitSettings
	// Create MaxReqs RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/CreateMaxReqsRateLimitSettings", CreateMaxReqsRateLimitSettings)
	// swagger:route POST /auth/ctrl/UpdateMaxReqsRateLimitSettings MaxReqsRateLimitSettings UpdateMaxReqsRateLimitSettings
	// Update MaxReqs RateLimit settings for an API endpoint and target.
	// The following values should be added to `MaxReqsRateLimitSettings.fields` field array to specify which fields will be updated.
	// ```
	// Key: 2
	// KeyMaxReqsSettingsName: 2.1
	// KeyRateLimitKey: 2.2
	// KeyRateLimitKeyApiName: 2.2.1
	// KeyRateLimitKeyApiEndpointType: 2.2.2
	// KeyRateLimitKeyRateLimitTarget: 2.2.3
	// Settings: 3
	// SettingsMaxReqsAlgorithm: 3.1
	// SettingsMaxRequests: 3.2
	// SettingsInterval: 3.3
	// ```
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/UpdateMaxReqsRateLimitSettings", UpdateMaxReqsRateLimitSettings)
	// swagger:route POST /auth/ctrl/DeleteMaxReqsRateLimitSettings MaxReqsRateLimitSettings DeleteMaxReqsRateLimitSettings
	// Delete MaxReqs RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DeleteMaxReqsRateLimitSettings", DeleteMaxReqsRateLimitSettings)
	// swagger:route POST /auth/ctrl/ShowMaxReqsRateLimitSettings MaxReqsRateLimitSettings ShowMaxReqsRateLimitSettings
	// Show MaxReqs RateLimit settings for an API endpoint and target.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowMaxReqsRateLimitSettings", ShowMaxReqsRateLimitSettings)
	// swagger:route POST /auth/ctrl/ShowAppInstClient AppInstClientKey ShowAppInstClient
	// Show application instance clients.
	//
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowAppInstClient", ShowAppInstClient)
	// swagger:route POST /auth/ctrl/ShowNode Node ShowNode
	// Show all Nodes connected to all Controllers.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowNode", ShowNode)
	// swagger:route POST /auth/ctrl/EnableDebugLevels DebugRequest EnableDebugLevels
	// Enable debug log levels.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/EnableDebugLevels", EnableDebugLevels)
	// swagger:route POST /auth/ctrl/DisableDebugLevels DebugRequest DisableDebugLevels
	// Disable debug log levels.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/DisableDebugLevels", DisableDebugLevels)
	// swagger:route POST /auth/ctrl/ShowDebugLevels DebugRequest ShowDebugLevels
	// Show debug log levels.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowDebugLevels", ShowDebugLevels)
	// swagger:route POST /auth/ctrl/RunDebug DebugRequest RunDebug
	// Run debug command.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RunDebug", RunDebug)
	// swagger:route POST /auth/ctrl/InjectDevice Device InjectDevice
	// Inject a device.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/InjectDevice", InjectDevice)
	// swagger:route POST /auth/ctrl/ShowDevice Device ShowDevice
	// Show devices.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowDevice", ShowDevice)
	// swagger:route POST /auth/ctrl/EvictDevice Device EvictDevice
	// Evict a device.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/EvictDevice", EvictDevice)
	// swagger:route POST /auth/ctrl/ShowDeviceReport DeviceReport ShowDeviceReport
	// Device Reports API.
	//
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowDeviceReport", ShowDeviceReport)
	// swagger:route POST /auth/ctrl/RunCommand ExecRequest RunCommand
	// Run a Command or Shell on a container.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RunCommand", RunCommand)
	// swagger:route POST /auth/ctrl/RunConsole ExecRequest RunConsole
	// Run console on a VM.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/RunConsole", RunConsole)
	// swagger:route POST /auth/ctrl/ShowLogs ExecRequest ShowLogs
	// View logs for AppInst.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/ShowLogs", ShowLogs)
	// swagger:route POST /auth/ctrl/AccessCloudlet ExecRequest AccessCloudlet
	// Access Cloudlet VM.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/AccessCloudlet", AccessCloudlet)
	// swagger:route POST /auth/ctrl/StreamAppInst AppInstKey StreamAppInst
	// Stream Application Instance current progress.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/StreamAppInst", StreamAppInst)
	// swagger:route POST /auth/ctrl/StreamClusterInst ClusterInstKey StreamClusterInst
	// Stream Cluster Instance current progress.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/StreamClusterInst", StreamClusterInst)
	// swagger:route POST /auth/ctrl/StreamCloudlet CloudletKey StreamCloudlet
	// Stream Cloudlet current progress.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/StreamCloudlet", StreamCloudlet)
	// swagger:route POST /auth/ctrl/StreamGPUDriver GPUDriverKey StreamGPUDriver
	// Stream GPU driver current progress.
	// Security:
	//   Bearer:
	// responses:
	//   200: success
	//   400: badRequest
	//   403: forbidden
	//   404: notFound
	group.Match([]string{method}, "/ctrl/StreamGPUDriver", StreamGPUDriver)
}
