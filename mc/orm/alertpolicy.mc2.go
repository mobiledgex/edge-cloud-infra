// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alertpolicy.proto

package orm

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/labstack/echo"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"google.golang.org/grpc/status"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateAlertPolicy(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionAlertPolicy{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.AlertPolicy.GetKey().GetTags())
	span.SetTag("org", in.AlertPolicy.Key.Organization)
	resp, err := CreateAlertPolicyObj(ctx, rc, &in.AlertPolicy)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func CreateAlertPolicyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.AlertPolicy) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForCreateAlertPolicy(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceDeveloperPolicy, ActionManage, withRequiresOrg(obj.Key.Organization)); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewAlertPolicyApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.CreateAlertPolicy(ctx, obj)
}

func DeleteAlertPolicy(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionAlertPolicy{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.AlertPolicy.GetKey().GetTags())
	span.SetTag("org", in.AlertPolicy.Key.Organization)
	resp, err := DeleteAlertPolicyObj(ctx, rc, &in.AlertPolicy)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func DeleteAlertPolicyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.AlertPolicy) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForDeleteAlertPolicy(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceDeveloperPolicy, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewAlertPolicyApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.DeleteAlertPolicy(ctx, obj)
}

func UpdateAlertPolicy(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionAlertPolicy{}
	dat, err := ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.AlertPolicy.GetKey().GetTags())
	span.SetTag("org", in.AlertPolicy.Key.Organization)
	err = ormutil.SetRegionObjFields(dat, &in)
	if err != nil {
		return err
	}
	resp, err := UpdateAlertPolicyObj(ctx, rc, &in.AlertPolicy)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func UpdateAlertPolicyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.AlertPolicy) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForUpdateAlertPolicy(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceDeveloperPolicy, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewAlertPolicyApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.UpdateAlertPolicy(ctx, obj)
}

func ShowAlertPolicy(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionAlertPolicy{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.AlertPolicy.GetKey().GetTags())
	span.SetTag("org", in.AlertPolicy.Key.Organization)

	err = ShowAlertPolicyStream(ctx, rc, &in.AlertPolicy, func(res *edgeproto.AlertPolicy) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func ShowAlertPolicyStream(ctx context.Context, rc *RegionContext, obj *edgeproto.AlertPolicy, cb func(res *edgeproto.AlertPolicy) error) error {
	var authz *AuthzShow
	var err error
	if !rc.skipAuthz {
		authz, err = newShowAuthz(ctx, rc.region, rc.username, ResourceDeveloperPolicy, ActionView)
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewAlertPolicyApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowAlertPolicy(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			if !authz.Ok(res.Key.Organization) {
				continue
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowAlertPolicyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.AlertPolicy) ([]edgeproto.AlertPolicy, error) {
	arr := []edgeproto.AlertPolicy{}
	err := ShowAlertPolicyStream(ctx, rc, obj, func(res *edgeproto.AlertPolicy) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}
