// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package orm

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "net/http"
import "testing"
import "github.com/stretchr/testify/require"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/orm/testutil"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var _ = edgeproto.GetFields

func badPermCreateApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermCreateApp(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermCreateApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermCreateApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermDeleteApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermDeleteApp(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermDeleteApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermDeleteApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermUpdateApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermUpdateApp(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermUpdateApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermUpdateApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermShowApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermShowApp(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermShowApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermShowApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermAddAppAutoProvPolicy(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermAddAppAutoProvPolicy(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermAddAppAutoProvPolicy(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermAddAppAutoProvPolicy(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermRemoveAppAutoProvPolicy(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermRemoveAppAutoProvPolicy(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermRemoveAppAutoProvPolicy(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermRemoveAppAutoProvPolicy(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

// This tests the user cannot modify the object because the obj belongs to
// an organization that the user does not have permissions for.
func badPermTestApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	badPermCreateApp(t, mcClient, uri, token, region, org)
	badPermUpdateApp(t, mcClient, uri, token, region, org)
	badPermDeleteApp(t, mcClient, uri, token, region, org)
}

func badPermTestShowApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	// show is allowed but won't show anything
	list, status, err := testutil.TestPermShowApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
	require.Equal(t, 0, len(list))
}

// This tests the user can modify the object because the obj belongs to
// an organization that the user has permissions for.
func goodPermTestApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string, showcount int) {
	goodPermCreateApp(t, mcClient, uri, token, region, org)
	goodPermUpdateApp(t, mcClient, uri, token, region, org)
	goodPermDeleteApp(t, mcClient, uri, token, region, org)

	// make sure region check works
	_, status, err := testutil.TestPermCreateApp(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	_, status, err = testutil.TestPermUpdateApp(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	_, status, err = testutil.TestPermDeleteApp(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)

	goodPermTestShowApp(t, mcClient, uri, token, region, org, showcount)
}

func goodPermTestShowApp(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string, count int) {
	list, status, err := testutil.TestPermShowApp(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
	require.Equal(t, count, len(list))

	// make sure region check works
	list, status, err = testutil.TestPermShowApp(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	require.Equal(t, 0, len(list))
}

// Test permissions for user with token1 who should have permissions for
// modifying obj1, and user with token2 who should have permissions for obj2.
// They should not have permissions to modify each other's objects.
func permTestApp(t *testing.T, mcClient *ormclient.Client, uri, token1, token2, region, org1, org2 string, showcount int) {
	badPermTestApp(t, mcClient, uri, token1, region, org2)
	badPermTestShowApp(t, mcClient, uri, token1, region, org2)
	badPermTestApp(t, mcClient, uri, token2, region, org1)
	badPermTestShowApp(t, mcClient, uri, token2, region, org1)

	goodPermTestApp(t, mcClient, uri, token1, region, org1, showcount)
	goodPermTestApp(t, mcClient, uri, token2, region, org2, showcount)
}
