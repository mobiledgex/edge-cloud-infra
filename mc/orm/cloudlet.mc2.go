// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package orm

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/labstack/echo"
	"github.com/mobiledgex/edge-cloud-infra/mc/ctrlapi"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateGPUDriver(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	obj := &in.GPUDriver
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForCreateGPUDriver(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage, withRequiresOrg(obj.Key.Organization)); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.CreateGPUDriverStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func DeleteGPUDriver(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	obj := &in.GPUDriver
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForDeleteGPUDriver(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.DeleteGPUDriverStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func UpdateGPUDriver(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriver{}
	dat, err := ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)
	err = ormutil.SetRegionObjFields(dat, &in)
	if err != nil {
		return err
	}

	obj := &in.GPUDriver
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForUpdateGPUDriver(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.UpdateGPUDriverStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

type ShowGPUDriverAuthz interface {
	Ok(obj *edgeproto.GPUDriver) (bool, bool)
	Filter(obj *edgeproto.GPUDriver)
}

func ShowGPUDriver(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	obj := &in.GPUDriver
	var authz ShowGPUDriverAuthz
	if !rc.SkipAuthz {
		authz, err = newShowGPUDriverAuthz(ctx, rc.Region, rc.Username, ResourceCloudlets, ActionView)
		if err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.GPUDriver) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.ShowGPUDriverStream(ctx, rc, obj, conn, authz.Ok, authz.Filter, cb)
	if err != nil {
		return err
	}
	return nil
}

func AddGPUDriverBuild(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)

	obj := &in.GPUDriverBuildMember
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForAddGPUDriverBuild(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.AddGPUDriverBuildStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func RemoveGPUDriverBuild(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)

	obj := &in.GPUDriverBuildMember
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRemoveGPUDriverBuild(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.RemoveGPUDriverBuildStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func GetGPUDriverBuildURL(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)

	obj := &in.GPUDriverBuildMember
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authzGetGPUDriverBuildURL(ctx, rc.Region, rc.Username, obj,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GetGPUDriverBuildURLObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func CreateCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)

	obj := &in.Cloudlet
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForCreateCloudlet(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authzCreateCloudlet(ctx, rc.Region, rc.Username, obj,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.CreateCloudletStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func DeleteCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)

	obj := &in.Cloudlet
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForDeleteCloudlet(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.DeleteCloudletStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func UpdateCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudlet{}
	dat, err := ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)
	err = ormutil.SetRegionObjFields(dat, &in)
	if err != nil {
		return err
	}

	obj := &in.Cloudlet
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForUpdateCloudlet(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.UpdateCloudletStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

type ShowCloudletAuthz interface {
	Ok(obj *edgeproto.Cloudlet) (bool, bool)
	Filter(obj *edgeproto.Cloudlet)
}

func ShowCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())

	obj := &in.Cloudlet
	var authz ShowCloudletAuthz
	if !rc.SkipAuthz {
		authz, err = newShowCloudletAuthz(ctx, rc.Region, rc.Username, ResourceCloudlets, ActionView)
		if err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Cloudlet) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.ShowCloudletStream(ctx, rc, obj, conn, authz.Ok, authz.Filter, cb)
	if err != nil {
		return err
	}
	return nil
}

func GetCloudletManifest(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)

	obj := &in.CloudletKey
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForGetCloudletManifest(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GetCloudletManifestObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func GetCloudletProps(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletProps{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletProps.Organization)

	obj := &in.CloudletProps
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudletAnalytics, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GetCloudletPropsObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func GetCloudletResourceQuotaProps(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletResourceQuotaProps{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletResourceQuotaProps.Organization)

	obj := &in.CloudletResourceQuotaProps
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudletAnalytics, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GetCloudletResourceQuotaPropsObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func GetCloudletResourceUsage(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletResourceUsage{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResourceUsage.GetKey().GetTags())
	span.SetTag("org", in.CloudletResourceUsage.Key.Organization)

	obj := &in.CloudletResourceUsage
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GetCloudletResourceUsageObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func AddCloudletResMapping(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletResMap{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResMap.GetKey().GetTags())
	span.SetTag("org", in.CloudletResMap.Key.Organization)

	obj := &in.CloudletResMap
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForAddCloudletResMapping(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.AddCloudletResMappingObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func RemoveCloudletResMapping(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletResMap{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResMap.GetKey().GetTags())
	span.SetTag("org", in.CloudletResMap.Key.Organization)

	obj := &in.CloudletResMap
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRemoveCloudletResMapping(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.RemoveCloudletResMappingObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func FindFlavorMatch(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionFlavorMatch{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.FlavorMatch.GetKey().GetTags())
	span.SetTag("org", in.FlavorMatch.Key.Organization)

	obj := &in.FlavorMatch
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.FindFlavorMatchObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func ShowFlavorsForCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)

	obj := &in.CloudletKey
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authzShowFlavorsForCloudlet(ctx, rc.Region, rc.Username, obj,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.FlavorKey) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.ShowFlavorsForCloudletStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func GetOrganizationsOnCloudlet(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)

	obj := &in.CloudletKey
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.Organization) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.GetOrganizationsOnCloudletStream(ctx, rc, obj, conn, cb)
	if err != nil {
		return err
	}
	return nil
}

func RevokeAccessKey(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)

	obj := &in.CloudletKey
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRevokeAccessKey(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.RevokeAccessKeyObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func GenerateAccessKey(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)

	obj := &in.CloudletKey
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForGenerateAccessKey(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.GenerateAccessKeyObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func ShowCloudletInfo(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)

	obj := &in.CloudletInfo
	var authz *AuthzShow
	if !rc.SkipAuthz {
		authz, err = newShowAuthz(ctx, rc.Region, rc.Username, ResourceCloudletAnalytics, ActionView)
		if err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	cb := func(res *edgeproto.CloudletInfo) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	}
	err = ctrlapi.ShowCloudletInfoStream(ctx, rc, obj, conn, authz.Ok, cb)
	if err != nil {
		return err
	}
	return nil
}

func InjectCloudletInfo(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)

	obj := &in.CloudletInfo
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForInjectCloudletInfo(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.InjectCloudletInfoObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}

func EvictCloudletInfo(c echo.Context) error {
	ctx := ormutil.GetContext(c)
	rc := &ormutil.RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.Username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.Region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)

	obj := &in.CloudletInfo
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForEvictCloudletInfo(); err != nil {
		return err
	}
	if !rc.SkipAuthz {
		if err := authorized(ctx, rc.Username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	conn, err := connCache.GetRegionConn(ctx, rc.Region)
	if err != nil {
		return err
	}

	resp, err := ctrlapi.EvictCloudletInfoObj(ctx, rc, obj, conn)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return ormutil.SetReply(c, resp)
}
