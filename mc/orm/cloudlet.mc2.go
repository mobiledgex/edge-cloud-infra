// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package orm

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/labstack/echo"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormutil"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"google.golang.org/grpc/status"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateGPUDriver(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	err = CreateGPUDriverStream(ctx, rc, &in.GPUDriver, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func CreateGPUDriverStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForCreateGPUDriver(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage, withRequiresOrg(obj.Key.Organization)); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.CreateGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func CreateGPUDriverObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := CreateGPUDriverStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func DeleteGPUDriver(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	err = DeleteGPUDriverStream(ctx, rc, &in.GPUDriver, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func DeleteGPUDriverStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForDeleteGPUDriver(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.DeleteGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteGPUDriverObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := DeleteGPUDriverStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func UpdateGPUDriver(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriver{}
	dat, err := ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)
	err = ormutil.SetRegionObjFields(dat, &in)
	if err != nil {
		return err
	}

	err = UpdateGPUDriverStream(ctx, rc, &in.GPUDriver, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func UpdateGPUDriverStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForUpdateGPUDriver(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.UpdateGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func UpdateGPUDriverObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := UpdateGPUDriverStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func ShowGPUDriver(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriver{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriver.GetKey().GetTags())
	span.SetTag("org", in.GPUDriver.Key.Organization)

	err = ShowGPUDriverStream(ctx, rc, &in.GPUDriver, func(res *edgeproto.GPUDriver) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

type ShowGPUDriverAuthz interface {
	Ok(obj *edgeproto.GPUDriver) (bool, bool)
	Filter(obj *edgeproto.GPUDriver)
}

func ShowGPUDriverStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver, cb func(res *edgeproto.GPUDriver) error) error {
	var authz ShowGPUDriverAuthz
	var err error
	if !rc.skipAuthz {
		authz, err = newShowGPUDriverAuthz(ctx, rc.region, rc.username, ResourceCloudlets, ActionView)
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowGPUDriver(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			authzOk, filterOutput := authz.Ok(res)
			if !authzOk {
				continue
			}
			if filterOutput {
				authz.Filter(res)
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowGPUDriverObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriver) ([]edgeproto.GPUDriver, error) {
	arr := []edgeproto.GPUDriver{}
	err := ShowGPUDriverStream(ctx, rc, obj, func(res *edgeproto.GPUDriver) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func AddGPUDriverBuild(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)

	err = AddGPUDriverBuildStream(ctx, rc, &in.GPUDriverBuildMember, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func AddGPUDriverBuildStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriverBuildMember, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForAddGPUDriverBuild(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.AddGPUDriverBuild(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func AddGPUDriverBuildObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriverBuildMember) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := AddGPUDriverBuildStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func RemoveGPUDriverBuild(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)

	err = RemoveGPUDriverBuildStream(ctx, rc, &in.GPUDriverBuildMember, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func RemoveGPUDriverBuildStream(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriverBuildMember, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRemoveGPUDriverBuild(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.RemoveGPUDriverBuild(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func RemoveGPUDriverBuildObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriverBuildMember) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := RemoveGPUDriverBuildStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func GetGPUDriverBuildURL(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionGPUDriverBuildMember{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.GPUDriverBuildMember.GetKey().GetTags())
	span.SetTag("org", in.GPUDriverBuildMember.Key.Organization)
	resp, err := GetGPUDriverBuildURLObj(ctx, rc, &in.GPUDriverBuildMember)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GetGPUDriverBuildURLObj(ctx context.Context, rc *RegionContext, obj *edgeproto.GPUDriverBuildMember) (*edgeproto.GPUDriverBuildURL, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authzGetGPUDriverBuildURL(ctx, rc.region, rc.username, obj,
			ResourceCloudlets, ActionView); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewGPUDriverApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetGPUDriverBuildURL(ctx, obj)
}

func CreateCloudlet(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)

	err = CreateCloudletStream(ctx, rc, &in.Cloudlet, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func CreateCloudletStream(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForCreateCloudlet(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authzCreateCloudlet(ctx, rc.region, rc.username, obj,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.CreateCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func CreateCloudletObj(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := CreateCloudletStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func DeleteCloudlet(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)

	err = DeleteCloudletStream(ctx, rc, &in.Cloudlet, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func DeleteCloudletStream(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForDeleteCloudlet(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.DeleteCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func DeleteCloudletObj(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := DeleteCloudletStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func UpdateCloudlet(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudlet{}
	dat, err := ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())
	span.SetTag("org", in.Cloudlet.Key.Organization)
	err = ormutil.SetRegionObjFields(dat, &in)
	if err != nil {
		return err
	}

	err = UpdateCloudletStream(ctx, rc, &in.Cloudlet, func(res *edgeproto.Result) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func UpdateCloudletStream(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet, cb func(res *edgeproto.Result) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForUpdateCloudlet(); err != nil {
		return err
	}
	if !rc.skipAuthz {
		if err := authzUpdateCloudlet(ctx, rc.region, rc.username, obj,
			ResourceCloudlets, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.UpdateCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func UpdateCloudletObj(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := UpdateCloudletStream(ctx, rc, obj, func(res *edgeproto.Result) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func ShowCloudlet(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudlet{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.Cloudlet.GetKey().GetTags())

	err = ShowCloudletStream(ctx, rc, &in.Cloudlet, func(res *edgeproto.Cloudlet) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

type ShowCloudletAuthz interface {
	Ok(obj *edgeproto.Cloudlet) (bool, bool)
	Filter(obj *edgeproto.Cloudlet)
}

func ShowCloudletStream(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet, cb func(res *edgeproto.Cloudlet) error) error {
	var authz ShowCloudletAuthz
	var err error
	if !rc.skipAuthz {
		authz, err = newShowCloudletAuthz(ctx, rc.region, rc.username, ResourceCloudlets, ActionView)
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			authzOk, filterOutput := authz.Ok(res)
			if !authzOk {
				continue
			}
			if filterOutput {
				authz.Filter(res)
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowCloudletObj(ctx context.Context, rc *RegionContext, obj *edgeproto.Cloudlet) ([]edgeproto.Cloudlet, error) {
	arr := []edgeproto.Cloudlet{}
	err := ShowCloudletStream(ctx, rc, obj, func(res *edgeproto.Cloudlet) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func GetCloudletManifest(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)
	resp, err := GetCloudletManifestObj(ctx, rc, &in.CloudletKey)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GetCloudletManifestObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletKey) (*edgeproto.CloudletManifest, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForGetCloudletManifest(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletManifest(ctx, obj)
}

func GetCloudletProps(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletProps{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletProps.Organization)
	resp, err := GetCloudletPropsObj(ctx, rc, &in.CloudletProps)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GetCloudletPropsObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletProps) (*edgeproto.CloudletProps, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Organization,
			ResourceCloudletAnalytics, ActionView); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletProps(ctx, obj)
}

func GetCloudletResourceQuotaProps(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletResourceQuotaProps{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletResourceQuotaProps.Organization)
	resp, err := GetCloudletResourceQuotaPropsObj(ctx, rc, &in.CloudletResourceQuotaProps)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GetCloudletResourceQuotaPropsObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletResourceQuotaProps) (*edgeproto.CloudletResourceQuotaProps, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Organization,
			ResourceCloudletAnalytics, ActionView); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletResourceQuotaProps(ctx, obj)
}

func GetCloudletResourceUsage(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletResourceUsage{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResourceUsage.GetKey().GetTags())
	span.SetTag("org", in.CloudletResourceUsage.Key.Organization)
	resp, err := GetCloudletResourceUsageObj(ctx, rc, &in.CloudletResourceUsage)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GetCloudletResourceUsageObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletResourceUsage) (*edgeproto.CloudletResourceUsage, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionView); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GetCloudletResourceUsage(ctx, obj)
}

func AddCloudletResMapping(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletResMap{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResMap.GetKey().GetTags())
	span.SetTag("org", in.CloudletResMap.Key.Organization)
	resp, err := AddCloudletResMappingObj(ctx, rc, &in.CloudletResMap)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func AddCloudletResMappingObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletResMap) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForAddCloudletResMapping(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.AddCloudletResMapping(ctx, obj)
}

func RemoveCloudletResMapping(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletResMap{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletResMap.GetKey().GetTags())
	span.SetTag("org", in.CloudletResMap.Key.Organization)
	resp, err := RemoveCloudletResMappingObj(ctx, rc, &in.CloudletResMap)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func RemoveCloudletResMappingObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletResMap) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRemoveCloudletResMapping(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RemoveCloudletResMapping(ctx, obj)
}

func AddCloudletAllianceOrg(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletAllianceOrg{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletAllianceOrg.GetKey().GetTags())
	span.SetTag("org", in.CloudletAllianceOrg.Key.Organization)
	resp, err := AddCloudletAllianceOrgObj(ctx, rc, &in.CloudletAllianceOrg)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func AddCloudletAllianceOrgObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletAllianceOrg) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForAddCloudletAllianceOrg(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authzAddCloudletAllianceOrg(ctx, rc.region, rc.username, obj,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.AddCloudletAllianceOrg(ctx, obj)
}

func RemoveCloudletAllianceOrg(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletAllianceOrg{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletAllianceOrg.GetKey().GetTags())
	span.SetTag("org", in.CloudletAllianceOrg.Key.Organization)
	resp, err := RemoveCloudletAllianceOrgObj(ctx, rc, &in.CloudletAllianceOrg)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func RemoveCloudletAllianceOrgObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletAllianceOrg) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRemoveCloudletAllianceOrg(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RemoveCloudletAllianceOrg(ctx, obj)
}

func FindFlavorMatch(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionFlavorMatch{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.FlavorMatch.GetKey().GetTags())
	span.SetTag("org", in.FlavorMatch.Key.Organization)
	resp, err := FindFlavorMatchObj(ctx, rc, &in.FlavorMatch)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func FindFlavorMatchObj(ctx context.Context, rc *RegionContext, obj *edgeproto.FlavorMatch) (*edgeproto.FlavorMatch, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionView); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.FindFlavorMatch(ctx, obj)
}

func ShowFlavorsForCloudlet(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)

	err = ShowFlavorsForCloudletStream(ctx, rc, &in.CloudletKey, func(res *edgeproto.FlavorKey) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func ShowFlavorsForCloudletStream(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletKey, cb func(res *edgeproto.FlavorKey) error) error {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if !rc.skipAuthz {
		if err := authzShowFlavorsForCloudlet(ctx, rc.region, rc.username, obj,
			ResourceCloudlets, ActionView); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowFlavorsForCloudlet(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowFlavorsForCloudletObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletKey) ([]edgeproto.FlavorKey, error) {
	arr := []edgeproto.FlavorKey{}
	err := ShowFlavorsForCloudletStream(ctx, rc, obj, func(res *edgeproto.FlavorKey) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func RevokeAccessKey(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)
	resp, err := RevokeAccessKeyObj(ctx, rc, &in.CloudletKey)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func RevokeAccessKeyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletKey) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForRevokeAccessKey(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.RevokeAccessKey(ctx, obj)
}

func GenerateAccessKey(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletKey{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	span.SetTag("org", in.CloudletKey.Organization)
	resp, err := GenerateAccessKeyObj(ctx, rc, &in.CloudletKey)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func GenerateAccessKeyObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletKey) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForGenerateAccessKey(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.GenerateAccessKey(ctx, obj)
}

func ShowCloudletInfo(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)

	err = ShowCloudletInfoStream(ctx, rc, &in.CloudletInfo, func(res *edgeproto.CloudletInfo) error {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		return WriteStream(c, &payload)
	})
	if err != nil {
		return err
	}
	return nil
}

func ShowCloudletInfoStream(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletInfo, cb func(res *edgeproto.CloudletInfo) error) error {
	var authz *AuthzShow
	var err error
	if !rc.skipAuthz {
		authz, err = newShowAuthz(ctx, rc.region, rc.username, ResourceCloudletAnalytics, ActionView)
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletInfoApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	stream, err := api.ShowCloudletInfo(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			if !authz.Ok(res.Key.Organization) {
				continue
			}
		}
		err = cb(res)
		if err != nil {
			return err
		}
	}
	return nil
}

func ShowCloudletInfoObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletInfo) ([]edgeproto.CloudletInfo, error) {
	arr := []edgeproto.CloudletInfo{}
	err := ShowCloudletInfoStream(ctx, rc, obj, func(res *edgeproto.CloudletInfo) error {
		arr = append(arr, *res)
		return nil
	})
	return arr, err
}

func InjectCloudletInfo(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)
	resp, err := InjectCloudletInfoObj(ctx, rc, &in.CloudletInfo)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func InjectCloudletInfoObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletInfo) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForInjectCloudletInfo(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletInfoApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.InjectCloudletInfo(ctx, obj)
}

func EvictCloudletInfo(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionCloudletInfo{}
	_, err = ReadConn(c, &in)
	if err != nil {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("region", in.Region)
	log.SetTags(span, in.CloudletInfo.GetKey().GetTags())
	span.SetTag("org", in.CloudletInfo.Key.Organization)
	resp, err := EvictCloudletInfoObj(ctx, rc, &in.CloudletInfo)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		return err
	}
	return setReply(c, resp)
}

func EvictCloudletInfoObj(ctx context.Context, rc *RegionContext, obj *edgeproto.CloudletInfo) (*edgeproto.Result, error) {
	log.SetContextTags(ctx, edgeproto.GetTags(obj))
	if err := obj.IsValidArgsForEvictCloudletInfo(); err != nil {
		return nil, err
	}
	if !rc.skipAuthz {
		if err := authorized(ctx, rc.username, obj.Key.Organization,
			ResourceCloudlets, ActionManage); err != nil {
			return nil, err
		}
	}
	if rc.conn == nil {
		conn, err := connCache.GetRegionConn(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn = nil
		}()
	}
	api := edgeproto.NewCloudletInfoApiClient(rc.conn)
	log.SpanLog(ctx, log.DebugLevelApi, "start controller api")
	defer log.SpanLog(ctx, log.DebugLevelApi, "finish controller api")
	return api.EvictCloudletInfo(ctx, obj)
}
