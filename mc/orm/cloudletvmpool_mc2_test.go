// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package orm

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "net/http"
import "testing"
import "github.com/stretchr/testify/require"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/orm/testutil"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var _ = edgeproto.GetFields

func badPermCreateCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermCreateCloudletVMPool(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermCreateCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermCreateCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermDeleteCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermDeleteCloudletVMPool(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermDeleteCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermDeleteCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermUpdateCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermUpdateCloudletVMPool(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermUpdateCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermUpdateCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermShowCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermShowCloudletVMPool(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermShowCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermShowCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermAddCloudletVMPoolMember(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermAddCloudletVMPoolMember(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermAddCloudletVMPoolMember(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermAddCloudletVMPoolMember(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

var _ = edgeproto.GetFields

func badPermRemoveCloudletVMPoolMember(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermRemoveCloudletVMPoolMember(mcClient, uri, token, region, org)
	require.NotNil(t, err)
	require.Equal(t, http.StatusForbidden, status)
}

func goodPermRemoveCloudletVMPoolMember(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	_, status, err := testutil.TestPermRemoveCloudletVMPoolMember(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
}

// This tests the user cannot modify the object because the obj belongs to
// an organization that the user does not have permissions for.
func badPermTestCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	badPermCreateCloudletVMPool(t, mcClient, uri, token, region, org)
	badPermUpdateCloudletVMPool(t, mcClient, uri, token, region, org)
	badPermDeleteCloudletVMPool(t, mcClient, uri, token, region, org)
}

func badPermTestShowCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string) {
	// show is allowed but won't show anything
	list, status, err := testutil.TestPermShowCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
	require.Equal(t, 0, len(list))
}

// This tests the user can modify the object because the obj belongs to
// an organization that the user has permissions for.
func goodPermTestCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string, showcount int) {
	goodPermCreateCloudletVMPool(t, mcClient, uri, token, region, org)
	goodPermUpdateCloudletVMPool(t, mcClient, uri, token, region, org)
	goodPermDeleteCloudletVMPool(t, mcClient, uri, token, region, org)

	// make sure region check works
	_, status, err := testutil.TestPermCreateCloudletVMPool(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	_, status, err = testutil.TestPermUpdateCloudletVMPool(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	_, status, err = testutil.TestPermDeleteCloudletVMPool(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)

	goodPermTestShowCloudletVMPool(t, mcClient, uri, token, region, org, showcount)
}

func goodPermTestShowCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token, region, org string, count int) {
	list, status, err := testutil.TestPermShowCloudletVMPool(mcClient, uri, token, region, org)
	require.Nil(t, err)
	require.Equal(t, http.StatusOK, status)
	require.Equal(t, count, len(list))

	// make sure region check works
	list, status, err = testutil.TestPermShowCloudletVMPool(mcClient, uri, token, "bad region", org)
	require.NotNil(t, err)
	require.Contains(t, err.Error(), "\"bad region\" not found")
	require.Equal(t, http.StatusBadRequest, status)
	require.Equal(t, 0, len(list))
}

// Test permissions for user with token1 who should have permissions for
// modifying obj1, and user with token2 who should have permissions for obj2.
// They should not have permissions to modify each other's objects.
func permTestCloudletVMPool(t *testing.T, mcClient *ormclient.Client, uri, token1, token2, region, org1, org2 string, showcount int) {
	badPermTestCloudletVMPool(t, mcClient, uri, token1, region, org2)
	badPermTestShowCloudletVMPool(t, mcClient, uri, token1, region, org2)
	badPermTestCloudletVMPool(t, mcClient, uri, token2, region, org1)
	badPermTestShowCloudletVMPool(t, mcClient, uri, token2, region, org1)

	goodPermTestCloudletVMPool(t, mcClient, uri, token1, region, org1, showcount)
	goodPermTestCloudletVMPool(t, mcClient, uri, token2, region, org2, showcount)
}
