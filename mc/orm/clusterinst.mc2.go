// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package orm

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "github.com/labstack/echo"
import "context"
import "io"
import "github.com/mobiledgex/edge-cloud/log"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var streamClusterInst = &StreamObj{}

func StreamClusterInst(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionClusterInst{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("org", in.ClusterInst.Key.Developer)

	streamer := streamClusterInst.Get(in.ClusterInst.Key)
	if streamer != nil {
		payload := ormapi.StreamPayload{}
		streamCh := streamer.Subscribe()
		closed := make(chan bool)
		go func() {
			for streamMsg := range streamCh {
				switch out := streamMsg.(type) {
				case string:
					payload.Data = &edgeproto.Result{Message: out}
					WriteStream(c, &payload)
				case error:
					WriteError(c, out)
				default:
					WriteError(c, fmt.Errorf("Unsupported message type received: %v", streamMsg))
				}
			}
			CloseConn(c)
			closed <- true
		}()
		// Listen for client closure, as a message is sent
		// from client on closure
		WaitForConnClose(c, closed)
		streamer.Unsubscribe(streamCh)
	} else {
		WriteError(c, fmt.Errorf("Key doesn't exist"))
		CloseConn(c)
	}
	return nil
}

func CreateClusterInst(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionClusterInst{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	defer CloseConn(c)
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("org", in.ClusterInst.Key.Developer)

	streamer := NewStreamer()
	defer streamer.Stop()
	err = streamClusterInst.Add(in.ClusterInst.Key, streamer)
	if err != nil {
		return WriteError(c, fmt.Errorf("ClusterInst is %v", err))
	}

	err = CreateClusterInstStream(ctx, rc, &in.ClusterInst, func(res *edgeproto.Result) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		streamer.Publish(res.Message)
		WriteStream(c, &payload)
	})
	if err != nil {
		streamer.Publish(err)
		WriteError(c, err)
	}
	streamClusterInst.Remove(in.ClusterInst.Key)
	return nil
}

func CreateClusterInstStream(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result)) error {
	if !rc.skipAuthz {
		if err := authzCreateClusterInst(ctx, rc.region, rc.username, obj,
			ResourceClusterInsts, ActionManage); err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewClusterInstApiClient(rc.conn)
	stream, err := api.CreateClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		cb(res)
	}
	return nil
}

func CreateClusterInstObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := CreateClusterInstStream(ctx, rc, obj, func(res *edgeproto.Result) {
		arr = append(arr, *res)
	})
	return arr, err
}

func DeleteClusterInst(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionClusterInst{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	defer CloseConn(c)
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("org", in.ClusterInst.Key.Developer)

	streamer := NewStreamer()
	defer streamer.Stop()
	err = streamClusterInst.Add(in.ClusterInst.Key, streamer)
	if err != nil {
		return WriteError(c, fmt.Errorf("ClusterInst is %v", err))
	}

	err = DeleteClusterInstStream(ctx, rc, &in.ClusterInst, func(res *edgeproto.Result) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		streamer.Publish(res.Message)
		WriteStream(c, &payload)
	})
	if err != nil {
		streamer.Publish(err)
		WriteError(c, err)
	}
	streamClusterInst.Remove(in.ClusterInst.Key)
	return nil
}

func DeleteClusterInstStream(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result)) error {
	if !rc.skipAuthz && !authorized(ctx, rc.username, obj.Key.Developer,
		ResourceClusterInsts, ActionManage) {
		return echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewClusterInstApiClient(rc.conn)
	stream, err := api.DeleteClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		cb(res)
	}
	return nil
}

func DeleteClusterInstObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := DeleteClusterInstStream(ctx, rc, obj, func(res *edgeproto.Result) {
		arr = append(arr, *res)
	})
	return arr, err
}

func UpdateClusterInst(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionClusterInst{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	defer CloseConn(c)
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("org", in.ClusterInst.Key.Developer)

	streamer := NewStreamer()
	defer streamer.Stop()
	err = streamClusterInst.Add(in.ClusterInst.Key, streamer)
	if err != nil {
		return WriteError(c, fmt.Errorf("ClusterInst is %v", err))
	}

	err = UpdateClusterInstStream(ctx, rc, &in.ClusterInst, func(res *edgeproto.Result) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		streamer.Publish(res.Message)
		WriteStream(c, &payload)
	})
	if err != nil {
		streamer.Publish(err)
		WriteError(c, err)
	}
	streamClusterInst.Remove(in.ClusterInst.Key)
	return nil
}

func UpdateClusterInstStream(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.Result)) error {
	if !rc.skipAuthz && !authorized(ctx, rc.username, obj.Key.Developer,
		ResourceClusterInsts, ActionManage) {
		return echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewClusterInstApiClient(rc.conn)
	stream, err := api.UpdateClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		cb(res)
	}
	return nil
}

func UpdateClusterInstObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	arr := []edgeproto.Result{}
	err := UpdateClusterInstStream(ctx, rc, obj, func(res *edgeproto.Result) {
		arr = append(arr, *res)
	})
	return arr, err
}

func ShowClusterInst(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionClusterInst{}
	success, err := ReadConn(c, &in)
	if !success {
		return err
	}
	defer CloseConn(c)
	rc.region = in.Region
	span := log.SpanFromContext(ctx)
	span.SetTag("org", in.ClusterInst.Key.Developer)

	err = ShowClusterInstStream(ctx, rc, &in.ClusterInst, func(res *edgeproto.ClusterInst) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		WriteStream(c, &payload)
	})
	if err != nil {
		WriteError(c, err)
	}
	return nil
}

func ShowClusterInstStream(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst, cb func(res *edgeproto.ClusterInst)) error {
	var authz *ShowAuthz
	var err error
	if !rc.skipAuthz {
		authz, err = NewShowAuthz(ctx, rc.region, rc.username, ResourceClusterInsts, ActionView)
		if err == echo.ErrForbidden {
			return nil
		}
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewClusterInstApiClient(rc.conn)
	stream, err := api.ShowClusterInst(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			if !authz.Ok(res.Key.Developer) {
				continue
			}
		}
		cb(res)
	}
	return nil
}

func ShowClusterInstObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ClusterInst) ([]edgeproto.ClusterInst, error) {
	arr := []edgeproto.ClusterInst{}
	err := ShowClusterInstStream(ctx, rc, obj, func(res *edgeproto.ClusterInst) {
		arr = append(arr, *res)
	})
	return arr, err
}
