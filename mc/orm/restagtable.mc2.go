// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package orm

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "github.com/labstack/echo"
import "net/http"
import "context"
import "io"
import "encoding/json"
import "strings"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "google.golang.org/grpc/status"
import "github.com/gorilla/websocket"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func CreateResTagTable(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := CreateResTagTableObj(ctx, rc, &in.ResTagTable)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func CreateResTagTableObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.CreateResTagTable(ctx, obj)
}

func DeleteResTagTable(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := DeleteResTagTableObj(ctx, rc, &in.ResTagTable)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func DeleteResTagTableObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.DeleteResTagTable(ctx, obj)
}

func UpdateResTagTable(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := UpdateResTagTableObj(ctx, rc, &in.ResTagTable)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func UpdateResTagTableObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.UpdateResTagTable(ctx, obj)
}

func ShowResTagTable(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}
	var err error
	var ws *websocket.Conn
	if strings.HasPrefix(c.Request().URL.Path, "/ws") {
		ws, err = websocketConnect(c)
		if err != nil {
			return err
		}
		if ws == nil {
			return nil
		}
		defer ws.Close()
	}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if ws == nil {
		if err := c.Bind(&in); err != nil {
			return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
		}
	} else {
		err = ws.ReadJSON(&in)
		if err != nil {
			if err == io.EOF || err == io.ErrUnexpectedEOF {
				return setReply(c, ws, fmt.Errorf("Invalid data"), nil)
			}
			return setReply(c, ws, err, nil)
		}
	}
	rc.region = in.Region

	// stream func may return "forbidden", so don't write
	// header until we know it's ok
	wroteHeader := false
	err = ShowResTagTableStream(ctx, rc, &in.ResTagTable, func(res *edgeproto.ResTagTable) {
		payload := ormapi.StreamPayload{}
		payload.Data = res
		if ws != nil {
			err = ws.WriteJSON(payload)
		} else {
			if !wroteHeader {
				c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				c.Response().WriteHeader(http.StatusOK)
				wroteHeader = true
			}
			json.NewEncoder(c.Response()).Encode(payload)
			c.Response().Flush()
		}
	})
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
		if !wroteHeader {
			return setReply(c, ws, err, nil)
		}
		res := ormapi.Result{}
		res.Message = err.Error()
		res.Code = http.StatusBadRequest
		payload := ormapi.StreamPayload{Result: &res}
		if ws != nil {
			ws.WriteJSON(payload)
		} else {
			json.NewEncoder(c.Response()).Encode(payload)
		}
	}
	return nil
}

func ShowResTagTableStream(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable, cb func(res *edgeproto.ResTagTable)) error {
	var authz *ShowAuthz
	var err error
	if !rc.skipAuthz {
		authz, err = NewShowAuthz(ctx, rc.region, rc.username, ResourceResTagTable, ActionView)
		if err == echo.ErrForbidden {
			return nil
		}
		if err != nil {
			return err
		}
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	stream, err := api.ShowResTagTable(ctx, obj)
	if err != nil {
		return err
	}
	for {
		res, err := stream.Recv()
		if err == io.EOF {
			err = nil
			break
		}
		if err != nil {
			return err
		}
		if !rc.skipAuthz {
			if !authz.Ok("") {
				continue
			}
		}
		cb(res)
	}
	return nil
}

func ShowResTagTableObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) ([]edgeproto.ResTagTable, error) {
	arr := []edgeproto.ResTagTable{}
	err := ShowResTagTableStream(ctx, rc, obj, func(res *edgeproto.ResTagTable) {
		arr = append(arr, *res)
	})
	return arr, err
}

func AddResTag(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := AddResTagObj(ctx, rc, &in.ResTagTable)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func AddResTagObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.AddResTag(ctx, obj)
}

func RemoveResTag(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTable{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := RemoveResTagObj(ctx, rc, &in.ResTagTable)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func RemoveResTagObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.RemoveResTag(ctx, obj)
}

func GetResTagTable(c echo.Context) error {
	ctx := GetContext(c)
	rc := &RegionContext{}

	claims, err := getClaims(c)
	if err != nil {
		return err
	}
	rc.username = claims.Username

	in := ormapi.RegionResTagTableKey{}
	if err := c.Bind(&in); err != nil {
		return c.JSON(http.StatusBadRequest, Msg("Invalid POST data"))
	}
	rc.region = in.Region
	resp, err := GetResTagTableObj(ctx, rc, &in.ResTagTableKey)
	if err != nil {
		if st, ok := status.FromError(err); ok {
			err = fmt.Errorf("%s", st.Message())
		}
	}
	return setReply(c, nil, err, resp)
}

func GetResTagTableObj(ctx context.Context, rc *RegionContext, obj *edgeproto.ResTagTableKey) (*edgeproto.ResTagTable, error) {
	if !rc.skipAuthz && !authorized(ctx, rc.username, "",
		ResourceResTagTable, ActionManage) {
		return nil, echo.ErrForbidden
	}
	if rc.conn == nil {
		conn, err := connectController(ctx, rc.region)
		if err != nil {
			return nil, err
		}
		rc.conn = conn
		defer func() {
			rc.conn.Close()
			rc.conn = nil
		}()
	}
	api := edgeproto.NewResTagTableApiClient(rc.conn)
	return api.GetResTagTable(ctx, obj)
}
