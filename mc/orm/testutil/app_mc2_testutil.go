// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateApp(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.App) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionApp{}
	dat.Region = region
	dat.App = *in
	return mcClient.CreateApp(uri, token, dat)
}
func TestPermCreateApp(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.App{}
	in.Key.DeveloperKey.Name = org
	return TestCreateApp(mcClient, uri, token, region, in)
}

func TestDeleteApp(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.App) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionApp{}
	dat.Region = region
	dat.App = *in
	return mcClient.DeleteApp(uri, token, dat)
}
func TestPermDeleteApp(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.App{}
	in.Key.DeveloperKey.Name = org
	return TestDeleteApp(mcClient, uri, token, region, in)
}

func TestUpdateApp(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.App) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionApp{}
	dat.Region = region
	dat.App = *in
	return mcClient.UpdateApp(uri, token, dat)
}
func TestPermUpdateApp(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.App{}
	in.Key.DeveloperKey.Name = org
	return TestUpdateApp(mcClient, uri, token, region, in)
}

func TestShowApp(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.App) ([]edgeproto.App, int, error) {
	dat := &ormapi.RegionApp{}
	dat.Region = region
	dat.App = *in
	return mcClient.ShowApp(uri, token, dat)
}
func TestPermShowApp(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.App, int, error) {
	in := &edgeproto.App{}
	in.Key.DeveloperKey.Name = org
	return TestShowApp(mcClient, uri, token, region, in)
}

func (s *TestClient) CreateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	inR := &ormapi.RegionApp{
		Region: s.Region,
		App:    *in,
	}
	out, status, err := s.McClient.CreateApp(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	inR := &ormapi.RegionApp{
		Region: s.Region,
		App:    *in,
	}
	out, status, err := s.McClient.DeleteApp(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	inR := &ormapi.RegionApp{
		Region: s.Region,
		App:    *in,
	}
	out, status, err := s.McClient.UpdateApp(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowApp(ctx context.Context, in *edgeproto.App) ([]edgeproto.App, error) {
	inR := &ormapi.RegionApp{
		Region: s.Region,
		App:    *in,
	}
	out, status, err := s.McClient.ShowApp(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
