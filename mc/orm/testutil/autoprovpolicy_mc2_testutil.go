// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoprovpolicy.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateAutoProvPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionAutoProvPolicy{}
	dat.Region = region
	dat.AutoProvPolicy = *in
	return mcClient.CreateAutoProvPolicy(uri, token, dat)
}
func TestPermCreateAutoProvPolicy(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.AutoProvPolicy{}
	in.Key.Organization = org
	return TestCreateAutoProvPolicy(mcClient, uri, token, region, in)
}

func TestDeleteAutoProvPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionAutoProvPolicy{}
	dat.Region = region
	dat.AutoProvPolicy = *in
	return mcClient.DeleteAutoProvPolicy(uri, token, dat)
}
func TestPermDeleteAutoProvPolicy(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.AutoProvPolicy{}
	in.Key.Organization = org
	return TestDeleteAutoProvPolicy(mcClient, uri, token, region, in)
}

func TestUpdateAutoProvPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionAutoProvPolicy{}
	dat.Region = region
	dat.AutoProvPolicy = *in
	return mcClient.UpdateAutoProvPolicy(uri, token, dat)
}
func TestPermUpdateAutoProvPolicy(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.AutoProvPolicy{}
	in.Key.Organization = org
	return TestUpdateAutoProvPolicy(mcClient, uri, token, region, in)
}

func TestShowAutoProvPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicy) ([]edgeproto.AutoProvPolicy, int, error) {
	dat := &ormapi.RegionAutoProvPolicy{}
	dat.Region = region
	dat.AutoProvPolicy = *in
	return mcClient.ShowAutoProvPolicy(uri, token, dat)
}
func TestPermShowAutoProvPolicy(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.AutoProvPolicy, int, error) {
	in := &edgeproto.AutoProvPolicy{}
	in.Key.Organization = org
	return TestShowAutoProvPolicy(mcClient, uri, token, region, in)
}

func TestAddAutoProvPolicyCloudlet(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicyCloudlet) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionAutoProvPolicyCloudlet{}
	dat.Region = region
	dat.AutoProvPolicyCloudlet = *in
	return mcClient.AddAutoProvPolicyCloudlet(uri, token, dat)
}
func TestPermAddAutoProvPolicyCloudlet(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.AutoProvPolicyCloudlet{}
	in.Key.Organization = org
	return TestAddAutoProvPolicyCloudlet(mcClient, uri, token, region, in)
}

func TestRemoveAutoProvPolicyCloudlet(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.AutoProvPolicyCloudlet) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionAutoProvPolicyCloudlet{}
	dat.Region = region
	dat.AutoProvPolicyCloudlet = *in
	return mcClient.RemoveAutoProvPolicyCloudlet(uri, token, dat)
}
func TestPermRemoveAutoProvPolicyCloudlet(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.AutoProvPolicyCloudlet{}
	in.Key.Organization = org
	return TestRemoveAutoProvPolicyCloudlet(mcClient, uri, token, region, in)
}

func (s *TestClient) CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionAutoProvPolicy{
		Region:         s.Region,
		AutoProvPolicy: *in,
	}
	out, status, err := s.McClient.CreateAutoProvPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionAutoProvPolicy{
		Region:         s.Region,
		AutoProvPolicy: *in,
	}
	out, status, err := s.McClient.DeleteAutoProvPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionAutoProvPolicy{
		Region:         s.Region,
		AutoProvPolicy: *in,
	}
	out, status, err := s.McClient.UpdateAutoProvPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) ([]edgeproto.AutoProvPolicy, error) {
	inR := &ormapi.RegionAutoProvPolicy{
		Region:         s.Region,
		AutoProvPolicy: *in,
	}
	out, status, err := s.McClient.ShowAutoProvPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) AddAutoProvPolicyCloudlet(ctx context.Context, in *edgeproto.AutoProvPolicyCloudlet) (*edgeproto.Result, error) {
	inR := &ormapi.RegionAutoProvPolicyCloudlet{
		Region:                 s.Region,
		AutoProvPolicyCloudlet: *in,
	}
	out, status, err := s.McClient.AddAutoProvPolicyCloudlet(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) RemoveAutoProvPolicyCloudlet(ctx context.Context, in *edgeproto.AutoProvPolicyCloudlet) (*edgeproto.Result, error) {
	inR := &ormapi.RegionAutoProvPolicyCloudlet{
		Region:                 s.Region,
		AutoProvPolicyCloudlet: *in,
	}
	out, status, err := s.McClient.RemoveAutoProvPolicyCloudlet(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
