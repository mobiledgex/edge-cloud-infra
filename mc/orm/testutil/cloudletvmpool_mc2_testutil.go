// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateCloudletVMPool(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPool) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletVMPool{}
	dat.Region = region
	dat.CloudletVMPool = *in
	return mcClient.CreateCloudletVMPool(uri, token, dat)
}
func TestPermCreateCloudletVMPool(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletVMPool{}
	in.Key.Organization = org
	return TestCreateCloudletVMPool(mcClient, uri, token, region, in)
}

func TestDeleteCloudletVMPool(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPool) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletVMPool{}
	dat.Region = region
	dat.CloudletVMPool = *in
	return mcClient.DeleteCloudletVMPool(uri, token, dat)
}
func TestPermDeleteCloudletVMPool(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletVMPool{}
	in.Key.Organization = org
	return TestDeleteCloudletVMPool(mcClient, uri, token, region, in)
}

func TestUpdateCloudletVMPool(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPool) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletVMPool{}
	dat.Region = region
	dat.CloudletVMPool = *in
	return mcClient.UpdateCloudletVMPool(uri, token, dat)
}
func TestPermUpdateCloudletVMPool(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletVMPool{}
	in.Key.Organization = org
	return TestUpdateCloudletVMPool(mcClient, uri, token, region, in)
}

func TestShowCloudletVMPool(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPool) ([]edgeproto.CloudletVMPool, int, error) {
	dat := &ormapi.RegionCloudletVMPool{}
	dat.Region = region
	dat.CloudletVMPool = *in
	return mcClient.ShowCloudletVMPool(uri, token, dat)
}
func TestPermShowCloudletVMPool(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.CloudletVMPool, int, error) {
	in := &edgeproto.CloudletVMPool{}
	in.Key.Organization = org
	return TestShowCloudletVMPool(mcClient, uri, token, region, in)
}

func TestAddCloudletVMPoolMember(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPoolMember) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletVMPoolMember{}
	dat.Region = region
	dat.CloudletVMPoolMember = *in
	return mcClient.AddCloudletVMPoolMember(uri, token, dat)
}
func TestPermAddCloudletVMPoolMember(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletVMPoolMember{}
	in.Key.Organization = org
	return TestAddCloudletVMPoolMember(mcClient, uri, token, region, in)
}

func TestRemoveCloudletVMPoolMember(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.CloudletVMPoolMember) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletVMPoolMember{}
	dat.Region = region
	dat.CloudletVMPoolMember = *in
	return mcClient.RemoveCloudletVMPoolMember(uri, token, dat)
}
func TestPermRemoveCloudletVMPoolMember(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletVMPoolMember{}
	in.Key.Organization = org
	return TestRemoveCloudletVMPoolMember(mcClient, uri, token, region, in)
}

func (s *TestClient) CreateCloudletVMPool(ctx context.Context, in *edgeproto.CloudletVMPool) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletVMPool{
		Region:         s.Region,
		CloudletVMPool: *in,
	}
	out, status, err := s.McClient.CreateCloudletVMPool(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteCloudletVMPool(ctx context.Context, in *edgeproto.CloudletVMPool) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletVMPool{
		Region:         s.Region,
		CloudletVMPool: *in,
	}
	out, status, err := s.McClient.DeleteCloudletVMPool(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateCloudletVMPool(ctx context.Context, in *edgeproto.CloudletVMPool) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletVMPool{
		Region:         s.Region,
		CloudletVMPool: *in,
	}
	out, status, err := s.McClient.UpdateCloudletVMPool(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowCloudletVMPool(ctx context.Context, in *edgeproto.CloudletVMPool) ([]edgeproto.CloudletVMPool, error) {
	inR := &ormapi.RegionCloudletVMPool{
		Region:         s.Region,
		CloudletVMPool: *in,
	}
	out, status, err := s.McClient.ShowCloudletVMPool(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) AddCloudletVMPoolMember(ctx context.Context, in *edgeproto.CloudletVMPoolMember) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletVMPoolMember{
		Region:               s.Region,
		CloudletVMPoolMember: *in,
	}
	out, status, err := s.McClient.AddCloudletVMPoolMember(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) RemoveCloudletVMPoolMember(ctx context.Context, in *edgeproto.CloudletVMPoolMember) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletVMPoolMember{
		Region:               s.Region,
		CloudletVMPoolMember: *in,
	}
	out, status, err := s.McClient.RemoveCloudletVMPoolMember(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowCloudletVMPoolInfo(ctx context.Context, in *edgeproto.CloudletVMPoolInfo) ([]edgeproto.CloudletVMPoolInfo, error) {
	return nil, nil
}
