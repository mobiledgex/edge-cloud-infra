// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.CreateClusterInst(uri, token, dat)
}
func TestPermCreateClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestCreateClusterInst(mcClient, uri, token, region, in)
}

func TestDeleteClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.DeleteClusterInst(uri, token, dat)
}
func TestPermDeleteClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestDeleteClusterInst(mcClient, uri, token, region, in)
}

func TestUpdateClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.UpdateClusterInst(uri, token, dat)
}
func TestPermUpdateClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestUpdateClusterInst(mcClient, uri, token, region, in)
}

func TestShowClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.ClusterInst, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.ShowClusterInst(uri, token, dat)
}
func TestPermShowClusterInst(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.ClusterInst, int, error) {
	in := &edgeproto.ClusterInst{}
	in.Key.Organization = org
	return TestShowClusterInst(mcClient, uri, token, region, in)
}

func (s *TestClient) CreateClusterInst(ctx context.Context, in *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionClusterInst{
		Region:      s.Region,
		ClusterInst: *in,
	}
	out, status, err := s.McClient.CreateClusterInst(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteClusterInst(ctx context.Context, in *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionClusterInst{
		Region:      s.Region,
		ClusterInst: *in,
	}
	out, status, err := s.McClient.DeleteClusterInst(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateClusterInst(ctx context.Context, in *edgeproto.ClusterInst) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionClusterInst{
		Region:      s.Region,
		ClusterInst: *in,
	}
	out, status, err := s.McClient.UpdateClusterInst(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowClusterInst(ctx context.Context, in *edgeproto.ClusterInst) ([]edgeproto.ClusterInst, error) {
	inR := &ormapi.RegionClusterInst{
		Region:      s.Region,
		ClusterInst: *in,
	}
	out, status, err := s.McClient.ShowClusterInst(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowClusterInstInfo(ctx context.Context, in *edgeproto.ClusterInstInfo) ([]edgeproto.ClusterInstInfo, error) {
	return nil, nil
}
