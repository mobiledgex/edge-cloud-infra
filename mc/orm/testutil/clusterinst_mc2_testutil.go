// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "os"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.CreateClusterInst(uri, token, dat)
}
func TestPermCreateClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestCreateClusterInst(mcClient, uri, token, region, in)
}

func TestDeleteClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.DeleteClusterInst(uri, token, dat)
}
func TestPermDeleteClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestDeleteClusterInst(mcClient, uri, token, region, in)
}

func TestUpdateClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.UpdateClusterInst(uri, token, dat)
}
func TestPermUpdateClusterInst(mcClient *ormclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey) ([]edgeproto.Result, int, error) {
	in := &edgeproto.ClusterInst{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.Organization = org
	return TestUpdateClusterInst(mcClient, uri, token, region, in)
}

func TestShowClusterInst(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ClusterInst) ([]edgeproto.ClusterInst, int, error) {
	dat := &ormapi.RegionClusterInst{}
	dat.Region = region
	dat.ClusterInst = *in
	return mcClient.ShowClusterInst(uri, token, dat)
}
func TestPermShowClusterInst(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.ClusterInst, int, error) {
	in := &edgeproto.ClusterInst{}
	in.Key.Organization = org
	return TestShowClusterInst(mcClient, uri, token, region, in)
}

func RunMcClusterInstApi(mcClient ormclient.Api, uri, token, region string, data *[]edgeproto.ClusterInst, dataMap interface{}, rc *bool, mode string) {
	for ii, clusterInst := range *data {
		in := &ormapi.RegionClusterInst{
			Region:      region,
			ClusterInst: clusterInst,
		}
		switch mode {
		case "create":
			_, st, err := mcClient.CreateClusterInst(uri, token, in)
			checkMcErr("CreateClusterInst", st, err, rc)
		case "delete":
			_, st, err := mcClient.DeleteClusterInst(uri, token, in)
			checkMcErr("DeleteClusterInst", st, err, rc)
		case "update":
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				fmt.Fprintf(os.Stderr, "bad dataMap for ClusterInst: %v", err)
				os.Exit(1)
			}
			in.ClusterInst.Fields = cli.GetSpecifiedFields(objMap, &in.ClusterInst, cli.YamlNamespace)
			_, st, err := mcClient.UpdateClusterInst(uri, token, in)
			checkMcErr("UpdateClusterInst", st, err, rc)
		default:
			return
		}
	}
}
