// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestInjectDevice(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Device) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionDevice{}
	dat.Region = region
	dat.Device = *in
	return mcClient.InjectDevice(uri, token, dat)
}
func TestPermInjectDevice(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Device{}
	return TestInjectDevice(mcClient, uri, token, region, in)
}

func TestShowDevice(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Device) ([]edgeproto.Device, int, error) {
	dat := &ormapi.RegionDevice{}
	dat.Region = region
	dat.Device = *in
	return mcClient.ShowDevice(uri, token, dat)
}
func TestPermShowDevice(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.Device, int, error) {
	in := &edgeproto.Device{}
	return TestShowDevice(mcClient, uri, token, region, in)
}

func TestEvictDevice(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Device) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionDevice{}
	dat.Region = region
	dat.Device = *in
	return mcClient.EvictDevice(uri, token, dat)
}
func TestPermEvictDevice(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Device{}
	return TestEvictDevice(mcClient, uri, token, region, in)
}

func TestShowDeviceReport(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.DeviceReport) ([]edgeproto.Device, int, error) {
	dat := &ormapi.RegionDeviceReport{}
	dat.Region = region
	dat.DeviceReport = *in
	return mcClient.ShowDeviceReport(uri, token, dat)
}
func TestPermShowDeviceReport(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.Device, int, error) {
	in := &edgeproto.DeviceReport{}
	return TestShowDeviceReport(mcClient, uri, token, region, in)
}

func (s *TestClient) InjectDevice(ctx context.Context, in *edgeproto.Device) (*edgeproto.Result, error) {
	inR := &ormapi.RegionDevice{
		Region: s.Region,
		Device: *in,
	}
	out, status, err := s.McClient.InjectDevice(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowDevice(ctx context.Context, in *edgeproto.Device) ([]edgeproto.Device, error) {
	inR := &ormapi.RegionDevice{
		Region: s.Region,
		Device: *in,
	}
	out, status, err := s.McClient.ShowDevice(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) EvictDevice(ctx context.Context, in *edgeproto.Device) (*edgeproto.Result, error) {
	inR := &ormapi.RegionDevice{
		Region: s.Region,
		Device: *in,
	}
	out, status, err := s.McClient.EvictDevice(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowDeviceReport(ctx context.Context, in *edgeproto.DeviceReport) ([]edgeproto.Device, error) {
	inR := &ormapi.RegionDeviceReport{
		Region:       s.Region,
		DeviceReport: *in,
	}
	out, status, err := s.McClient.ShowDeviceReport(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
