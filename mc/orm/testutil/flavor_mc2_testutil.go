// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package testutil

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/mcctl/mctestclient"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateFlavor(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.CreateFlavor(uri, token, dat)
}
func TestPermCreateFlavor(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestCreateFlavor(mcClient, uri, token, region, in, modFuncs...)
}

func TestDeleteFlavor(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.DeleteFlavor(uri, token, dat)
}
func TestPermDeleteFlavor(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestDeleteFlavor(mcClient, uri, token, region, in, modFuncs...)
}

func TestUpdateFlavor(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.UpdateFlavor(uri, token, dat)
}
func TestPermUpdateFlavor(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestUpdateFlavor(mcClient, uri, token, region, in, modFuncs...)
}

func TestShowFlavor(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) ([]edgeproto.Flavor, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.ShowFlavor(uri, token, dat)
}
func TestPermShowFlavor(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) ([]edgeproto.Flavor, int, error) {
	in := &edgeproto.Flavor{}
	return TestShowFlavor(mcClient, uri, token, region, in, modFuncs...)
}

func TestAddFlavorRes(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.AddFlavorRes(uri, token, dat)
}
func TestPermAddFlavorRes(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestAddFlavorRes(mcClient, uri, token, region, in, modFuncs...)
}

func TestRemoveFlavorRes(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Flavor, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	for _, fn := range modFuncs {
		fn(&dat.Flavor)
	}
	return mcClient.RemoveFlavorRes(uri, token, dat)
}
func TestPermRemoveFlavorRes(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Flavor)) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestRemoveFlavorRes(mcClient, uri, token, region, in, modFuncs...)
}

func (s *TestClient) CreateFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.CreateFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.DeleteFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.UpdateFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowFlavor(ctx context.Context, in *edgeproto.Flavor) ([]edgeproto.Flavor, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.ShowFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) AddFlavorRes(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.AddFlavorRes(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) RemoveFlavorRes(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.RemoveFlavorRes(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
