// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.CreateFlavor(uri, token, dat)
}
func TestPermCreateFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestCreateFlavor(mcClient, uri, token, region, in)
}

func TestDeleteFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.DeleteFlavor(uri, token, dat)
}
func TestPermDeleteFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestDeleteFlavor(mcClient, uri, token, region, in)
}

func TestUpdateFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.UpdateFlavor(uri, token, dat)
}
func TestPermUpdateFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestUpdateFlavor(mcClient, uri, token, region, in)
}

func TestShowFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) ([]edgeproto.Flavor, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.ShowFlavor(uri, token, dat)
}
func TestPermShowFlavor(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.Flavor, int, error) {
	in := &edgeproto.Flavor{}
	return TestShowFlavor(mcClient, uri, token, region, in)
}

func TestAddFlavorRes(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.AddFlavorRes(uri, token, dat)
}
func TestPermAddFlavorRes(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestAddFlavorRes(mcClient, uri, token, region, in)
}

func TestRemoveFlavorRes(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.RemoveFlavorRes(uri, token, dat)
}
func TestPermRemoveFlavorRes(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestRemoveFlavorRes(mcClient, uri, token, region, in)
}

func (s *TestClient) CreateFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.CreateFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.DeleteFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateFlavor(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.UpdateFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowFlavor(ctx context.Context, in *edgeproto.Flavor) ([]edgeproto.Flavor, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.ShowFlavor(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) AddFlavorRes(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.AddFlavorRes(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) RemoveFlavorRes(ctx context.Context, in *edgeproto.Flavor) (*edgeproto.Result, error) {
	inR := &ormapi.RegionFlavor{
		Region: s.Region,
		Flavor: *in,
	}
	out, status, err := s.McClient.RemoveFlavorRes(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
