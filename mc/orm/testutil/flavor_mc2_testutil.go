// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "os"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.CreateFlavor(uri, token, dat)
}
func TestPermCreateFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestCreateFlavor(mcClient, uri, token, region, in)
}

func TestDeleteFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.DeleteFlavor(uri, token, dat)
}
func TestPermDeleteFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestDeleteFlavor(mcClient, uri, token, region, in)
}

func TestUpdateFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.UpdateFlavor(uri, token, dat)
}
func TestPermUpdateFlavor(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestUpdateFlavor(mcClient, uri, token, region, in)
}

func TestShowFlavor(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) ([]edgeproto.Flavor, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.ShowFlavor(uri, token, dat)
}
func TestPermShowFlavor(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.Flavor, int, error) {
	in := &edgeproto.Flavor{}
	return TestShowFlavor(mcClient, uri, token, region, in)
}

func TestAddFlavorRes(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.AddFlavorRes(uri, token, dat)
}
func TestPermAddFlavorRes(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestAddFlavorRes(mcClient, uri, token, region, in)
}

func TestRemoveFlavorRes(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.Flavor) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionFlavor{}
	dat.Region = region
	dat.Flavor = *in
	return mcClient.RemoveFlavorRes(uri, token, dat)
}
func TestPermRemoveFlavorRes(mcClient *ormclient.Client, uri, token, region, org string) (*edgeproto.Result, int, error) {
	in := &edgeproto.Flavor{}
	return TestRemoveFlavorRes(mcClient, uri, token, region, in)
}

func RunMcFlavorApi(mcClient ormclient.Api, uri, token, region string, data *[]edgeproto.Flavor, dataMap interface{}, rc *bool, mode string) {
	for ii, flavor := range *data {
		in := &ormapi.RegionFlavor{
			Region: region,
			Flavor: flavor,
		}
		switch mode {
		case "create":
			_, st, err := mcClient.CreateFlavor(uri, token, in)
			checkMcErr("CreateFlavor", st, err, rc)
		case "delete":
			_, st, err := mcClient.DeleteFlavor(uri, token, in)
			checkMcErr("DeleteFlavor", st, err, rc)
		case "update":
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				fmt.Fprintf(os.Stderr, "bad dataMap for Flavor: %v", err)
				os.Exit(1)
			}
			in.Flavor.Fields = cli.GetSpecifiedFields(objMap, &in.Flavor, cli.YamlNamespace)
			_, st, err := mcClient.UpdateFlavor(uri, token, in)
			checkMcErr("UpdateFlavor", st, err, rc)
		case "show":
			_, st, err := mcClient.ShowFlavor(uri, token, in)
			checkMcErr("ShowFlavor", st, err, rc)
		case "addflavorres":
			_, st, err := mcClient.AddFlavorRes(uri, token, in)
			checkMcErr("AddFlavorRes", st, err, rc)
		case "removeflavorres":
			_, st, err := mcClient.RemoveFlavorRes(uri, token, in)
			checkMcErr("RemoveFlavorRes", st, err, rc)
		default:
			return
		}
	}
}
