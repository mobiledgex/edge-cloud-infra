// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package testutil

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud-infra/mc/mcctl/mctestclient"
	"github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateNetwork(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Network, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionNetwork{}
	dat.Region = region
	dat.Network = *in
	for _, fn := range modFuncs {
		fn(&dat.Network)
	}
	return mcClient.CreateNetwork(uri, token, dat)
}
func TestPermCreateNetwork(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	in := &edgeproto.Network{}
	in.Key.Organization = org
	return TestCreateNetwork(mcClient, uri, token, region, in, modFuncs...)
}

func TestDeleteNetwork(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Network, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionNetwork{}
	dat.Region = region
	dat.Network = *in
	for _, fn := range modFuncs {
		fn(&dat.Network)
	}
	return mcClient.DeleteNetwork(uri, token, dat)
}
func TestPermDeleteNetwork(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	in := &edgeproto.Network{}
	in.Key.Organization = org
	return TestDeleteNetwork(mcClient, uri, token, region, in, modFuncs...)
}

func TestUpdateNetwork(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Network, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	dat := &ormapi.RegionNetwork{}
	dat.Region = region
	dat.Network = *in
	for _, fn := range modFuncs {
		fn(&dat.Network)
	}
	return mcClient.UpdateNetwork(uri, token, dat)
}
func TestPermUpdateNetwork(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Result, int, error) {
	in := &edgeproto.Network{}
	in.Key.Organization = org
	in.Fields = append(in.Fields, edgeproto.NetworkFieldKeyOrganization)
	return TestUpdateNetwork(mcClient, uri, token, region, in, modFuncs...)
}

func TestShowNetwork(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.Network, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Network, int, error) {
	dat := &ormapi.RegionNetwork{}
	dat.Region = region
	dat.Network = *in
	for _, fn := range modFuncs {
		fn(&dat.Network)
	}
	return mcClient.ShowNetwork(uri, token, dat)
}
func TestPermShowNetwork(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.Network)) ([]edgeproto.Network, int, error) {
	in := &edgeproto.Network{}
	in.Key.Organization = org
	return TestShowNetwork(mcClient, uri, token, region, in, modFuncs...)
}

func (s *TestClient) CreateNetwork(ctx context.Context, in *edgeproto.Network) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionNetwork{
		Region:  s.Region,
		Network: *in,
	}
	out, status, err := s.McClient.CreateNetwork(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteNetwork(ctx context.Context, in *edgeproto.Network) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionNetwork{
		Region:  s.Region,
		Network: *in,
	}
	out, status, err := s.McClient.DeleteNetwork(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateNetwork(ctx context.Context, in *edgeproto.Network) ([]edgeproto.Result, error) {
	inR := &ormapi.RegionNetwork{
		Region:  s.Region,
		Network: *in,
	}
	out, status, err := s.McClient.UpdateNetwork(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowNetwork(ctx context.Context, in *edgeproto.Network) ([]edgeproto.Network, error) {
	inR := &ormapi.RegionNetwork{
		Region:  s.Region,
		Network: *in,
	}
	out, status, err := s.McClient.ShowNetwork(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
