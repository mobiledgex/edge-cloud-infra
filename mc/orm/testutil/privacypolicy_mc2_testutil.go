// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacypolicy.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreatePrivacyPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.PrivacyPolicy, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionPrivacyPolicy{}
	dat.Region = region
	dat.PrivacyPolicy = *in
	for _, fn := range modFuncs {
		fn(&dat.PrivacyPolicy)
	}
	return mcClient.CreatePrivacyPolicy(uri, token, dat)
}
func TestPermCreatePrivacyPolicy(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	in := &edgeproto.PrivacyPolicy{}
	in.Key.Organization = org
	return TestCreatePrivacyPolicy(mcClient, uri, token, region, in, modFuncs...)
}

func TestDeletePrivacyPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.PrivacyPolicy, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionPrivacyPolicy{}
	dat.Region = region
	dat.PrivacyPolicy = *in
	for _, fn := range modFuncs {
		fn(&dat.PrivacyPolicy)
	}
	return mcClient.DeletePrivacyPolicy(uri, token, dat)
}
func TestPermDeletePrivacyPolicy(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	in := &edgeproto.PrivacyPolicy{}
	in.Key.Organization = org
	return TestDeletePrivacyPolicy(mcClient, uri, token, region, in, modFuncs...)
}

func TestUpdatePrivacyPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.PrivacyPolicy, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionPrivacyPolicy{}
	dat.Region = region
	dat.PrivacyPolicy = *in
	for _, fn := range modFuncs {
		fn(&dat.PrivacyPolicy)
	}
	return mcClient.UpdatePrivacyPolicy(uri, token, dat)
}
func TestPermUpdatePrivacyPolicy(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.PrivacyPolicy)) (*edgeproto.Result, int, error) {
	in := &edgeproto.PrivacyPolicy{}
	in.Key.Organization = org
	return TestUpdatePrivacyPolicy(mcClient, uri, token, region, in, modFuncs...)
}

func TestShowPrivacyPolicy(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.PrivacyPolicy, modFuncs ...func(*edgeproto.PrivacyPolicy)) ([]edgeproto.PrivacyPolicy, int, error) {
	dat := &ormapi.RegionPrivacyPolicy{}
	dat.Region = region
	dat.PrivacyPolicy = *in
	for _, fn := range modFuncs {
		fn(&dat.PrivacyPolicy)
	}
	return mcClient.ShowPrivacyPolicy(uri, token, dat)
}
func TestPermShowPrivacyPolicy(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.PrivacyPolicy)) ([]edgeproto.PrivacyPolicy, int, error) {
	in := &edgeproto.PrivacyPolicy{}
	in.Key.Organization = org
	return TestShowPrivacyPolicy(mcClient, uri, token, region, in, modFuncs...)
}

func (s *TestClient) CreatePrivacyPolicy(ctx context.Context, in *edgeproto.PrivacyPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionPrivacyPolicy{
		Region:        s.Region,
		PrivacyPolicy: *in,
	}
	out, status, err := s.McClient.CreatePrivacyPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeletePrivacyPolicy(ctx context.Context, in *edgeproto.PrivacyPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionPrivacyPolicy{
		Region:        s.Region,
		PrivacyPolicy: *in,
	}
	out, status, err := s.McClient.DeletePrivacyPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdatePrivacyPolicy(ctx context.Context, in *edgeproto.PrivacyPolicy) (*edgeproto.Result, error) {
	inR := &ormapi.RegionPrivacyPolicy{
		Region:        s.Region,
		PrivacyPolicy: *in,
	}
	out, status, err := s.McClient.UpdatePrivacyPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowPrivacyPolicy(ctx context.Context, in *edgeproto.PrivacyPolicy) ([]edgeproto.PrivacyPolicy, error) {
	inR := &ormapi.RegionPrivacyPolicy{
		Region:        s.Region,
		PrivacyPolicy: *in,
	}
	out, status, err := s.McClient.ShowPrivacyPolicy(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
