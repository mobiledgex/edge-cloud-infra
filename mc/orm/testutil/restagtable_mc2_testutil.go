// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "context"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.CreateResTagTable(uri, token, dat)
}
func TestPermCreateResTagTable(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestCreateResTagTable(mcClient, uri, token, region, in, modFuncs...)
}

func TestDeleteResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.DeleteResTagTable(uri, token, dat)
}
func TestPermDeleteResTagTable(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestDeleteResTagTable(mcClient, uri, token, region, in, modFuncs...)
}

func TestUpdateResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.UpdateResTagTable(uri, token, dat)
}
func TestPermUpdateResTagTable(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestUpdateResTagTable(mcClient, uri, token, region, in, modFuncs...)
}

func TestShowResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) ([]edgeproto.ResTagTable, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.ShowResTagTable(uri, token, dat)
}
func TestPermShowResTagTable(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) ([]edgeproto.ResTagTable, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestShowResTagTable(mcClient, uri, token, region, in, modFuncs...)
}

func TestAddResTag(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.AddResTag(uri, token, dat)
}
func TestPermAddResTag(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestAddResTag(mcClient, uri, token, region, in, modFuncs...)
}

func TestRemoveResTag(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTable)
	}
	return mcClient.RemoveResTag(uri, token, dat)
}
func TestPermRemoveResTag(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTable)) (*edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	in.Key.Organization = org
	return TestRemoveResTag(mcClient, uri, token, region, in, modFuncs...)
}

func TestGetResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTableKey, modFuncs ...func(*edgeproto.ResTagTableKey)) (*edgeproto.ResTagTable, int, error) {
	dat := &ormapi.RegionResTagTableKey{}
	dat.Region = region
	dat.ResTagTableKey = *in
	for _, fn := range modFuncs {
		fn(&dat.ResTagTableKey)
	}
	return mcClient.GetResTagTable(uri, token, dat)
}
func TestPermGetResTagTable(mcClient *ormclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.ResTagTableKey)) (*edgeproto.ResTagTable, int, error) {
	in := &edgeproto.ResTagTableKey{}
	return TestGetResTagTable(mcClient, uri, token, region, in, modFuncs...)
}

func (s *TestClient) CreateResTagTable(ctx context.Context, in *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.CreateResTagTable(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteResTagTable(ctx context.Context, in *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.DeleteResTagTable(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateResTagTable(ctx context.Context, in *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.UpdateResTagTable(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowResTagTable(ctx context.Context, in *edgeproto.ResTagTable) ([]edgeproto.ResTagTable, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.ShowResTagTable(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) AddResTag(ctx context.Context, in *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.AddResTag(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) RemoveResTag(ctx context.Context, in *edgeproto.ResTagTable) (*edgeproto.Result, error) {
	inR := &ormapi.RegionResTagTable{
		Region:      s.Region,
		ResTagTable: *in,
	}
	out, status, err := s.McClient.RemoveResTag(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) GetResTagTable(ctx context.Context, in *edgeproto.ResTagTableKey) (*edgeproto.ResTagTable, error) {
	inR := &ormapi.RegionResTagTableKey{
		Region:         s.Region,
		ResTagTableKey: *in,
	}
	out, status, err := s.McClient.GetResTagTable(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
