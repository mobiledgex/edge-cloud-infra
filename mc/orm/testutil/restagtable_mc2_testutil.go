// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package testutil

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormclient"
import "github.com/mobiledgex/edge-cloud-infra/mc/ormapi"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) (edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.CreateResTagTable(uri, token, dat)
}
func TestPermCreateResTagTable(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestCreateResTagTable(mcClient, uri, token, region, in)
}

func TestDeleteResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) (edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.DeleteResTagTable(uri, token, dat)
}
func TestPermDeleteResTagTable(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestDeleteResTagTable(mcClient, uri, token, region, in)
}

func TestUpdateResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) (edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.UpdateResTagTable(uri, token, dat)
}
func TestPermUpdateResTagTable(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestUpdateResTagTable(mcClient, uri, token, region, in)
}

func TestShowResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) ([]edgeproto.ResTagTable, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.ShowResTagTable(uri, token, dat)
}
func TestPermShowResTagTable(mcClient *ormclient.Client, uri, token, region, org string) ([]edgeproto.ResTagTable, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestShowResTagTable(mcClient, uri, token, region, in)
}

func TestAddResTag(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) (edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.AddResTag(uri, token, dat)
}
func TestPermAddResTag(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestAddResTag(mcClient, uri, token, region, in)
}

func TestRemoveResTag(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTable) (edgeproto.Result, int, error) {
	dat := &ormapi.RegionResTagTable{}
	dat.Region = region
	dat.ResTagTable = *in
	return mcClient.RemoveResTag(uri, token, dat)
}
func TestPermRemoveResTag(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.Result, int, error) {
	in := &edgeproto.ResTagTable{}
	return TestRemoveResTag(mcClient, uri, token, region, in)
}

func TestGetResTagTable(mcClient *ormclient.Client, uri, token, region string, in *edgeproto.ResTagTableKey) (edgeproto.ResTagTable, int, error) {
	dat := &ormapi.RegionResTagTableKey{}
	dat.Region = region
	dat.ResTagTableKey = *in
	return mcClient.GetResTagTable(uri, token, dat)
}
func TestPermGetResTagTable(mcClient *ormclient.Client, uri, token, region, org string) (edgeproto.ResTagTable, int, error) {
	in := &edgeproto.ResTagTableKey{}
	return TestGetResTagTable(mcClient, uri, token, region, in)
}

func RunMcResTagTableApi(uri, token, region string, data *[]edgeproto.ResTagTable, dataMap []map[string]interface{}, rc *bool, mode string) {
	var mcClient ormclient.Api
	for ii, resTagTable := range *data {
		in := &ormapi.RegionResTagTable{
			Region:      region,
			ResTagTable: resTagTable,
		}
		switch mode {
		case "create":
			_, st, err := mcClient.CreateResTagTable(uri, token, in)
			checkMcErr("CreateResTagTable", st, err, rc)
		case "delete":
			_, st, err := mcClient.DeleteResTagTable(uri, token, in)
			checkMcErr("DeleteResTagTable", st, err, rc)
		case "update":
			in.ResTagTable.Fields = cli.GetSpecifiedFields(dataMap[ii], &in.ResTagTable, cli.YamlNamespace)
			_, st, err := mcClient.UpdateResTagTable(uri, token, in)
			checkMcErr("UpdateResTagTable", st, err, rc)
		default:
			return
		}
	}
}
